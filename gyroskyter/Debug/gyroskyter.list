
gyroskyter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072a4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  080073b0  080073b0  000173b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800745c  0800745c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800745c  0800745c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800745c  0800745c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800745c  0800745c  0001745c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007460  08007460  00017460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007464  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  20000070  080074d4  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000248  080074d4  00020248  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012226  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c2e  00000000  00000000  000322bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001178  00000000  00000000  00034ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001058  00000000  00000000  00036068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001997c  00000000  00000000  000370c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015f88  00000000  00000000  00050a3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ec87  00000000  00000000  000669c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f564b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ec4  00000000  00000000  000f569c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08007398 	.word	0x08007398

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08007398 	.word	0x08007398

0800014c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000152:	4b0c      	ldr	r3, [pc, #48]	; (8000184 <MX_DMA_Init+0x38>)
 8000154:	695b      	ldr	r3, [r3, #20]
 8000156:	4a0b      	ldr	r2, [pc, #44]	; (8000184 <MX_DMA_Init+0x38>)
 8000158:	f043 0301 	orr.w	r3, r3, #1
 800015c:	6153      	str	r3, [r2, #20]
 800015e:	4b09      	ldr	r3, [pc, #36]	; (8000184 <MX_DMA_Init+0x38>)
 8000160:	695b      	ldr	r3, [r3, #20]
 8000162:	f003 0301 	and.w	r3, r3, #1
 8000166:	607b      	str	r3, [r7, #4]
 8000168:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800016a:	2200      	movs	r2, #0
 800016c:	2100      	movs	r1, #0
 800016e:	200f      	movs	r0, #15
 8000170:	f000 ffcf 	bl	8001112 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000174:	200f      	movs	r0, #15
 8000176:	f000 ffe8 	bl	800114a <HAL_NVIC_EnableIRQ>

}
 800017a:	bf00      	nop
 800017c:	3708      	adds	r7, #8
 800017e:	46bd      	mov	sp, r7
 8000180:	bd80      	pop	{r7, pc}
 8000182:	bf00      	nop
 8000184:	40021000 	.word	0x40021000

08000188 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b088      	sub	sp, #32
 800018c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800018e:	f107 0310 	add.w	r3, r7, #16
 8000192:	2200      	movs	r2, #0
 8000194:	601a      	str	r2, [r3, #0]
 8000196:	605a      	str	r2, [r3, #4]
 8000198:	609a      	str	r2, [r3, #8]
 800019a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800019c:	4b24      	ldr	r3, [pc, #144]	; (8000230 <MX_GPIO_Init+0xa8>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	4a23      	ldr	r2, [pc, #140]	; (8000230 <MX_GPIO_Init+0xa8>)
 80001a2:	f043 0310 	orr.w	r3, r3, #16
 80001a6:	6193      	str	r3, [r2, #24]
 80001a8:	4b21      	ldr	r3, [pc, #132]	; (8000230 <MX_GPIO_Init+0xa8>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	f003 0310 	and.w	r3, r3, #16
 80001b0:	60fb      	str	r3, [r7, #12]
 80001b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001b4:	4b1e      	ldr	r3, [pc, #120]	; (8000230 <MX_GPIO_Init+0xa8>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	4a1d      	ldr	r2, [pc, #116]	; (8000230 <MX_GPIO_Init+0xa8>)
 80001ba:	f043 0320 	orr.w	r3, r3, #32
 80001be:	6193      	str	r3, [r2, #24]
 80001c0:	4b1b      	ldr	r3, [pc, #108]	; (8000230 <MX_GPIO_Init+0xa8>)
 80001c2:	699b      	ldr	r3, [r3, #24]
 80001c4:	f003 0320 	and.w	r3, r3, #32
 80001c8:	60bb      	str	r3, [r7, #8]
 80001ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001cc:	4b18      	ldr	r3, [pc, #96]	; (8000230 <MX_GPIO_Init+0xa8>)
 80001ce:	699b      	ldr	r3, [r3, #24]
 80001d0:	4a17      	ldr	r2, [pc, #92]	; (8000230 <MX_GPIO_Init+0xa8>)
 80001d2:	f043 0304 	orr.w	r3, r3, #4
 80001d6:	6193      	str	r3, [r2, #24]
 80001d8:	4b15      	ldr	r3, [pc, #84]	; (8000230 <MX_GPIO_Init+0xa8>)
 80001da:	699b      	ldr	r3, [r3, #24]
 80001dc:	f003 0304 	and.w	r3, r3, #4
 80001e0:	607b      	str	r3, [r7, #4]
 80001e2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001e4:	4b12      	ldr	r3, [pc, #72]	; (8000230 <MX_GPIO_Init+0xa8>)
 80001e6:	699b      	ldr	r3, [r3, #24]
 80001e8:	4a11      	ldr	r2, [pc, #68]	; (8000230 <MX_GPIO_Init+0xa8>)
 80001ea:	f043 0308 	orr.w	r3, r3, #8
 80001ee:	6193      	str	r3, [r2, #24]
 80001f0:	4b0f      	ldr	r3, [pc, #60]	; (8000230 <MX_GPIO_Init+0xa8>)
 80001f2:	699b      	ldr	r3, [r3, #24]
 80001f4:	f003 0308 	and.w	r3, r3, #8
 80001f8:	603b      	str	r3, [r7, #0]
 80001fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80001fc:	2200      	movs	r2, #0
 80001fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000202:	480c      	ldr	r0, [pc, #48]	; (8000234 <MX_GPIO_Init+0xac>)
 8000204:	f001 fcdc 	bl	8001bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000208:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800020c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800020e:	2301      	movs	r3, #1
 8000210:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000212:	2300      	movs	r3, #0
 8000214:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000216:	2302      	movs	r3, #2
 8000218:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800021a:	f107 0310 	add.w	r3, r7, #16
 800021e:	4619      	mov	r1, r3
 8000220:	4804      	ldr	r0, [pc, #16]	; (8000234 <MX_GPIO_Init+0xac>)
 8000222:	f001 fb51 	bl	80018c8 <HAL_GPIO_Init>

}
 8000226:	bf00      	nop
 8000228:	3720      	adds	r7, #32
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
 800022e:	bf00      	nop
 8000230:	40021000 	.word	0x40021000
 8000234:	40011000 	.word	0x40011000

08000238 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800023c:	4b12      	ldr	r3, [pc, #72]	; (8000288 <MX_I2C1_Init+0x50>)
 800023e:	4a13      	ldr	r2, [pc, #76]	; (800028c <MX_I2C1_Init+0x54>)
 8000240:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000242:	4b11      	ldr	r3, [pc, #68]	; (8000288 <MX_I2C1_Init+0x50>)
 8000244:	4a12      	ldr	r2, [pc, #72]	; (8000290 <MX_I2C1_Init+0x58>)
 8000246:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000248:	4b0f      	ldr	r3, [pc, #60]	; (8000288 <MX_I2C1_Init+0x50>)
 800024a:	2200      	movs	r2, #0
 800024c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800024e:	4b0e      	ldr	r3, [pc, #56]	; (8000288 <MX_I2C1_Init+0x50>)
 8000250:	2200      	movs	r2, #0
 8000252:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000254:	4b0c      	ldr	r3, [pc, #48]	; (8000288 <MX_I2C1_Init+0x50>)
 8000256:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800025a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800025c:	4b0a      	ldr	r3, [pc, #40]	; (8000288 <MX_I2C1_Init+0x50>)
 800025e:	2200      	movs	r2, #0
 8000260:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000262:	4b09      	ldr	r3, [pc, #36]	; (8000288 <MX_I2C1_Init+0x50>)
 8000264:	2200      	movs	r2, #0
 8000266:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000268:	4b07      	ldr	r3, [pc, #28]	; (8000288 <MX_I2C1_Init+0x50>)
 800026a:	2200      	movs	r2, #0
 800026c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800026e:	4b06      	ldr	r3, [pc, #24]	; (8000288 <MX_I2C1_Init+0x50>)
 8000270:	2200      	movs	r2, #0
 8000272:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000274:	4804      	ldr	r0, [pc, #16]	; (8000288 <MX_I2C1_Init+0x50>)
 8000276:	f001 fcbb 	bl	8001bf0 <HAL_I2C_Init>
 800027a:	4603      	mov	r3, r0
 800027c:	2b00      	cmp	r3, #0
 800027e:	d001      	beq.n	8000284 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000280:	f000 fa43 	bl	800070a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000284:	bf00      	nop
 8000286:	bd80      	pop	{r7, pc}
 8000288:	2000008c 	.word	0x2000008c
 800028c:	40005400 	.word	0x40005400
 8000290:	000186a0 	.word	0x000186a0

08000294 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b088      	sub	sp, #32
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800029c:	f107 0310 	add.w	r3, r7, #16
 80002a0:	2200      	movs	r2, #0
 80002a2:	601a      	str	r2, [r3, #0]
 80002a4:	605a      	str	r2, [r3, #4]
 80002a6:	609a      	str	r2, [r3, #8]
 80002a8:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	4a1a      	ldr	r2, [pc, #104]	; (8000318 <HAL_I2C_MspInit+0x84>)
 80002b0:	4293      	cmp	r3, r2
 80002b2:	d12d      	bne.n	8000310 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80002b4:	4b19      	ldr	r3, [pc, #100]	; (800031c <HAL_I2C_MspInit+0x88>)
 80002b6:	699b      	ldr	r3, [r3, #24]
 80002b8:	4a18      	ldr	r2, [pc, #96]	; (800031c <HAL_I2C_MspInit+0x88>)
 80002ba:	f043 0308 	orr.w	r3, r3, #8
 80002be:	6193      	str	r3, [r2, #24]
 80002c0:	4b16      	ldr	r3, [pc, #88]	; (800031c <HAL_I2C_MspInit+0x88>)
 80002c2:	699b      	ldr	r3, [r3, #24]
 80002c4:	f003 0308 	and.w	r3, r3, #8
 80002c8:	60fb      	str	r3, [r7, #12]
 80002ca:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80002cc:	23c0      	movs	r3, #192	; 0xc0
 80002ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80002d0:	2312      	movs	r3, #18
 80002d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002d4:	2300      	movs	r3, #0
 80002d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002d8:	2303      	movs	r3, #3
 80002da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002dc:	f107 0310 	add.w	r3, r7, #16
 80002e0:	4619      	mov	r1, r3
 80002e2:	480f      	ldr	r0, [pc, #60]	; (8000320 <HAL_I2C_MspInit+0x8c>)
 80002e4:	f001 faf0 	bl	80018c8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80002e8:	4b0c      	ldr	r3, [pc, #48]	; (800031c <HAL_I2C_MspInit+0x88>)
 80002ea:	69db      	ldr	r3, [r3, #28]
 80002ec:	4a0b      	ldr	r2, [pc, #44]	; (800031c <HAL_I2C_MspInit+0x88>)
 80002ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80002f2:	61d3      	str	r3, [r2, #28]
 80002f4:	4b09      	ldr	r3, [pc, #36]	; (800031c <HAL_I2C_MspInit+0x88>)
 80002f6:	69db      	ldr	r3, [r3, #28]
 80002f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80002fc:	60bb      	str	r3, [r7, #8]
 80002fe:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000300:	2200      	movs	r2, #0
 8000302:	2100      	movs	r1, #0
 8000304:	201f      	movs	r0, #31
 8000306:	f000 ff04 	bl	8001112 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800030a:	201f      	movs	r0, #31
 800030c:	f000 ff1d 	bl	800114a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000310:	bf00      	nop
 8000312:	3720      	adds	r7, #32
 8000314:	46bd      	mov	sp, r7
 8000316:	bd80      	pop	{r7, pc}
 8000318:	40005400 	.word	0x40005400
 800031c:	40021000 	.word	0x40021000
 8000320:	40010c00 	.word	0x40010c00

08000324 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000324:	b480      	push	{r7}
 8000326:	b083      	sub	sp, #12
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800032c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000330:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000334:	f003 0301 	and.w	r3, r3, #1
 8000338:	2b00      	cmp	r3, #0
 800033a:	d013      	beq.n	8000364 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800033c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000340:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000344:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000348:	2b00      	cmp	r3, #0
 800034a:	d00b      	beq.n	8000364 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800034c:	e000      	b.n	8000350 <ITM_SendChar+0x2c>
    {
      __NOP();
 800034e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000350:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d0f9      	beq.n	800034e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800035a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800035e:	687a      	ldr	r2, [r7, #4]
 8000360:	b2d2      	uxtb	r2, r2
 8000362:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000364:	687b      	ldr	r3, [r7, #4]
}
 8000366:	4618      	mov	r0, r3
 8000368:	370c      	adds	r7, #12
 800036a:	46bd      	mov	sp, r7
 800036c:	bc80      	pop	{r7}
 800036e:	4770      	bx	lr

08000370 <_write>:
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
int _write(int32_t file, uint8_t ptr, int32_t len)
    {
 8000370:	b580      	push	{r7, lr}
 8000372:	b086      	sub	sp, #24
 8000374:	af00      	add	r7, sp, #0
 8000376:	60f8      	str	r0, [r7, #12]
 8000378:	460b      	mov	r3, r1
 800037a:	607a      	str	r2, [r7, #4]
 800037c:	72fb      	strb	r3, [r7, #11]
        for (int i = 0; i < len; i++)
 800037e:	2300      	movs	r3, #0
 8000380:	617b      	str	r3, [r7, #20]
 8000382:	e008      	b.n	8000396 <_write+0x26>
        {
            ITM_SendChar(ptr++);
 8000384:	7afb      	ldrb	r3, [r7, #11]
 8000386:	1c5a      	adds	r2, r3, #1
 8000388:	72fa      	strb	r2, [r7, #11]
 800038a:	4618      	mov	r0, r3
 800038c:	f7ff ffca 	bl	8000324 <ITM_SendChar>
        for (int i = 0; i < len; i++)
 8000390:	697b      	ldr	r3, [r7, #20]
 8000392:	3301      	adds	r3, #1
 8000394:	617b      	str	r3, [r7, #20]
 8000396:	697a      	ldr	r2, [r7, #20]
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	429a      	cmp	r2, r3
 800039c:	dbf2      	blt.n	8000384 <_write+0x14>
        }
        return len;
 800039e:	687b      	ldr	r3, [r7, #4]
    }
 80003a0:	4618      	mov	r0, r3
 80003a2:	3718      	adds	r7, #24
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}

080003a8 <servo_deg>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void servo_deg(uint8_t deg){
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	4603      	mov	r3, r0
 80003b0:	71fb      	strb	r3, [r7, #7]
		deg >=360? deg=360: deg;
		deg ==0? deg = 0:deg;
 80003b2:	79fb      	ldrb	r3, [r7, #7]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d101      	bne.n	80003bc <servo_deg+0x14>
 80003b8:	2300      	movs	r3, #0
 80003ba:	71fb      	strb	r3, [r7, #7]
		TIM2->CCR1 = 7500 - (deg*35);
 80003bc:	79fb      	ldrb	r3, [r7, #7]
 80003be:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80003c2:	fb02 f303 	mul.w	r3, r2, r3
 80003c6:	f503 53ea 	add.w	r3, r3, #7488	; 0x1d40
 80003ca:	330c      	adds	r3, #12
 80003cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003d0:	6353      	str	r3, [r2, #52]	; 0x34

}
 80003d2:	bf00      	nop
 80003d4:	370c      	adds	r7, #12
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bc80      	pop	{r7}
 80003da:	4770      	bx	lr

080003dc <MPU_6050_Init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void MPU_6050_Init(void){
 80003dc:	b580      	push	{r7, lr}
 80003de:	b086      	sub	sp, #24
 80003e0:	af04      	add	r7, sp, #16
	int check=0;
 80003e2:	2300      	movs	r3, #0
 80003e4:	607b      	str	r3, [r7, #4]
	int data=0;
 80003e6:	2300      	movs	r3, #0
 80003e8:	603b      	str	r3, [r7, #0]

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDRESS_AD0_LOW, MPU6050_RA_WHO_AM_I, 1, &check, 1, 1000);
 80003ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003ee:	9302      	str	r3, [sp, #8]
 80003f0:	2301      	movs	r3, #1
 80003f2:	9301      	str	r3, [sp, #4]
 80003f4:	1d3b      	adds	r3, r7, #4
 80003f6:	9300      	str	r3, [sp, #0]
 80003f8:	2301      	movs	r3, #1
 80003fa:	2275      	movs	r2, #117	; 0x75
 80003fc:	21d0      	movs	r1, #208	; 0xd0
 80003fe:	4822      	ldr	r0, [pc, #136]	; (8000488 <MPU_6050_Init+0xac>)
 8000400:	f001 fe48 	bl	8002094 <HAL_I2C_Mem_Read>
	if (check==104) {
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	2b68      	cmp	r3, #104	; 0x68
 8000408:	d139      	bne.n	800047e <MPU_6050_Init+0xa2>
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDRESS_AD0_LOW, MPU6050_RA_PWR_MGMT_1, 1, &data, 1, 1000);
 800040a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800040e:	9302      	str	r3, [sp, #8]
 8000410:	2301      	movs	r3, #1
 8000412:	9301      	str	r3, [sp, #4]
 8000414:	463b      	mov	r3, r7
 8000416:	9300      	str	r3, [sp, #0]
 8000418:	2301      	movs	r3, #1
 800041a:	226b      	movs	r2, #107	; 0x6b
 800041c:	21d0      	movs	r1, #208	; 0xd0
 800041e:	481a      	ldr	r0, [pc, #104]	; (8000488 <MPU_6050_Init+0xac>)
 8000420:	f001 fd3e 	bl	8001ea0 <HAL_I2C_Mem_Write>
	data = 0x07;
 8000424:	2307      	movs	r3, #7
 8000426:	603b      	str	r3, [r7, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDRESS_AD0_LOW, MPU6050_RA_SMPLRT_DIV, 1, &data, 1, 1000);
 8000428:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800042c:	9302      	str	r3, [sp, #8]
 800042e:	2301      	movs	r3, #1
 8000430:	9301      	str	r3, [sp, #4]
 8000432:	463b      	mov	r3, r7
 8000434:	9300      	str	r3, [sp, #0]
 8000436:	2301      	movs	r3, #1
 8000438:	2219      	movs	r2, #25
 800043a:	21d0      	movs	r1, #208	; 0xd0
 800043c:	4812      	ldr	r0, [pc, #72]	; (8000488 <MPU_6050_Init+0xac>)
 800043e:	f001 fd2f 	bl	8001ea0 <HAL_I2C_Mem_Write>

	data = 0x00;
 8000442:	2300      	movs	r3, #0
 8000444:	603b      	str	r3, [r7, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDRESS_AD0_LOW, MPU6050_RA_ACCEL_CONFIG, 1, &data, 1, 1000);
 8000446:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800044a:	9302      	str	r3, [sp, #8]
 800044c:	2301      	movs	r3, #1
 800044e:	9301      	str	r3, [sp, #4]
 8000450:	463b      	mov	r3, r7
 8000452:	9300      	str	r3, [sp, #0]
 8000454:	2301      	movs	r3, #1
 8000456:	221c      	movs	r2, #28
 8000458:	21d0      	movs	r1, #208	; 0xd0
 800045a:	480b      	ldr	r0, [pc, #44]	; (8000488 <MPU_6050_Init+0xac>)
 800045c:	f001 fd20 	bl	8001ea0 <HAL_I2C_Mem_Write>
	data = 0x00;
 8000460:	2300      	movs	r3, #0
 8000462:	603b      	str	r3, [r7, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDRESS_AD0_LOW, MPU6050_RA_GYRO_CONFIG, 1, &data, 1, 1000);
 8000464:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000468:	9302      	str	r3, [sp, #8]
 800046a:	2301      	movs	r3, #1
 800046c:	9301      	str	r3, [sp, #4]
 800046e:	463b      	mov	r3, r7
 8000470:	9300      	str	r3, [sp, #0]
 8000472:	2301      	movs	r3, #1
 8000474:	221b      	movs	r2, #27
 8000476:	21d0      	movs	r1, #208	; 0xd0
 8000478:	4803      	ldr	r0, [pc, #12]	; (8000488 <MPU_6050_Init+0xac>)
 800047a:	f001 fd11 	bl	8001ea0 <HAL_I2C_Mem_Write>
	}
}
 800047e:	bf00      	nop
 8000480:	3708      	adds	r7, #8
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	2000008c 	.word	0x2000008c

0800048c <filter>:

uint32_t  timme = 0;

const int NUM_READ = 30;
int filter()
{
 800048c:	b480      	push	{r7}
 800048e:	b083      	sub	sp, #12
 8000490:	af00      	add	r7, sp, #0

	long sum = 0;
 8000492:	2300      	movs	r3, #0
 8000494:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < NUM_READ; i++)  // согласно количеству усреднений
 8000496:	2300      	movs	r3, #0
 8000498:	603b      	str	r3, [r7, #0]
 800049a:	e009      	b.n	80004b0 <filter+0x24>
	    sum += Accel_X_RAW;                  // суммируем значения с любого датчика в переменную sum
 800049c:	4b0b      	ldr	r3, [pc, #44]	; (80004cc <filter+0x40>)
 800049e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80004a2:	461a      	mov	r2, r3
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	4413      	add	r3, r2
 80004a8:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < NUM_READ; i++)  // согласно количеству усреднений
 80004aa:	683b      	ldr	r3, [r7, #0]
 80004ac:	3301      	adds	r3, #1
 80004ae:	603b      	str	r3, [r7, #0]
 80004b0:	221e      	movs	r2, #30
 80004b2:	683b      	ldr	r3, [r7, #0]
 80004b4:	4293      	cmp	r3, r2
 80004b6:	dbf1      	blt.n	800049c <filter+0x10>
	  return ((int)sum / NUM_READ);
 80004b8:	221e      	movs	r2, #30
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	fb93 f3f2 	sdiv	r3, r3, r2

}
 80004c0:	4618      	mov	r0, r3
 80004c2:	370c      	adds	r7, #12
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bc80      	pop	{r7}
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop
 80004cc:	200000e0 	.word	0x200000e0

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b086      	sub	sp, #24
 80004d4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d6:	f000 fcbf 	bl	8000e58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004da:	f000 f8d1 	bl	8000680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004de:	f7ff fe53 	bl	8000188 <MX_GPIO_Init>
  MX_DMA_Init();
 80004e2:	f7ff fe33 	bl	800014c <MX_DMA_Init>
  MX_I2C1_Init();
 80004e6:	f7ff fea7 	bl	8000238 <MX_I2C1_Init>
  MX_TIM1_Init();
 80004ea:	f000 fa59 	bl	80009a0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80004ee:	f000 fc0f 	bl	8000d10 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80004f2:	f000 fadd 	bl	8000ab0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  uint8_t Rec_Data[6]={0,0,0,0,0,0};
 80004f6:	4a55      	ldr	r2, [pc, #340]	; (800064c <main+0x17c>)
 80004f8:	463b      	mov	r3, r7
 80004fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004fe:	6018      	str	r0, [r3, #0]
 8000500:	3304      	adds	r3, #4
 8000502:	8019      	strh	r1, [r3, #0]
  MPU_6050_Init();
 8000504:	f7ff ff6a 	bl	80003dc <MPU_6050_Init>
  /* USER CODE END 2 */
  HAL_TIM_PWM_Start_IT(&htim2,TIM_CHANNEL_1);
 8000508:	2100      	movs	r1, #0
 800050a:	4851      	ldr	r0, [pc, #324]	; (8000650 <main+0x180>)
 800050c:	f004 fc50 	bl	8004db0 <HAL_TIM_PWM_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_I2C_Mem_Read(&hi2c1,MPU6050_ADDRESS_AD0_LOW, MPU6050_RA_ACCEL_XOUT_H, 1, Rec_Data, 6, 1000);
 8000510:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000514:	9302      	str	r3, [sp, #8]
 8000516:	2306      	movs	r3, #6
 8000518:	9301      	str	r3, [sp, #4]
 800051a:	463b      	mov	r3, r7
 800051c:	9300      	str	r3, [sp, #0]
 800051e:	2301      	movs	r3, #1
 8000520:	223b      	movs	r2, #59	; 0x3b
 8000522:	21d0      	movs	r1, #208	; 0xd0
 8000524:	484b      	ldr	r0, [pc, #300]	; (8000654 <main+0x184>)
 8000526:	f001 fdb5 	bl	8002094 <HAL_I2C_Mem_Read>
	                        Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 800052a:	783b      	ldrb	r3, [r7, #0]
 800052c:	021b      	lsls	r3, r3, #8
 800052e:	b21a      	sxth	r2, r3
 8000530:	787b      	ldrb	r3, [r7, #1]
 8000532:	b21b      	sxth	r3, r3
 8000534:	4313      	orrs	r3, r2
 8000536:	b21a      	sxth	r2, r3
 8000538:	4b47      	ldr	r3, [pc, #284]	; (8000658 <main+0x188>)
 800053a:	801a      	strh	r2, [r3, #0]
	                        Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 800053c:	78bb      	ldrb	r3, [r7, #2]
 800053e:	021b      	lsls	r3, r3, #8
 8000540:	b21a      	sxth	r2, r3
 8000542:	78fb      	ldrb	r3, [r7, #3]
 8000544:	b21b      	sxth	r3, r3
 8000546:	4313      	orrs	r3, r2
 8000548:	b21a      	sxth	r2, r3
 800054a:	4b44      	ldr	r3, [pc, #272]	; (800065c <main+0x18c>)
 800054c:	801a      	strh	r2, [r3, #0]
	                        Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 800054e:	793b      	ldrb	r3, [r7, #4]
 8000550:	021b      	lsls	r3, r3, #8
 8000552:	b21a      	sxth	r2, r3
 8000554:	797b      	ldrb	r3, [r7, #5]
 8000556:	b21b      	sxth	r3, r3
 8000558:	4313      	orrs	r3, r2
 800055a:	b21a      	sxth	r2, r3
 800055c:	4b40      	ldr	r3, [pc, #256]	; (8000660 <main+0x190>)
 800055e:	801a      	strh	r2, [r3, #0]
	  //
	                      //HAL_Delay(10);


	                        HAL_I2C_Mem_Read(&hi2c1,MPU6050_ADDRESS_AD0_LOW, MPU6050_RA_GYRO_XOUT_H, 1, Rec_Data, 6, 1000);
 8000560:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000564:	9302      	str	r3, [sp, #8]
 8000566:	2306      	movs	r3, #6
 8000568:	9301      	str	r3, [sp, #4]
 800056a:	463b      	mov	r3, r7
 800056c:	9300      	str	r3, [sp, #0]
 800056e:	2301      	movs	r3, #1
 8000570:	2243      	movs	r2, #67	; 0x43
 8000572:	21d0      	movs	r1, #208	; 0xd0
 8000574:	4837      	ldr	r0, [pc, #220]	; (8000654 <main+0x184>)
 8000576:	f001 fd8d 	bl	8002094 <HAL_I2C_Mem_Read>
	                        Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 800057a:	783b      	ldrb	r3, [r7, #0]
 800057c:	021b      	lsls	r3, r3, #8
 800057e:	b21a      	sxth	r2, r3
 8000580:	787b      	ldrb	r3, [r7, #1]
 8000582:	b21b      	sxth	r3, r3
 8000584:	4313      	orrs	r3, r2
 8000586:	b21a      	sxth	r2, r3
 8000588:	4b36      	ldr	r3, [pc, #216]	; (8000664 <main+0x194>)
 800058a:	801a      	strh	r2, [r3, #0]
	                        Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 800058c:	78bb      	ldrb	r3, [r7, #2]
 800058e:	021b      	lsls	r3, r3, #8
 8000590:	b21a      	sxth	r2, r3
 8000592:	78fb      	ldrb	r3, [r7, #3]
 8000594:	b21b      	sxth	r3, r3
 8000596:	4313      	orrs	r3, r2
 8000598:	b21a      	sxth	r2, r3
 800059a:	4b33      	ldr	r3, [pc, #204]	; (8000668 <main+0x198>)
 800059c:	801a      	strh	r2, [r3, #0]
	                        Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 800059e:	793b      	ldrb	r3, [r7, #4]
 80005a0:	021b      	lsls	r3, r3, #8
 80005a2:	b21a      	sxth	r2, r3
 80005a4:	797b      	ldrb	r3, [r7, #5]
 80005a6:	b21b      	sxth	r3, r3
 80005a8:	4313      	orrs	r3, r2
 80005aa:	b21a      	sxth	r2, r3
 80005ac:	4b2f      	ldr	r3, [pc, #188]	; (800066c <main+0x19c>)
 80005ae:	801a      	strh	r2, [r3, #0]

//							 if((HAL_GetTick() - timme) > 1000){
//								// что-то делаем
//								timme = HAL_GetTick();
//
								Accel_X_Filtr = filter();
 80005b0:	f7ff ff6c 	bl	800048c <filter>
 80005b4:	4603      	mov	r3, r0
 80005b6:	b21a      	sxth	r2, r3
 80005b8:	4b2d      	ldr	r3, [pc, #180]	; (8000670 <main+0x1a0>)
 80005ba:	801a      	strh	r2, [r3, #0]
//
//
								 if (Accel_X_Filtr > 4000){
 80005bc:	4b2c      	ldr	r3, [pc, #176]	; (8000670 <main+0x1a0>)
 80005be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005c2:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80005c6:	dd0e      	ble.n	80005e6 <main+0x116>


									 servo_deg(Accel_X_Filtr / 90);
 80005c8:	4b29      	ldr	r3, [pc, #164]	; (8000670 <main+0x1a0>)
 80005ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005ce:	4a29      	ldr	r2, [pc, #164]	; (8000674 <main+0x1a4>)
 80005d0:	fb82 1203 	smull	r1, r2, r2, r3
 80005d4:	441a      	add	r2, r3
 80005d6:	1192      	asrs	r2, r2, #6
 80005d8:	17db      	asrs	r3, r3, #31
 80005da:	1ad3      	subs	r3, r2, r3
 80005dc:	b21b      	sxth	r3, r3
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	4618      	mov	r0, r3
 80005e2:	f7ff fee1 	bl	80003a8 <servo_deg>

								 }

								 if (Accel_X_Filtr > -300 && Accel_X_Filtr < 300)
 80005e6:	4b22      	ldr	r3, [pc, #136]	; (8000670 <main+0x1a0>)
 80005e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005ec:	f513 7f96 	cmn.w	r3, #300	; 0x12c
 80005f0:	dd08      	ble.n	8000604 <main+0x134>
 80005f2:	4b1f      	ldr	r3, [pc, #124]	; (8000670 <main+0x1a0>)
 80005f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005f8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80005fc:	da02      	bge.n	8000604 <main+0x134>
									 servo_deg(90);
 80005fe:	205a      	movs	r0, #90	; 0x5a
 8000600:	f7ff fed2 	bl	80003a8 <servo_deg>
	//
								 if (Accel_X_Filtr < -4000 )
 8000604:	4b1a      	ldr	r3, [pc, #104]	; (8000670 <main+0x1a0>)
 8000606:	f9b3 3000 	ldrsh.w	r3, [r3]
 800060a:	f513 6f7a 	cmn.w	r3, #4000	; 0xfa0
 800060e:	da12      	bge.n	8000636 <main+0x166>
									 servo_deg((180 - Accel_X_Filtr / -90 ));
 8000610:	4b17      	ldr	r3, [pc, #92]	; (8000670 <main+0x1a0>)
 8000612:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000616:	4a17      	ldr	r2, [pc, #92]	; (8000674 <main+0x1a4>)
 8000618:	fb82 1203 	smull	r1, r2, r2, r3
 800061c:	441a      	add	r2, r3
 800061e:	1192      	asrs	r2, r2, #6
 8000620:	17db      	asrs	r3, r3, #31
 8000622:	1a9b      	subs	r3, r3, r2
 8000624:	b21b      	sxth	r3, r3
 8000626:	b2da      	uxtb	r2, r3
 8000628:	f06f 034b 	mvn.w	r3, #75	; 0x4b
 800062c:	1a9b      	subs	r3, r3, r2
 800062e:	b2db      	uxtb	r3, r3
 8000630:	4618      	mov	r0, r3
 8000632:	f7ff feb9 	bl	80003a8 <servo_deg>

								 HAL_Delay(100);
 8000636:	2064      	movs	r0, #100	; 0x64
 8000638:	f000 fc70 	bl	8000f1c <HAL_Delay>
					//			 TIM2->CCR1=(-Accel_X_Filtr/8)+3300;

//							}
	  printf("Preved!\r\n");
 800063c:	480e      	ldr	r0, [pc, #56]	; (8000678 <main+0x1a8>)
 800063e:	f006 fa23 	bl	8006a88 <puts>
	  printf("GOI\r\n");
 8000642:	480e      	ldr	r0, [pc, #56]	; (800067c <main+0x1ac>)
 8000644:	f006 fa20 	bl	8006a88 <puts>
  {
 8000648:	e762      	b.n	8000510 <main+0x40>
 800064a:	bf00      	nop
 800064c:	080073c4 	.word	0x080073c4
 8000650:	2000013c 	.word	0x2000013c
 8000654:	2000008c 	.word	0x2000008c
 8000658:	200000e0 	.word	0x200000e0
 800065c:	200000e2 	.word	0x200000e2
 8000660:	200000e4 	.word	0x200000e4
 8000664:	200000e6 	.word	0x200000e6
 8000668:	200000e8 	.word	0x200000e8
 800066c:	200000ea 	.word	0x200000ea
 8000670:	200000ec 	.word	0x200000ec
 8000674:	b60b60b7 	.word	0xb60b60b7
 8000678:	080073b0 	.word	0x080073b0
 800067c:	080073bc 	.word	0x080073bc

08000680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b090      	sub	sp, #64	; 0x40
 8000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	f107 0318 	add.w	r3, r7, #24
 800068a:	2228      	movs	r2, #40	; 0x28
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f006 f984 	bl	800699c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]
 80006a0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a2:	2301      	movs	r3, #1
 80006a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b0:	2301      	movs	r3, #1
 80006b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b4:	2302      	movs	r3, #2
 80006b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006be:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80006c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c4:	f107 0318 	add.w	r3, r7, #24
 80006c8:	4618      	mov	r0, r3
 80006ca:	f003 fec3 	bl	8004454 <HAL_RCC_OscConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80006d4:	f000 f819 	bl	800070a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d8:	230f      	movs	r3, #15
 80006da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006dc:	2302      	movs	r3, #2
 80006de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	2102      	movs	r1, #2
 80006f2:	4618      	mov	r0, r3
 80006f4:	f004 f930 	bl	8004958 <HAL_RCC_ClockConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80006fe:	f000 f804 	bl	800070a <Error_Handler>
  }
}
 8000702:	bf00      	nop
 8000704:	3740      	adds	r7, #64	; 0x40
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}

0800070a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800070a:	b480      	push	{r7}
 800070c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800070e:	b672      	cpsid	i
}
 8000710:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000712:	e7fe      	b.n	8000712 <Error_Handler+0x8>

08000714 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800071a:	4b1d      	ldr	r3, [pc, #116]	; (8000790 <HAL_MspInit+0x7c>)
 800071c:	699b      	ldr	r3, [r3, #24]
 800071e:	4a1c      	ldr	r2, [pc, #112]	; (8000790 <HAL_MspInit+0x7c>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	6193      	str	r3, [r2, #24]
 8000726:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <HAL_MspInit+0x7c>)
 8000728:	699b      	ldr	r3, [r3, #24]
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000732:	4b17      	ldr	r3, [pc, #92]	; (8000790 <HAL_MspInit+0x7c>)
 8000734:	69db      	ldr	r3, [r3, #28]
 8000736:	4a16      	ldr	r2, [pc, #88]	; (8000790 <HAL_MspInit+0x7c>)
 8000738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800073c:	61d3      	str	r3, [r2, #28]
 800073e:	4b14      	ldr	r3, [pc, #80]	; (8000790 <HAL_MspInit+0x7c>)
 8000740:	69db      	ldr	r3, [r3, #28]
 8000742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 800074a:	2200      	movs	r2, #0
 800074c:	2100      	movs	r1, #0
 800074e:	2004      	movs	r0, #4
 8000750:	f000 fcdf 	bl	8001112 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8000754:	2004      	movs	r0, #4
 8000756:	f000 fcf8 	bl	800114a <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800075a:	2200      	movs	r2, #0
 800075c:	2100      	movs	r1, #0
 800075e:	2005      	movs	r0, #5
 8000760:	f000 fcd7 	bl	8001112 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000764:	2005      	movs	r0, #5
 8000766:	f000 fcf0 	bl	800114a <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800076a:	4b0a      	ldr	r3, [pc, #40]	; (8000794 <HAL_MspInit+0x80>)
 800076c:	685b      	ldr	r3, [r3, #4]
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	4a04      	ldr	r2, [pc, #16]	; (8000794 <HAL_MspInit+0x80>)
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000786:	bf00      	nop
 8000788:	3710      	adds	r7, #16
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40021000 	.word	0x40021000
 8000794:	40010000 	.word	0x40010000

08000798 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800079c:	e7fe      	b.n	800079c <NMI_Handler+0x4>

0800079e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800079e:	b480      	push	{r7}
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007a2:	e7fe      	b.n	80007a2 <HardFault_Handler+0x4>

080007a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <MemManage_Handler+0x4>

080007aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007aa:	b480      	push	{r7}
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ae:	e7fe      	b.n	80007ae <BusFault_Handler+0x4>

080007b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <UsageFault_Handler+0x4>

080007b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007b6:	b480      	push	{r7}
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ba:	bf00      	nop
 80007bc:	46bd      	mov	sp, r7
 80007be:	bc80      	pop	{r7}
 80007c0:	4770      	bx	lr

080007c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007c2:	b480      	push	{r7}
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007c6:	bf00      	nop
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bc80      	pop	{r7}
 80007cc:	4770      	bx	lr

080007ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ce:	b480      	push	{r7}
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007d2:	bf00      	nop
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bc80      	pop	{r7}
 80007d8:	4770      	bx	lr

080007da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007da:	b580      	push	{r7, lr}
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007de:	f000 fb81 	bl	8000ee4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 80007ea:	f000 feeb 	bl	80015c4 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80007f2:	b480      	push	{r7}
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80007f6:	bf00      	nop
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bc80      	pop	{r7}
 80007fc:	4770      	bx	lr
	...

08000800 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8000804:	4802      	ldr	r0, [pc, #8]	; (8000810 <DMA1_Channel5_IRQHandler+0x10>)
 8000806:	f000 fdc9 	bl	800139c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000184 	.word	0x20000184

08000814 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000818:	4802      	ldr	r0, [pc, #8]	; (8000824 <TIM1_BRK_IRQHandler+0x10>)
 800081a:	f004 fc09 	bl	8005030 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	200000f4 	.word	0x200000f4

08000828 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800082c:	4802      	ldr	r0, [pc, #8]	; (8000838 <TIM1_UP_IRQHandler+0x10>)
 800082e:	f004 fbff 	bl	8005030 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	200000f4 	.word	0x200000f4

0800083c <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000840:	4802      	ldr	r0, [pc, #8]	; (800084c <TIM1_TRG_COM_IRQHandler+0x10>)
 8000842:	f004 fbf5 	bl	8005030 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	200000f4 	.word	0x200000f4

08000850 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000854:	4802      	ldr	r0, [pc, #8]	; (8000860 <TIM1_CC_IRQHandler+0x10>)
 8000856:	f004 fbeb 	bl	8005030 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	200000f4 	.word	0x200000f4

08000864 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000868:	4802      	ldr	r0, [pc, #8]	; (8000874 <I2C1_EV_IRQHandler+0x10>)
 800086a:	f001 fe7b 	bl	8002564 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	2000008c 	.word	0x2000008c

08000878 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800087c:	4802      	ldr	r0, [pc, #8]	; (8000888 <USART1_IRQHandler+0x10>)
 800087e:	f005 fb81 	bl	8005f84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	200001c8 	.word	0x200001c8

0800088c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af00      	add	r7, sp, #0
 8000892:	60f8      	str	r0, [r7, #12]
 8000894:	60b9      	str	r1, [r7, #8]
 8000896:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000898:	2300      	movs	r3, #0
 800089a:	617b      	str	r3, [r7, #20]
 800089c:	e00a      	b.n	80008b4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800089e:	f3af 8000 	nop.w
 80008a2:	4601      	mov	r1, r0
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	1c5a      	adds	r2, r3, #1
 80008a8:	60ba      	str	r2, [r7, #8]
 80008aa:	b2ca      	uxtb	r2, r1
 80008ac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	3301      	adds	r3, #1
 80008b2:	617b      	str	r3, [r7, #20]
 80008b4:	697a      	ldr	r2, [r7, #20]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	429a      	cmp	r2, r3
 80008ba:	dbf0      	blt.n	800089e <_read+0x12>
  }

  return len;
 80008bc:	687b      	ldr	r3, [r7, #4]
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3718      	adds	r7, #24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80008c6:	b480      	push	{r7}
 80008c8:	b083      	sub	sp, #12
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	370c      	adds	r7, #12
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc80      	pop	{r7}
 80008da:	4770      	bx	lr

080008dc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008ec:	605a      	str	r2, [r3, #4]
  return 0;
 80008ee:	2300      	movs	r3, #0
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bc80      	pop	{r7}
 80008f8:	4770      	bx	lr

080008fa <_isatty>:

int _isatty(int file)
{
 80008fa:	b480      	push	{r7}
 80008fc:	b083      	sub	sp, #12
 80008fe:	af00      	add	r7, sp, #0
 8000900:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000902:	2301      	movs	r3, #1
}
 8000904:	4618      	mov	r0, r3
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	bc80      	pop	{r7}
 800090c:	4770      	bx	lr

0800090e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800090e:	b480      	push	{r7}
 8000910:	b085      	sub	sp, #20
 8000912:	af00      	add	r7, sp, #0
 8000914:	60f8      	str	r0, [r7, #12]
 8000916:	60b9      	str	r1, [r7, #8]
 8000918:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800091a:	2300      	movs	r3, #0
}
 800091c:	4618      	mov	r0, r3
 800091e:	3714      	adds	r7, #20
 8000920:	46bd      	mov	sp, r7
 8000922:	bc80      	pop	{r7}
 8000924:	4770      	bx	lr
	...

08000928 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b086      	sub	sp, #24
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000930:	4a14      	ldr	r2, [pc, #80]	; (8000984 <_sbrk+0x5c>)
 8000932:	4b15      	ldr	r3, [pc, #84]	; (8000988 <_sbrk+0x60>)
 8000934:	1ad3      	subs	r3, r2, r3
 8000936:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800093c:	4b13      	ldr	r3, [pc, #76]	; (800098c <_sbrk+0x64>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d102      	bne.n	800094a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000944:	4b11      	ldr	r3, [pc, #68]	; (800098c <_sbrk+0x64>)
 8000946:	4a12      	ldr	r2, [pc, #72]	; (8000990 <_sbrk+0x68>)
 8000948:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800094a:	4b10      	ldr	r3, [pc, #64]	; (800098c <_sbrk+0x64>)
 800094c:	681a      	ldr	r2, [r3, #0]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4413      	add	r3, r2
 8000952:	693a      	ldr	r2, [r7, #16]
 8000954:	429a      	cmp	r2, r3
 8000956:	d207      	bcs.n	8000968 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000958:	f005 fff6 	bl	8006948 <__errno>
 800095c:	4603      	mov	r3, r0
 800095e:	220c      	movs	r2, #12
 8000960:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000962:	f04f 33ff 	mov.w	r3, #4294967295
 8000966:	e009      	b.n	800097c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000968:	4b08      	ldr	r3, [pc, #32]	; (800098c <_sbrk+0x64>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800096e:	4b07      	ldr	r3, [pc, #28]	; (800098c <_sbrk+0x64>)
 8000970:	681a      	ldr	r2, [r3, #0]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4413      	add	r3, r2
 8000976:	4a05      	ldr	r2, [pc, #20]	; (800098c <_sbrk+0x64>)
 8000978:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800097a:	68fb      	ldr	r3, [r7, #12]
}
 800097c:	4618      	mov	r0, r3
 800097e:	3718      	adds	r7, #24
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20002800 	.word	0x20002800
 8000988:	00000400 	.word	0x00000400
 800098c:	200000f0 	.word	0x200000f0
 8000990:	20000248 	.word	0x20000248

08000994 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	bc80      	pop	{r7}
 800099e:	4770      	bx	lr

080009a0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim2_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08c      	sub	sp, #48	; 0x30
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
 80009b4:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b6:	f107 0314 	add.w	r3, r7, #20
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80009c0:	1d3b      	adds	r3, r7, #4
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009cc:	4b36      	ldr	r3, [pc, #216]	; (8000aa8 <MX_TIM1_Init+0x108>)
 80009ce:	4a37      	ldr	r2, [pc, #220]	; (8000aac <MX_TIM1_Init+0x10c>)
 80009d0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80009d2:	4b35      	ldr	r3, [pc, #212]	; (8000aa8 <MX_TIM1_Init+0x108>)
 80009d4:	2247      	movs	r2, #71	; 0x47
 80009d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d8:	4b33      	ldr	r3, [pc, #204]	; (8000aa8 <MX_TIM1_Init+0x108>)
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65000;
 80009de:	4b32      	ldr	r3, [pc, #200]	; (8000aa8 <MX_TIM1_Init+0x108>)
 80009e0:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 80009e4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009e6:	4b30      	ldr	r3, [pc, #192]	; (8000aa8 <MX_TIM1_Init+0x108>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009ec:	4b2e      	ldr	r3, [pc, #184]	; (8000aa8 <MX_TIM1_Init+0x108>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f2:	4b2d      	ldr	r3, [pc, #180]	; (8000aa8 <MX_TIM1_Init+0x108>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009f8:	482b      	ldr	r0, [pc, #172]	; (8000aa8 <MX_TIM1_Init+0x108>)
 80009fa:	f004 f93b 	bl	8004c74 <HAL_TIM_Base_Init>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8000a04:	f7ff fe81 	bl	800070a <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000a08:	4827      	ldr	r0, [pc, #156]	; (8000aa8 <MX_TIM1_Init+0x108>)
 8000a0a:	f004 fab9 	bl	8004f80 <HAL_TIM_IC_Init>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000a14:	f7ff fe79 	bl	800070a <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000a18:	2304      	movs	r3, #4
 8000a1a:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000a1c:	2350      	movs	r3, #80	; 0x50
 8000a1e:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000a20:	2300      	movs	r3, #0
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8000a24:	2300      	movs	r3, #0
 8000a26:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000a28:	f107 031c 	add.w	r3, r7, #28
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	481e      	ldr	r0, [pc, #120]	; (8000aa8 <MX_TIM1_Init+0x108>)
 8000a30:	f004 fd64 	bl	80054fc <HAL_TIM_SlaveConfigSynchro>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000a3a:	f7ff fe66 	bl	800070a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a46:	f107 0314 	add.w	r3, r7, #20
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4816      	ldr	r0, [pc, #88]	; (8000aa8 <MX_TIM1_Init+0x108>)
 8000a4e:	f005 f9df 	bl	8005e10 <HAL_TIMEx_MasterConfigSynchronization>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000a58:	f7ff fe57 	bl	800070a <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000a60:	2301      	movs	r3, #1
 8000a62:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000a64:	2300      	movs	r3, #0
 8000a66:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000a6c:	1d3b      	adds	r3, r7, #4
 8000a6e:	2200      	movs	r2, #0
 8000a70:	4619      	mov	r1, r3
 8000a72:	480d      	ldr	r0, [pc, #52]	; (8000aa8 <MX_TIM1_Init+0x108>)
 8000a74:	f004 fbe4 	bl	8005240 <HAL_TIM_IC_ConfigChannel>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_TIM1_Init+0xe2>
  {
    Error_Handler();
 8000a7e:	f7ff fe44 	bl	800070a <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000a82:	2302      	movs	r3, #2
 8000a84:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000a86:	2302      	movs	r3, #2
 8000a88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000a8a:	1d3b      	adds	r3, r7, #4
 8000a8c:	2204      	movs	r2, #4
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <MX_TIM1_Init+0x108>)
 8000a92:	f004 fbd5 	bl	8005240 <HAL_TIM_IC_ConfigChannel>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000a9c:	f7ff fe35 	bl	800070a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000aa0:	bf00      	nop
 8000aa2:	3730      	adds	r7, #48	; 0x30
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	200000f4 	.word	0x200000f4
 8000aac:	40012c00 	.word	0x40012c00

08000ab0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08a      	sub	sp, #40	; 0x28
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ab6:	f107 0320 	add.w	r3, r7, #32
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
 8000aca:	60da      	str	r2, [r3, #12]
 8000acc:	611a      	str	r2, [r3, #16]
 8000ace:	615a      	str	r2, [r3, #20]
 8000ad0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ad2:	4b22      	ldr	r3, [pc, #136]	; (8000b5c <MX_TIM2_Init+0xac>)
 8000ad4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ad8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 22-1;
 8000ada:	4b20      	ldr	r3, [pc, #128]	; (8000b5c <MX_TIM2_Init+0xac>)
 8000adc:	2215      	movs	r2, #21
 8000ade:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae0:	4b1e      	ldr	r3, [pc, #120]	; (8000b5c <MX_TIM2_Init+0xac>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65450;
 8000ae6:	4b1d      	ldr	r3, [pc, #116]	; (8000b5c <MX_TIM2_Init+0xac>)
 8000ae8:	f64f 72aa 	movw	r2, #65450	; 0xffaa
 8000aec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aee:	4b1b      	ldr	r3, [pc, #108]	; (8000b5c <MX_TIM2_Init+0xac>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af4:	4b19      	ldr	r3, [pc, #100]	; (8000b5c <MX_TIM2_Init+0xac>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000afa:	4818      	ldr	r0, [pc, #96]	; (8000b5c <MX_TIM2_Init+0xac>)
 8000afc:	f004 f909 	bl	8004d12 <HAL_TIM_PWM_Init>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000b06:	f7ff fe00 	bl	800070a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b12:	f107 0320 	add.w	r3, r7, #32
 8000b16:	4619      	mov	r1, r3
 8000b18:	4810      	ldr	r0, [pc, #64]	; (8000b5c <MX_TIM2_Init+0xac>)
 8000b1a:	f005 f979 	bl	8005e10 <HAL_TIMEx_MasterConfigSynchronization>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000b24:	f7ff fdf1 	bl	800070a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b28:	2360      	movs	r3, #96	; 0x60
 8000b2a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b30:	2300      	movs	r3, #0
 8000b32:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b38:	1d3b      	adds	r3, r7, #4
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4807      	ldr	r0, [pc, #28]	; (8000b5c <MX_TIM2_Init+0xac>)
 8000b40:	f004 fc1a 	bl	8005378 <HAL_TIM_PWM_ConfigChannel>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000b4a:	f7ff fdde 	bl	800070a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b4e:	4803      	ldr	r0, [pc, #12]	; (8000b5c <MX_TIM2_Init+0xac>)
 8000b50:	f000 f8ae 	bl	8000cb0 <HAL_TIM_MspPostInit>

}
 8000b54:	bf00      	nop
 8000b56:	3728      	adds	r7, #40	; 0x28
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	2000013c 	.word	0x2000013c

08000b60 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b088      	sub	sp, #32
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	f107 0310 	add.w	r3, r7, #16
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM1)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a26      	ldr	r2, [pc, #152]	; (8000c14 <HAL_TIM_Base_MspInit+0xb4>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d144      	bne.n	8000c0a <HAL_TIM_Base_MspInit+0xaa>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b80:	4b25      	ldr	r3, [pc, #148]	; (8000c18 <HAL_TIM_Base_MspInit+0xb8>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	4a24      	ldr	r2, [pc, #144]	; (8000c18 <HAL_TIM_Base_MspInit+0xb8>)
 8000b86:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b8a:	6193      	str	r3, [r2, #24]
 8000b8c:	4b22      	ldr	r3, [pc, #136]	; (8000c18 <HAL_TIM_Base_MspInit+0xb8>)
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b98:	4b1f      	ldr	r3, [pc, #124]	; (8000c18 <HAL_TIM_Base_MspInit+0xb8>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	4a1e      	ldr	r2, [pc, #120]	; (8000c18 <HAL_TIM_Base_MspInit+0xb8>)
 8000b9e:	f043 0304 	orr.w	r3, r3, #4
 8000ba2:	6193      	str	r3, [r2, #24]
 8000ba4:	4b1c      	ldr	r3, [pc, #112]	; (8000c18 <HAL_TIM_Base_MspInit+0xb8>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	f003 0304 	and.w	r3, r3, #4
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000bb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bb4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bbe:	f107 0310 	add.w	r3, r7, #16
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4815      	ldr	r0, [pc, #84]	; (8000c1c <HAL_TIM_Base_MspInit+0xbc>)
 8000bc6:	f000 fe7f 	bl	80018c8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2100      	movs	r1, #0
 8000bce:	2018      	movs	r0, #24
 8000bd0:	f000 fa9f 	bl	8001112 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8000bd4:	2018      	movs	r0, #24
 8000bd6:	f000 fab8 	bl	800114a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2100      	movs	r1, #0
 8000bde:	2019      	movs	r0, #25
 8000be0:	f000 fa97 	bl	8001112 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000be4:	2019      	movs	r0, #25
 8000be6:	f000 fab0 	bl	800114a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2100      	movs	r1, #0
 8000bee:	201a      	movs	r0, #26
 8000bf0:	f000 fa8f 	bl	8001112 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8000bf4:	201a      	movs	r0, #26
 8000bf6:	f000 faa8 	bl	800114a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	201b      	movs	r0, #27
 8000c00:	f000 fa87 	bl	8001112 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000c04:	201b      	movs	r0, #27
 8000c06:	f000 faa0 	bl	800114a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000c0a:	bf00      	nop
 8000c0c:	3720      	adds	r7, #32
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40012c00 	.word	0x40012c00
 8000c18:	40021000 	.word	0x40021000
 8000c1c:	40010800 	.word	0x40010800

08000c20 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c30:	d133      	bne.n	8000c9a <HAL_TIM_PWM_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c32:	4b1c      	ldr	r3, [pc, #112]	; (8000ca4 <HAL_TIM_PWM_MspInit+0x84>)
 8000c34:	69db      	ldr	r3, [r3, #28]
 8000c36:	4a1b      	ldr	r2, [pc, #108]	; (8000ca4 <HAL_TIM_PWM_MspInit+0x84>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	61d3      	str	r3, [r2, #28]
 8000c3e:	4b19      	ldr	r3, [pc, #100]	; (8000ca4 <HAL_TIM_PWM_MspInit+0x84>)
 8000c40:	69db      	ldr	r3, [r3, #28]
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8000c4a:	4b17      	ldr	r3, [pc, #92]	; (8000ca8 <HAL_TIM_PWM_MspInit+0x88>)
 8000c4c:	4a17      	ldr	r2, [pc, #92]	; (8000cac <HAL_TIM_PWM_MspInit+0x8c>)
 8000c4e:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c50:	4b15      	ldr	r3, [pc, #84]	; (8000ca8 <HAL_TIM_PWM_MspInit+0x88>)
 8000c52:	2210      	movs	r2, #16
 8000c54:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c56:	4b14      	ldr	r3, [pc, #80]	; (8000ca8 <HAL_TIM_PWM_MspInit+0x88>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c5c:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <HAL_TIM_PWM_MspInit+0x88>)
 8000c5e:	2280      	movs	r2, #128	; 0x80
 8000c60:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c62:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <HAL_TIM_PWM_MspInit+0x88>)
 8000c64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c68:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ca8 <HAL_TIM_PWM_MspInit+0x88>)
 8000c6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c70:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8000c72:	4b0d      	ldr	r3, [pc, #52]	; (8000ca8 <HAL_TIM_PWM_MspInit+0x88>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000c78:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <HAL_TIM_PWM_MspInit+0x88>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8000c7e:	480a      	ldr	r0, [pc, #40]	; (8000ca8 <HAL_TIM_PWM_MspInit+0x88>)
 8000c80:	f000 fa7e 	bl	8001180 <HAL_DMA_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <HAL_TIM_PWM_MspInit+0x6e>
    {
      Error_Handler();
 8000c8a:	f7ff fd3e 	bl	800070a <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4a05      	ldr	r2, [pc, #20]	; (8000ca8 <HAL_TIM_PWM_MspInit+0x88>)
 8000c92:	625a      	str	r2, [r3, #36]	; 0x24
 8000c94:	4a04      	ldr	r2, [pc, #16]	; (8000ca8 <HAL_TIM_PWM_MspInit+0x88>)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000c9a:	bf00      	nop
 8000c9c:	3710      	adds	r7, #16
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	20000184 	.word	0x20000184
 8000cac:	40020058 	.word	0x40020058

08000cb0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b088      	sub	sp, #32
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb8:	f107 0310 	add.w	r3, r7, #16
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cce:	d117      	bne.n	8000d00 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd0:	4b0d      	ldr	r3, [pc, #52]	; (8000d08 <HAL_TIM_MspPostInit+0x58>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	4a0c      	ldr	r2, [pc, #48]	; (8000d08 <HAL_TIM_MspPostInit+0x58>)
 8000cd6:	f043 0304 	orr.w	r3, r3, #4
 8000cda:	6193      	str	r3, [r2, #24]
 8000cdc:	4b0a      	ldr	r3, [pc, #40]	; (8000d08 <HAL_TIM_MspPostInit+0x58>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	f003 0304 	and.w	r3, r3, #4
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cec:	2302      	movs	r3, #2
 8000cee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf4:	f107 0310 	add.w	r3, r7, #16
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4804      	ldr	r0, [pc, #16]	; (8000d0c <HAL_TIM_MspPostInit+0x5c>)
 8000cfc:	f000 fde4 	bl	80018c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000d00:	bf00      	nop
 8000d02:	3720      	adds	r7, #32
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	40010800 	.word	0x40010800

08000d10 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d14:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <MX_USART1_UART_Init+0x4c>)
 8000d16:	4a12      	ldr	r2, [pc, #72]	; (8000d60 <MX_USART1_UART_Init+0x50>)
 8000d18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d1a:	4b10      	ldr	r3, [pc, #64]	; (8000d5c <MX_USART1_UART_Init+0x4c>)
 8000d1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d22:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <MX_USART1_UART_Init+0x4c>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d28:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <MX_USART1_UART_Init+0x4c>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d2e:	4b0b      	ldr	r3, [pc, #44]	; (8000d5c <MX_USART1_UART_Init+0x4c>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d34:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <MX_USART1_UART_Init+0x4c>)
 8000d36:	220c      	movs	r2, #12
 8000d38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d3a:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <MX_USART1_UART_Init+0x4c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <MX_USART1_UART_Init+0x4c>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d46:	4805      	ldr	r0, [pc, #20]	; (8000d5c <MX_USART1_UART_Init+0x4c>)
 8000d48:	f005 f8cc 	bl	8005ee4 <HAL_UART_Init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d52:	f7ff fcda 	bl	800070a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	200001c8 	.word	0x200001c8
 8000d60:	40013800 	.word	0x40013800

08000d64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b088      	sub	sp, #32
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	f107 0310 	add.w	r3, r7, #16
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a20      	ldr	r2, [pc, #128]	; (8000e00 <HAL_UART_MspInit+0x9c>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d139      	bne.n	8000df8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d84:	4b1f      	ldr	r3, [pc, #124]	; (8000e04 <HAL_UART_MspInit+0xa0>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	4a1e      	ldr	r2, [pc, #120]	; (8000e04 <HAL_UART_MspInit+0xa0>)
 8000d8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d8e:	6193      	str	r3, [r2, #24]
 8000d90:	4b1c      	ldr	r3, [pc, #112]	; (8000e04 <HAL_UART_MspInit+0xa0>)
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9c:	4b19      	ldr	r3, [pc, #100]	; (8000e04 <HAL_UART_MspInit+0xa0>)
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	4a18      	ldr	r2, [pc, #96]	; (8000e04 <HAL_UART_MspInit+0xa0>)
 8000da2:	f043 0304 	orr.w	r3, r3, #4
 8000da6:	6193      	str	r3, [r2, #24]
 8000da8:	4b16      	ldr	r3, [pc, #88]	; (8000e04 <HAL_UART_MspInit+0xa0>)
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	f003 0304 	and.w	r3, r3, #4
 8000db0:	60bb      	str	r3, [r7, #8]
 8000db2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000db4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000db8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc2:	f107 0310 	add.w	r3, r7, #16
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	480f      	ldr	r0, [pc, #60]	; (8000e08 <HAL_UART_MspInit+0xa4>)
 8000dca:	f000 fd7d 	bl	80018c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000dce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ddc:	f107 0310 	add.w	r3, r7, #16
 8000de0:	4619      	mov	r1, r3
 8000de2:	4809      	ldr	r0, [pc, #36]	; (8000e08 <HAL_UART_MspInit+0xa4>)
 8000de4:	f000 fd70 	bl	80018c8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000de8:	2200      	movs	r2, #0
 8000dea:	2100      	movs	r1, #0
 8000dec:	2025      	movs	r0, #37	; 0x25
 8000dee:	f000 f990 	bl	8001112 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000df2:	2025      	movs	r0, #37	; 0x25
 8000df4:	f000 f9a9 	bl	800114a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000df8:	bf00      	nop
 8000dfa:	3720      	adds	r7, #32
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40013800 	.word	0x40013800
 8000e04:	40021000 	.word	0x40021000
 8000e08:	40010800 	.word	0x40010800

08000e0c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e0c:	f7ff fdc2 	bl	8000994 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e10:	480b      	ldr	r0, [pc, #44]	; (8000e40 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e12:	490c      	ldr	r1, [pc, #48]	; (8000e44 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e14:	4a0c      	ldr	r2, [pc, #48]	; (8000e48 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e18:	e002      	b.n	8000e20 <LoopCopyDataInit>

08000e1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e1e:	3304      	adds	r3, #4

08000e20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e24:	d3f9      	bcc.n	8000e1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e26:	4a09      	ldr	r2, [pc, #36]	; (8000e4c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e28:	4c09      	ldr	r4, [pc, #36]	; (8000e50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e2c:	e001      	b.n	8000e32 <LoopFillZerobss>

08000e2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e30:	3204      	adds	r2, #4

08000e32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e34:	d3fb      	bcc.n	8000e2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e36:	f005 fd8d 	bl	8006954 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e3a:	f7ff fb49 	bl	80004d0 <main>
  bx lr
 8000e3e:	4770      	bx	lr
  ldr r0, =_sdata
 8000e40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e44:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e48:	08007464 	.word	0x08007464
  ldr r2, =_sbss
 8000e4c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e50:	20000248 	.word	0x20000248

08000e54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e54:	e7fe      	b.n	8000e54 <ADC1_2_IRQHandler>
	...

08000e58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e5c:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <HAL_Init+0x28>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a07      	ldr	r2, [pc, #28]	; (8000e80 <HAL_Init+0x28>)
 8000e62:	f043 0310 	orr.w	r3, r3, #16
 8000e66:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e68:	2003      	movs	r0, #3
 8000e6a:	f000 f947 	bl	80010fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e6e:	200f      	movs	r0, #15
 8000e70:	f000 f808 	bl	8000e84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e74:	f7ff fc4e 	bl	8000714 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40022000 	.word	0x40022000

08000e84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e8c:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <HAL_InitTick+0x54>)
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	4b12      	ldr	r3, [pc, #72]	; (8000edc <HAL_InitTick+0x58>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	4619      	mov	r1, r3
 8000e96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f000 f95f 	bl	8001166 <HAL_SYSTICK_Config>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e00e      	b.n	8000ed0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2b0f      	cmp	r3, #15
 8000eb6:	d80a      	bhi.n	8000ece <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	6879      	ldr	r1, [r7, #4]
 8000ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec0:	f000 f927 	bl	8001112 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ec4:	4a06      	ldr	r2, [pc, #24]	; (8000ee0 <HAL_InitTick+0x5c>)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	e000      	b.n	8000ed0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20000000 	.word	0x20000000
 8000edc:	20000008 	.word	0x20000008
 8000ee0:	20000004 	.word	0x20000004

08000ee4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ee8:	4b05      	ldr	r3, [pc, #20]	; (8000f00 <HAL_IncTick+0x1c>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	461a      	mov	r2, r3
 8000eee:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <HAL_IncTick+0x20>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	4a03      	ldr	r2, [pc, #12]	; (8000f04 <HAL_IncTick+0x20>)
 8000ef6:	6013      	str	r3, [r2, #0]
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc80      	pop	{r7}
 8000efe:	4770      	bx	lr
 8000f00:	20000008 	.word	0x20000008
 8000f04:	20000210 	.word	0x20000210

08000f08 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f0c:	4b02      	ldr	r3, [pc, #8]	; (8000f18 <HAL_GetTick+0x10>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bc80      	pop	{r7}
 8000f16:	4770      	bx	lr
 8000f18:	20000210 	.word	0x20000210

08000f1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f24:	f7ff fff0 	bl	8000f08 <HAL_GetTick>
 8000f28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f34:	d005      	beq.n	8000f42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f36:	4b0a      	ldr	r3, [pc, #40]	; (8000f60 <HAL_Delay+0x44>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	4413      	add	r3, r2
 8000f40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f42:	bf00      	nop
 8000f44:	f7ff ffe0 	bl	8000f08 <HAL_GetTick>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	68fa      	ldr	r2, [r7, #12]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d8f7      	bhi.n	8000f44 <HAL_Delay+0x28>
  {
  }
}
 8000f54:	bf00      	nop
 8000f56:	bf00      	nop
 8000f58:	3710      	adds	r7, #16
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20000008 	.word	0x20000008

08000f64 <__NVIC_SetPriorityGrouping>:
{
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f74:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f7a:	68ba      	ldr	r2, [r7, #8]
 8000f7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f80:	4013      	ands	r3, r2
 8000f82:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f96:	4a04      	ldr	r2, [pc, #16]	; (8000fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	60d3      	str	r3, [r2, #12]
}
 8000f9c:	bf00      	nop
 8000f9e:	3714      	adds	r7, #20
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bc80      	pop	{r7}
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <__NVIC_GetPriorityGrouping>:
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fb0:	4b04      	ldr	r3, [pc, #16]	; (8000fc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	0a1b      	lsrs	r3, r3, #8
 8000fb6:	f003 0307 	and.w	r3, r3, #7
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bc80      	pop	{r7}
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <__NVIC_EnableIRQ>:
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	db0b      	blt.n	8000ff2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	f003 021f 	and.w	r2, r3, #31
 8000fe0:	4906      	ldr	r1, [pc, #24]	; (8000ffc <__NVIC_EnableIRQ+0x34>)
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	095b      	lsrs	r3, r3, #5
 8000fe8:	2001      	movs	r0, #1
 8000fea:	fa00 f202 	lsl.w	r2, r0, r2
 8000fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000ff2:	bf00      	nop
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bc80      	pop	{r7}
 8000ffa:	4770      	bx	lr
 8000ffc:	e000e100 	.word	0xe000e100

08001000 <__NVIC_SetPriority>:
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	6039      	str	r1, [r7, #0]
 800100a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800100c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001010:	2b00      	cmp	r3, #0
 8001012:	db0a      	blt.n	800102a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	b2da      	uxtb	r2, r3
 8001018:	490c      	ldr	r1, [pc, #48]	; (800104c <__NVIC_SetPriority+0x4c>)
 800101a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101e:	0112      	lsls	r2, r2, #4
 8001020:	b2d2      	uxtb	r2, r2
 8001022:	440b      	add	r3, r1
 8001024:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001028:	e00a      	b.n	8001040 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	b2da      	uxtb	r2, r3
 800102e:	4908      	ldr	r1, [pc, #32]	; (8001050 <__NVIC_SetPriority+0x50>)
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	f003 030f 	and.w	r3, r3, #15
 8001036:	3b04      	subs	r3, #4
 8001038:	0112      	lsls	r2, r2, #4
 800103a:	b2d2      	uxtb	r2, r2
 800103c:	440b      	add	r3, r1
 800103e:	761a      	strb	r2, [r3, #24]
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	bc80      	pop	{r7}
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	e000e100 	.word	0xe000e100
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <NVIC_EncodePriority>:
{
 8001054:	b480      	push	{r7}
 8001056:	b089      	sub	sp, #36	; 0x24
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	f1c3 0307 	rsb	r3, r3, #7
 800106e:	2b04      	cmp	r3, #4
 8001070:	bf28      	it	cs
 8001072:	2304      	movcs	r3, #4
 8001074:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3304      	adds	r3, #4
 800107a:	2b06      	cmp	r3, #6
 800107c:	d902      	bls.n	8001084 <NVIC_EncodePriority+0x30>
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3b03      	subs	r3, #3
 8001082:	e000      	b.n	8001086 <NVIC_EncodePriority+0x32>
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001088:	f04f 32ff 	mov.w	r2, #4294967295
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43da      	mvns	r2, r3
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	401a      	ands	r2, r3
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800109c:	f04f 31ff 	mov.w	r1, #4294967295
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	fa01 f303 	lsl.w	r3, r1, r3
 80010a6:	43d9      	mvns	r1, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ac:	4313      	orrs	r3, r2
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3724      	adds	r7, #36	; 0x24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc80      	pop	{r7}
 80010b6:	4770      	bx	lr

080010b8 <SysTick_Config>:
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3b01      	subs	r3, #1
 80010c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010c8:	d301      	bcc.n	80010ce <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80010ca:	2301      	movs	r3, #1
 80010cc:	e00f      	b.n	80010ee <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ce:	4a0a      	ldr	r2, [pc, #40]	; (80010f8 <SysTick_Config+0x40>)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3b01      	subs	r3, #1
 80010d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010d6:	210f      	movs	r1, #15
 80010d8:	f04f 30ff 	mov.w	r0, #4294967295
 80010dc:	f7ff ff90 	bl	8001000 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e0:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <SysTick_Config+0x40>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010e6:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <SysTick_Config+0x40>)
 80010e8:	2207      	movs	r2, #7
 80010ea:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	e000e010 	.word	0xe000e010

080010fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f7ff ff2d 	bl	8000f64 <__NVIC_SetPriorityGrouping>
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001112:	b580      	push	{r7, lr}
 8001114:	b086      	sub	sp, #24
 8001116:	af00      	add	r7, sp, #0
 8001118:	4603      	mov	r3, r0
 800111a:	60b9      	str	r1, [r7, #8]
 800111c:	607a      	str	r2, [r7, #4]
 800111e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001124:	f7ff ff42 	bl	8000fac <__NVIC_GetPriorityGrouping>
 8001128:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	68b9      	ldr	r1, [r7, #8]
 800112e:	6978      	ldr	r0, [r7, #20]
 8001130:	f7ff ff90 	bl	8001054 <NVIC_EncodePriority>
 8001134:	4602      	mov	r2, r0
 8001136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800113a:	4611      	mov	r1, r2
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ff5f 	bl	8001000 <__NVIC_SetPriority>
}
 8001142:	bf00      	nop
 8001144:	3718      	adds	r7, #24
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	4603      	mov	r3, r0
 8001152:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff ff35 	bl	8000fc8 <__NVIC_EnableIRQ>
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b082      	sub	sp, #8
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff ffa2 	bl	80010b8 <SysTick_Config>
 8001174:	4603      	mov	r3, r0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001188:	2300      	movs	r3, #0
 800118a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d101      	bne.n	8001196 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e043      	b.n	800121e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	461a      	mov	r2, r3
 800119c:	4b22      	ldr	r3, [pc, #136]	; (8001228 <HAL_DMA_Init+0xa8>)
 800119e:	4413      	add	r3, r2
 80011a0:	4a22      	ldr	r2, [pc, #136]	; (800122c <HAL_DMA_Init+0xac>)
 80011a2:	fba2 2303 	umull	r2, r3, r2, r3
 80011a6:	091b      	lsrs	r3, r3, #4
 80011a8:	009a      	lsls	r2, r3, #2
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a1f      	ldr	r2, [pc, #124]	; (8001230 <HAL_DMA_Init+0xb0>)
 80011b2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2202      	movs	r2, #2
 80011b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80011ca:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80011ce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80011d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	695b      	ldr	r3, [r3, #20]
 80011ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	69db      	ldr	r3, [r3, #28]
 80011f6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80011f8:	68fa      	ldr	r2, [r7, #12]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	68fa      	ldr	r2, [r7, #12]
 8001204:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2201      	movs	r2, #1
 8001210:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2200      	movs	r2, #0
 8001218:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	3714      	adds	r7, #20
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr
 8001228:	bffdfff8 	.word	0xbffdfff8
 800122c:	cccccccd 	.word	0xcccccccd
 8001230:	40020000 	.word	0x40020000

08001234 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800123c:	2300      	movs	r3, #0
 800123e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001246:	b2db      	uxtb	r3, r3
 8001248:	2b02      	cmp	r3, #2
 800124a:	d008      	beq.n	800125e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2204      	movs	r2, #4
 8001250:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2200      	movs	r2, #0
 8001256:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e020      	b.n	80012a0 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f022 020e 	bic.w	r2, r2, #14
 800126c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f022 0201 	bic.w	r2, r2, #1
 800127c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001286:	2101      	movs	r1, #1
 8001288:	fa01 f202 	lsl.w	r2, r1, r2
 800128c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2201      	movs	r2, #1
 8001292:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2200      	movs	r2, #0
 800129a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800129e:	7bfb      	ldrb	r3, [r7, #15]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3714      	adds	r7, #20
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bc80      	pop	{r7}
 80012a8:	4770      	bx	lr
	...

080012ac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012b4:	2300      	movs	r3, #0
 80012b6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d005      	beq.n	80012d0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2204      	movs	r2, #4
 80012c8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	73fb      	strb	r3, [r7, #15]
 80012ce:	e051      	b.n	8001374 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f022 020e 	bic.w	r2, r2, #14
 80012de:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f022 0201 	bic.w	r2, r2, #1
 80012ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a22      	ldr	r2, [pc, #136]	; (8001380 <HAL_DMA_Abort_IT+0xd4>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d029      	beq.n	800134e <HAL_DMA_Abort_IT+0xa2>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a21      	ldr	r2, [pc, #132]	; (8001384 <HAL_DMA_Abort_IT+0xd8>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d022      	beq.n	800134a <HAL_DMA_Abort_IT+0x9e>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a1f      	ldr	r2, [pc, #124]	; (8001388 <HAL_DMA_Abort_IT+0xdc>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d01a      	beq.n	8001344 <HAL_DMA_Abort_IT+0x98>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a1e      	ldr	r2, [pc, #120]	; (800138c <HAL_DMA_Abort_IT+0xe0>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d012      	beq.n	800133e <HAL_DMA_Abort_IT+0x92>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a1c      	ldr	r2, [pc, #112]	; (8001390 <HAL_DMA_Abort_IT+0xe4>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d00a      	beq.n	8001338 <HAL_DMA_Abort_IT+0x8c>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a1b      	ldr	r2, [pc, #108]	; (8001394 <HAL_DMA_Abort_IT+0xe8>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d102      	bne.n	8001332 <HAL_DMA_Abort_IT+0x86>
 800132c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001330:	e00e      	b.n	8001350 <HAL_DMA_Abort_IT+0xa4>
 8001332:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001336:	e00b      	b.n	8001350 <HAL_DMA_Abort_IT+0xa4>
 8001338:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800133c:	e008      	b.n	8001350 <HAL_DMA_Abort_IT+0xa4>
 800133e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001342:	e005      	b.n	8001350 <HAL_DMA_Abort_IT+0xa4>
 8001344:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001348:	e002      	b.n	8001350 <HAL_DMA_Abort_IT+0xa4>
 800134a:	2310      	movs	r3, #16
 800134c:	e000      	b.n	8001350 <HAL_DMA_Abort_IT+0xa4>
 800134e:	2301      	movs	r3, #1
 8001350:	4a11      	ldr	r2, [pc, #68]	; (8001398 <HAL_DMA_Abort_IT+0xec>)
 8001352:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2201      	movs	r2, #1
 8001358:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001368:	2b00      	cmp	r3, #0
 800136a:	d003      	beq.n	8001374 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	4798      	blx	r3
    } 
  }
  return status;
 8001374:	7bfb      	ldrb	r3, [r7, #15]
}
 8001376:	4618      	mov	r0, r3
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40020008 	.word	0x40020008
 8001384:	4002001c 	.word	0x4002001c
 8001388:	40020030 	.word	0x40020030
 800138c:	40020044 	.word	0x40020044
 8001390:	40020058 	.word	0x40020058
 8001394:	4002006c 	.word	0x4002006c
 8001398:	40020000 	.word	0x40020000

0800139c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b8:	2204      	movs	r2, #4
 80013ba:	409a      	lsls	r2, r3
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	4013      	ands	r3, r2
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d04f      	beq.n	8001464 <HAL_DMA_IRQHandler+0xc8>
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	f003 0304 	and.w	r3, r3, #4
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d04a      	beq.n	8001464 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 0320 	and.w	r3, r3, #32
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d107      	bne.n	80013ec <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f022 0204 	bic.w	r2, r2, #4
 80013ea:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a66      	ldr	r2, [pc, #408]	; (800158c <HAL_DMA_IRQHandler+0x1f0>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d029      	beq.n	800144a <HAL_DMA_IRQHandler+0xae>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a65      	ldr	r2, [pc, #404]	; (8001590 <HAL_DMA_IRQHandler+0x1f4>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d022      	beq.n	8001446 <HAL_DMA_IRQHandler+0xaa>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a63      	ldr	r2, [pc, #396]	; (8001594 <HAL_DMA_IRQHandler+0x1f8>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d01a      	beq.n	8001440 <HAL_DMA_IRQHandler+0xa4>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a62      	ldr	r2, [pc, #392]	; (8001598 <HAL_DMA_IRQHandler+0x1fc>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d012      	beq.n	800143a <HAL_DMA_IRQHandler+0x9e>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a60      	ldr	r2, [pc, #384]	; (800159c <HAL_DMA_IRQHandler+0x200>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d00a      	beq.n	8001434 <HAL_DMA_IRQHandler+0x98>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a5f      	ldr	r2, [pc, #380]	; (80015a0 <HAL_DMA_IRQHandler+0x204>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d102      	bne.n	800142e <HAL_DMA_IRQHandler+0x92>
 8001428:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800142c:	e00e      	b.n	800144c <HAL_DMA_IRQHandler+0xb0>
 800142e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001432:	e00b      	b.n	800144c <HAL_DMA_IRQHandler+0xb0>
 8001434:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001438:	e008      	b.n	800144c <HAL_DMA_IRQHandler+0xb0>
 800143a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800143e:	e005      	b.n	800144c <HAL_DMA_IRQHandler+0xb0>
 8001440:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001444:	e002      	b.n	800144c <HAL_DMA_IRQHandler+0xb0>
 8001446:	2340      	movs	r3, #64	; 0x40
 8001448:	e000      	b.n	800144c <HAL_DMA_IRQHandler+0xb0>
 800144a:	2304      	movs	r3, #4
 800144c:	4a55      	ldr	r2, [pc, #340]	; (80015a4 <HAL_DMA_IRQHandler+0x208>)
 800144e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001454:	2b00      	cmp	r3, #0
 8001456:	f000 8094 	beq.w	8001582 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001462:	e08e      	b.n	8001582 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001468:	2202      	movs	r2, #2
 800146a:	409a      	lsls	r2, r3
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	4013      	ands	r3, r2
 8001470:	2b00      	cmp	r3, #0
 8001472:	d056      	beq.n	8001522 <HAL_DMA_IRQHandler+0x186>
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d051      	beq.n	8001522 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0320 	and.w	r3, r3, #32
 8001488:	2b00      	cmp	r3, #0
 800148a:	d10b      	bne.n	80014a4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f022 020a 	bic.w	r2, r2, #10
 800149a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2201      	movs	r2, #1
 80014a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a38      	ldr	r2, [pc, #224]	; (800158c <HAL_DMA_IRQHandler+0x1f0>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d029      	beq.n	8001502 <HAL_DMA_IRQHandler+0x166>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a37      	ldr	r2, [pc, #220]	; (8001590 <HAL_DMA_IRQHandler+0x1f4>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d022      	beq.n	80014fe <HAL_DMA_IRQHandler+0x162>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a35      	ldr	r2, [pc, #212]	; (8001594 <HAL_DMA_IRQHandler+0x1f8>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d01a      	beq.n	80014f8 <HAL_DMA_IRQHandler+0x15c>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a34      	ldr	r2, [pc, #208]	; (8001598 <HAL_DMA_IRQHandler+0x1fc>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d012      	beq.n	80014f2 <HAL_DMA_IRQHandler+0x156>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a32      	ldr	r2, [pc, #200]	; (800159c <HAL_DMA_IRQHandler+0x200>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d00a      	beq.n	80014ec <HAL_DMA_IRQHandler+0x150>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a31      	ldr	r2, [pc, #196]	; (80015a0 <HAL_DMA_IRQHandler+0x204>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d102      	bne.n	80014e6 <HAL_DMA_IRQHandler+0x14a>
 80014e0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80014e4:	e00e      	b.n	8001504 <HAL_DMA_IRQHandler+0x168>
 80014e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014ea:	e00b      	b.n	8001504 <HAL_DMA_IRQHandler+0x168>
 80014ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014f0:	e008      	b.n	8001504 <HAL_DMA_IRQHandler+0x168>
 80014f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014f6:	e005      	b.n	8001504 <HAL_DMA_IRQHandler+0x168>
 80014f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014fc:	e002      	b.n	8001504 <HAL_DMA_IRQHandler+0x168>
 80014fe:	2320      	movs	r3, #32
 8001500:	e000      	b.n	8001504 <HAL_DMA_IRQHandler+0x168>
 8001502:	2302      	movs	r3, #2
 8001504:	4a27      	ldr	r2, [pc, #156]	; (80015a4 <HAL_DMA_IRQHandler+0x208>)
 8001506:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001514:	2b00      	cmp	r3, #0
 8001516:	d034      	beq.n	8001582 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001520:	e02f      	b.n	8001582 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	2208      	movs	r2, #8
 8001528:	409a      	lsls	r2, r3
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	4013      	ands	r3, r2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d028      	beq.n	8001584 <HAL_DMA_IRQHandler+0x1e8>
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	f003 0308 	and.w	r3, r3, #8
 8001538:	2b00      	cmp	r3, #0
 800153a:	d023      	beq.n	8001584 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f022 020e 	bic.w	r2, r2, #14
 800154a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001554:	2101      	movs	r1, #1
 8001556:	fa01 f202 	lsl.w	r2, r1, r2
 800155a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2201      	movs	r2, #1
 8001560:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2201      	movs	r2, #1
 8001566:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2200      	movs	r2, #0
 800156e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	2b00      	cmp	r3, #0
 8001578:	d004      	beq.n	8001584 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	4798      	blx	r3
    }
  }
  return;
 8001582:	bf00      	nop
 8001584:	bf00      	nop
}
 8001586:	3710      	adds	r7, #16
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40020008 	.word	0x40020008
 8001590:	4002001c 	.word	0x4002001c
 8001594:	40020030 	.word	0x40020030
 8001598:	40020044 	.word	0x40020044
 800159c:	40020058 	.word	0x40020058
 80015a0:	4002006c 	.word	0x4002006c
 80015a4:	40020000 	.word	0x40020000

080015a8 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015b6:	b2db      	uxtb	r3, r3
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	bc80      	pop	{r7}
 80015c0:	4770      	bx	lr
	...

080015c4 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 80015ca:	2300      	movs	r3, #0
 80015cc:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK1) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK1) || \
    (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2)))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80015ce:	4b6d      	ldr	r3, [pc, #436]	; (8001784 <HAL_FLASH_IRQHandler+0x1c0>)
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	f003 0310 	and.w	r3, r3, #16
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d105      	bne.n	80015e6 <HAL_FLASH_IRQHandler+0x22>
 80015da:	4b6a      	ldr	r3, [pc, #424]	; (8001784 <HAL_FLASH_IRQHandler+0x1c0>)
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	f003 0304 	and.w	r3, r3, #4
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d00e      	beq.n	8001604 <HAL_FLASH_IRQHandler+0x40>
#endif /* FLASH_BANK2_END */
  {
    /* Return the faulty address */
    addresstmp = pFlash.Address;
 80015e6:	4b68      	ldr	r3, [pc, #416]	; (8001788 <HAL_FLASH_IRQHandler+0x1c4>)
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	607b      	str	r3, [r7, #4]
    /* Reset address */
    pFlash.Address = 0xFFFFFFFFU;
 80015ec:	4b66      	ldr	r3, [pc, #408]	; (8001788 <HAL_FLASH_IRQHandler+0x1c4>)
 80015ee:	f04f 32ff 	mov.w	r2, #4294967295
 80015f2:	609a      	str	r2, [r3, #8]
  
    /* Save the Error code */
    FLASH_SetErrorCode();
 80015f4:	f000 f8f8 	bl	80017e8 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f000 f8d0 	bl	800179e <HAL_FLASH_OperationErrorCallback>

    /* Stop the procedure ongoing */
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80015fe:	4b62      	ldr	r3, [pc, #392]	; (8001788 <HAL_FLASH_IRQHandler+0x1c4>)
 8001600:	2200      	movs	r2, #0
 8001602:	701a      	strb	r2, [r3, #0]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP_BANK1))
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP_BANK1);
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001604:	4b5f      	ldr	r3, [pc, #380]	; (8001784 <HAL_FLASH_IRQHandler+0x1c0>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	f003 0320 	and.w	r3, r3, #32
 800160c:	2b00      	cmp	r3, #0
 800160e:	f000 80a0 	beq.w	8001752 <HAL_FLASH_IRQHandler+0x18e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001612:	4b5c      	ldr	r3, [pc, #368]	; (8001784 <HAL_FLASH_IRQHandler+0x1c0>)
 8001614:	2220      	movs	r2, #32
 8001616:	60da      	str	r2, [r3, #12]
#endif /* FLASH_BANK2_END */
    
    /* Process can continue only if no error detected */
    if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 8001618:	4b5b      	ldr	r3, [pc, #364]	; (8001788 <HAL_FLASH_IRQHandler+0x1c4>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	b2db      	uxtb	r3, r3
 800161e:	2b00      	cmp	r3, #0
 8001620:	f000 8097 	beq.w	8001752 <HAL_FLASH_IRQHandler+0x18e>
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 8001624:	4b58      	ldr	r3, [pc, #352]	; (8001788 <HAL_FLASH_IRQHandler+0x1c4>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	b2db      	uxtb	r3, r3
 800162a:	2b01      	cmp	r3, #1
 800162c:	d12d      	bne.n	800168a <HAL_FLASH_IRQHandler+0xc6>
      {
        /* Nb of pages to erased can be decreased */
        pFlash.DataRemaining--;
 800162e:	4b56      	ldr	r3, [pc, #344]	; (8001788 <HAL_FLASH_IRQHandler+0x1c4>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	3b01      	subs	r3, #1
 8001634:	4a54      	ldr	r2, [pc, #336]	; (8001788 <HAL_FLASH_IRQHandler+0x1c4>)
 8001636:	6053      	str	r3, [r2, #4]

        /* Check if there are still pages to erase */
        if(pFlash.DataRemaining != 0U)
 8001638:	4b53      	ldr	r3, [pc, #332]	; (8001788 <HAL_FLASH_IRQHandler+0x1c4>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d017      	beq.n	8001670 <HAL_FLASH_IRQHandler+0xac>
        {
          addresstmp = pFlash.Address;
 8001640:	4b51      	ldr	r3, [pc, #324]	; (8001788 <HAL_FLASH_IRQHandler+0x1c4>)
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	607b      	str	r3, [r7, #4]
          /*Indicate user which sector has been erased */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f000 f8a0 	bl	800178c <HAL_FLASH_EndOfOperationCallback>

          /*Increment sector number*/
          addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
 800164c:	4b4e      	ldr	r3, [pc, #312]	; (8001788 <HAL_FLASH_IRQHandler+0x1c4>)
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001654:	607b      	str	r3, [r7, #4]
          pFlash.Address = addresstmp;
 8001656:	4a4c      	ldr	r2, [pc, #304]	; (8001788 <HAL_FLASH_IRQHandler+0x1c4>)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6093      	str	r3, [r2, #8]

          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800165c:	4b49      	ldr	r3, [pc, #292]	; (8001784 <HAL_FLASH_IRQHandler+0x1c0>)
 800165e:	691b      	ldr	r3, [r3, #16]
 8001660:	4a48      	ldr	r2, [pc, #288]	; (8001784 <HAL_FLASH_IRQHandler+0x1c0>)
 8001662:	f023 0302 	bic.w	r3, r3, #2
 8001666:	6113      	str	r3, [r2, #16]

          FLASH_PageErase(addresstmp);
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f000 f90d 	bl	8001888 <FLASH_PageErase>
 800166e:	e070      	b.n	8001752 <HAL_FLASH_IRQHandler+0x18e>
        }
        else
        {
          /* No more pages to Erase, user callback can be called. */
          /* Reset Sector and stop Erase pages procedure */
          pFlash.Address = addresstmp = 0xFFFFFFFFU;
 8001670:	f04f 33ff 	mov.w	r3, #4294967295
 8001674:	607b      	str	r3, [r7, #4]
 8001676:	4a44      	ldr	r2, [pc, #272]	; (8001788 <HAL_FLASH_IRQHandler+0x1c4>)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6093      	str	r3, [r2, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800167c:	4b42      	ldr	r3, [pc, #264]	; (8001788 <HAL_FLASH_IRQHandler+0x1c4>)
 800167e:	2200      	movs	r2, #0
 8001680:	701a      	strb	r2, [r3, #0]
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f000 f882 	bl	800178c <HAL_FLASH_EndOfOperationCallback>
 8001688:	e063      	b.n	8001752 <HAL_FLASH_IRQHandler+0x18e>
        }
      }
      else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 800168a:	4b3f      	ldr	r3, [pc, #252]	; (8001788 <HAL_FLASH_IRQHandler+0x1c4>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	b2db      	uxtb	r3, r3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d10c      	bne.n	80016ae <HAL_FLASH_IRQHandler+0xea>
      {
        /* Operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001694:	4b3b      	ldr	r3, [pc, #236]	; (8001784 <HAL_FLASH_IRQHandler+0x1c0>)
 8001696:	691b      	ldr	r3, [r3, #16]
 8001698:	4a3a      	ldr	r2, [pc, #232]	; (8001784 <HAL_FLASH_IRQHandler+0x1c0>)
 800169a:	f023 0304 	bic.w	r3, r3, #4
 800169e:	6113      	str	r3, [r2, #16]
        if (HAL_IS_BIT_CLR(FLASH->CR2, FLASH_CR2_MER))
        {
#endif /* FLASH_BANK2_END */
          /* MassErase ended. Return the selected bank */
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(0U);
 80016a0:	2000      	movs	r0, #0
 80016a2:	f000 f873 	bl	800178c <HAL_FLASH_EndOfOperationCallback>

          /* Stop Mass Erase procedure*/
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80016a6:	4b38      	ldr	r3, [pc, #224]	; (8001788 <HAL_FLASH_IRQHandler+0x1c4>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	701a      	strb	r2, [r3, #0]
 80016ac:	e051      	b.n	8001752 <HAL_FLASH_IRQHandler+0x18e>
      }
#endif /* FLASH_BANK2_END */
      else
      {
        /* Nb of 16-bit data to program can be decreased */
        pFlash.DataRemaining--;
 80016ae:	4b36      	ldr	r3, [pc, #216]	; (8001788 <HAL_FLASH_IRQHandler+0x1c4>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	3b01      	subs	r3, #1
 80016b4:	4a34      	ldr	r2, [pc, #208]	; (8001788 <HAL_FLASH_IRQHandler+0x1c4>)
 80016b6:	6053      	str	r3, [r2, #4]
        
        /* Check if there are still 16-bit data to program */
        if(pFlash.DataRemaining != 0U)
 80016b8:	4b33      	ldr	r3, [pc, #204]	; (8001788 <HAL_FLASH_IRQHandler+0x1c4>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d024      	beq.n	800170a <HAL_FLASH_IRQHandler+0x146>
        {
          /* Increment address to 16-bit */
          pFlash.Address += 2U;
 80016c0:	4b31      	ldr	r3, [pc, #196]	; (8001788 <HAL_FLASH_IRQHandler+0x1c4>)
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	3302      	adds	r3, #2
 80016c6:	4a30      	ldr	r2, [pc, #192]	; (8001788 <HAL_FLASH_IRQHandler+0x1c4>)
 80016c8:	6093      	str	r3, [r2, #8]
          addresstmp = pFlash.Address;
 80016ca:	4b2f      	ldr	r3, [pc, #188]	; (8001788 <HAL_FLASH_IRQHandler+0x1c4>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	607b      	str	r3, [r7, #4]
          
          /* Shift to have next 16-bit data */
          pFlash.Data = (pFlash.Data >> 16U);
 80016d0:	4b2d      	ldr	r3, [pc, #180]	; (8001788 <HAL_FLASH_IRQHandler+0x1c4>)
 80016d2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80016d6:	f04f 0200 	mov.w	r2, #0
 80016da:	f04f 0300 	mov.w	r3, #0
 80016de:	0c02      	lsrs	r2, r0, #16
 80016e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80016e4:	0c0b      	lsrs	r3, r1, #16
 80016e6:	4928      	ldr	r1, [pc, #160]	; (8001788 <HAL_FLASH_IRQHandler+0x1c4>)
 80016e8:	e9c1 2304 	strd	r2, r3, [r1, #16]
          
          /* Operation is completed, disable the PG Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80016ec:	4b25      	ldr	r3, [pc, #148]	; (8001784 <HAL_FLASH_IRQHandler+0x1c0>)
 80016ee:	691b      	ldr	r3, [r3, #16]
 80016f0:	4a24      	ldr	r2, [pc, #144]	; (8001784 <HAL_FLASH_IRQHandler+0x1c0>)
 80016f2:	f023 0301 	bic.w	r3, r3, #1
 80016f6:	6113      	str	r3, [r2, #16]

          /*Program halfword (16-bit) at a specified address.*/
          FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 80016f8:	4b23      	ldr	r3, [pc, #140]	; (8001788 <HAL_FLASH_IRQHandler+0x1c4>)
 80016fa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80016fe:	b293      	uxth	r3, r2
 8001700:	4619      	mov	r1, r3
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f000 f854 	bl	80017b0 <FLASH_Program_HalfWord>
 8001708:	e023      	b.n	8001752 <HAL_FLASH_IRQHandler+0x18e>
        }
        else
        {
          /* Program ended. Return the selected address */
          /* FLASH EOP interrupt user callback */
          if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
 800170a:	4b1f      	ldr	r3, [pc, #124]	; (8001788 <HAL_FLASH_IRQHandler+0x1c4>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	b2db      	uxtb	r3, r3
 8001710:	2b03      	cmp	r3, #3
 8001712:	d105      	bne.n	8001720 <HAL_FLASH_IRQHandler+0x15c>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8001714:	4b1c      	ldr	r3, [pc, #112]	; (8001788 <HAL_FLASH_IRQHandler+0x1c4>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	4618      	mov	r0, r3
 800171a:	f000 f837 	bl	800178c <HAL_FLASH_EndOfOperationCallback>
 800171e:	e011      	b.n	8001744 <HAL_FLASH_IRQHandler+0x180>
          }
          else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 8001720:	4b19      	ldr	r3, [pc, #100]	; (8001788 <HAL_FLASH_IRQHandler+0x1c4>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b04      	cmp	r3, #4
 8001728:	d106      	bne.n	8001738 <HAL_FLASH_IRQHandler+0x174>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
 800172a:	4b17      	ldr	r3, [pc, #92]	; (8001788 <HAL_FLASH_IRQHandler+0x1c4>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	3b02      	subs	r3, #2
 8001730:	4618      	mov	r0, r3
 8001732:	f000 f82b 	bl	800178c <HAL_FLASH_EndOfOperationCallback>
 8001736:	e005      	b.n	8001744 <HAL_FLASH_IRQHandler+0x180>
          }
          else 
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
 8001738:	4b13      	ldr	r3, [pc, #76]	; (8001788 <HAL_FLASH_IRQHandler+0x1c4>)
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	3b06      	subs	r3, #6
 800173e:	4618      	mov	r0, r3
 8001740:	f000 f824 	bl	800178c <HAL_FLASH_EndOfOperationCallback>
          }
        
          /* Reset Address and stop Program procedure */
          pFlash.Address = 0xFFFFFFFFU;
 8001744:	4b10      	ldr	r3, [pc, #64]	; (8001788 <HAL_FLASH_IRQHandler+0x1c4>)
 8001746:	f04f 32ff 	mov.w	r2, #4294967295
 800174a:	609a      	str	r2, [r3, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800174c:	4b0e      	ldr	r3, [pc, #56]	; (8001788 <HAL_FLASH_IRQHandler+0x1c4>)
 800174e:	2200      	movs	r2, #0
 8001750:	701a      	strb	r2, [r3, #0]
      }
    }
  }
#endif 

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8001752:	4b0d      	ldr	r3, [pc, #52]	; (8001788 <HAL_FLASH_IRQHandler+0x1c4>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	b2db      	uxtb	r3, r3
 8001758:	2b00      	cmp	r3, #0
 800175a:	d10e      	bne.n	800177a <HAL_FLASH_IRQHandler+0x1b6>
  
    /* Disable End of FLASH Operation and Error source interrupts for both banks */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP_BANK1 | FLASH_IT_ERR_BANK1 | FLASH_IT_EOP_BANK2 | FLASH_IT_ERR_BANK2);
#else
    /* Operation is completed, disable the PG, PER and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
 800175c:	4b09      	ldr	r3, [pc, #36]	; (8001784 <HAL_FLASH_IRQHandler+0x1c0>)
 800175e:	691b      	ldr	r3, [r3, #16]
 8001760:	4a08      	ldr	r2, [pc, #32]	; (8001784 <HAL_FLASH_IRQHandler+0x1c0>)
 8001762:	f023 0307 	bic.w	r3, r3, #7
 8001766:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation and Error source interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 8001768:	4b06      	ldr	r3, [pc, #24]	; (8001784 <HAL_FLASH_IRQHandler+0x1c0>)
 800176a:	691b      	ldr	r3, [r3, #16]
 800176c:	4a05      	ldr	r2, [pc, #20]	; (8001784 <HAL_FLASH_IRQHandler+0x1c0>)
 800176e:	f423 53a0 	bic.w	r3, r3, #5120	; 0x1400
 8001772:	6113      	str	r3, [r2, #16]
#endif /* FLASH_BANK2_END */

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8001774:	4b04      	ldr	r3, [pc, #16]	; (8001788 <HAL_FLASH_IRQHandler+0x1c4>)
 8001776:	2200      	movs	r2, #0
 8001778:	761a      	strb	r2, [r3, #24]
  }
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40022000 	.word	0x40022000
 8001788:	20000218 	.word	0x20000218

0800178c <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	bc80      	pop	{r7}
 800179c:	4770      	bx	lr

0800179e <HAL_FLASH_OperationErrorCallback>:
  *                 - Pages Erase: Address of the page which returned an error
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 800179e:	b480      	push	{r7}
 80017a0:	b083      	sub	sp, #12
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 80017a6:	bf00      	nop
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bc80      	pop	{r7}
 80017ae:	4770      	bx	lr

080017b0 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	460b      	mov	r3, r1
 80017ba:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80017bc:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <FLASH_Program_HalfWord+0x30>)
 80017be:	2200      	movs	r2, #0
 80017c0:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80017c2:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <FLASH_Program_HalfWord+0x34>)
 80017c4:	691b      	ldr	r3, [r3, #16]
 80017c6:	4a07      	ldr	r2, [pc, #28]	; (80017e4 <FLASH_Program_HalfWord+0x34>)
 80017c8:	f043 0301 	orr.w	r3, r3, #1
 80017cc:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	887a      	ldrh	r2, [r7, #2]
 80017d2:	801a      	strh	r2, [r3, #0]
}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc80      	pop	{r7}
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	20000218 	.word	0x20000218
 80017e4:	40022000 	.word	0x40022000

080017e8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80017ee:	2300      	movs	r3, #0
 80017f0:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80017f2:	4b23      	ldr	r3, [pc, #140]	; (8001880 <FLASH_SetErrorCode+0x98>)
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	f003 0310 	and.w	r3, r3, #16
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d009      	beq.n	8001812 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80017fe:	4b21      	ldr	r3, [pc, #132]	; (8001884 <FLASH_SetErrorCode+0x9c>)
 8001800:	69db      	ldr	r3, [r3, #28]
 8001802:	f043 0302 	orr.w	r3, r3, #2
 8001806:	4a1f      	ldr	r2, [pc, #124]	; (8001884 <FLASH_SetErrorCode+0x9c>)
 8001808:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f043 0310 	orr.w	r3, r3, #16
 8001810:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001812:	4b1b      	ldr	r3, [pc, #108]	; (8001880 <FLASH_SetErrorCode+0x98>)
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	f003 0304 	and.w	r3, r3, #4
 800181a:	2b00      	cmp	r3, #0
 800181c:	d009      	beq.n	8001832 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800181e:	4b19      	ldr	r3, [pc, #100]	; (8001884 <FLASH_SetErrorCode+0x9c>)
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	f043 0301 	orr.w	r3, r3, #1
 8001826:	4a17      	ldr	r2, [pc, #92]	; (8001884 <FLASH_SetErrorCode+0x9c>)
 8001828:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f043 0304 	orr.w	r3, r3, #4
 8001830:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001832:	4b13      	ldr	r3, [pc, #76]	; (8001880 <FLASH_SetErrorCode+0x98>)
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	2b00      	cmp	r3, #0
 800183c:	d00b      	beq.n	8001856 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800183e:	4b11      	ldr	r3, [pc, #68]	; (8001884 <FLASH_SetErrorCode+0x9c>)
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	f043 0304 	orr.w	r3, r3, #4
 8001846:	4a0f      	ldr	r2, [pc, #60]	; (8001884 <FLASH_SetErrorCode+0x9c>)
 8001848:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800184a:	4b0d      	ldr	r3, [pc, #52]	; (8001880 <FLASH_SetErrorCode+0x98>)
 800184c:	69db      	ldr	r3, [r3, #28]
 800184e:	4a0c      	ldr	r2, [pc, #48]	; (8001880 <FLASH_SetErrorCode+0x98>)
 8001850:	f023 0301 	bic.w	r3, r3, #1
 8001854:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f240 1201 	movw	r2, #257	; 0x101
 800185c:	4293      	cmp	r3, r2
 800185e:	d106      	bne.n	800186e <FLASH_SetErrorCode+0x86>
 8001860:	4b07      	ldr	r3, [pc, #28]	; (8001880 <FLASH_SetErrorCode+0x98>)
 8001862:	69db      	ldr	r3, [r3, #28]
 8001864:	4a06      	ldr	r2, [pc, #24]	; (8001880 <FLASH_SetErrorCode+0x98>)
 8001866:	f023 0301 	bic.w	r3, r3, #1
 800186a:	61d3      	str	r3, [r2, #28]
}  
 800186c:	e002      	b.n	8001874 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800186e:	4a04      	ldr	r2, [pc, #16]	; (8001880 <FLASH_SetErrorCode+0x98>)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	60d3      	str	r3, [r2, #12]
}  
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	bc80      	pop	{r7}
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	40022000 	.word	0x40022000
 8001884:	20000218 	.word	0x20000218

08001888 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001890:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <FLASH_PageErase+0x38>)
 8001892:	2200      	movs	r2, #0
 8001894:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001896:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <FLASH_PageErase+0x3c>)
 8001898:	691b      	ldr	r3, [r3, #16]
 800189a:	4a0a      	ldr	r2, [pc, #40]	; (80018c4 <FLASH_PageErase+0x3c>)
 800189c:	f043 0302 	orr.w	r3, r3, #2
 80018a0:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80018a2:	4a08      	ldr	r2, [pc, #32]	; (80018c4 <FLASH_PageErase+0x3c>)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80018a8:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <FLASH_PageErase+0x3c>)
 80018aa:	691b      	ldr	r3, [r3, #16]
 80018ac:	4a05      	ldr	r2, [pc, #20]	; (80018c4 <FLASH_PageErase+0x3c>)
 80018ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018b2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bc80      	pop	{r7}
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	20000218 	.word	0x20000218
 80018c4:	40022000 	.word	0x40022000

080018c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b08b      	sub	sp, #44	; 0x2c
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018d2:	2300      	movs	r3, #0
 80018d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018d6:	2300      	movs	r3, #0
 80018d8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018da:	e161      	b.n	8001ba0 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018dc:	2201      	movs	r2, #1
 80018de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	69fa      	ldr	r2, [r7, #28]
 80018ec:	4013      	ands	r3, r2
 80018ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	f040 8150 	bne.w	8001b9a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	4a97      	ldr	r2, [pc, #604]	; (8001b5c <HAL_GPIO_Init+0x294>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d05e      	beq.n	80019c2 <HAL_GPIO_Init+0xfa>
 8001904:	4a95      	ldr	r2, [pc, #596]	; (8001b5c <HAL_GPIO_Init+0x294>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d875      	bhi.n	80019f6 <HAL_GPIO_Init+0x12e>
 800190a:	4a95      	ldr	r2, [pc, #596]	; (8001b60 <HAL_GPIO_Init+0x298>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d058      	beq.n	80019c2 <HAL_GPIO_Init+0xfa>
 8001910:	4a93      	ldr	r2, [pc, #588]	; (8001b60 <HAL_GPIO_Init+0x298>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d86f      	bhi.n	80019f6 <HAL_GPIO_Init+0x12e>
 8001916:	4a93      	ldr	r2, [pc, #588]	; (8001b64 <HAL_GPIO_Init+0x29c>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d052      	beq.n	80019c2 <HAL_GPIO_Init+0xfa>
 800191c:	4a91      	ldr	r2, [pc, #580]	; (8001b64 <HAL_GPIO_Init+0x29c>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d869      	bhi.n	80019f6 <HAL_GPIO_Init+0x12e>
 8001922:	4a91      	ldr	r2, [pc, #580]	; (8001b68 <HAL_GPIO_Init+0x2a0>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d04c      	beq.n	80019c2 <HAL_GPIO_Init+0xfa>
 8001928:	4a8f      	ldr	r2, [pc, #572]	; (8001b68 <HAL_GPIO_Init+0x2a0>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d863      	bhi.n	80019f6 <HAL_GPIO_Init+0x12e>
 800192e:	4a8f      	ldr	r2, [pc, #572]	; (8001b6c <HAL_GPIO_Init+0x2a4>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d046      	beq.n	80019c2 <HAL_GPIO_Init+0xfa>
 8001934:	4a8d      	ldr	r2, [pc, #564]	; (8001b6c <HAL_GPIO_Init+0x2a4>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d85d      	bhi.n	80019f6 <HAL_GPIO_Init+0x12e>
 800193a:	2b12      	cmp	r3, #18
 800193c:	d82a      	bhi.n	8001994 <HAL_GPIO_Init+0xcc>
 800193e:	2b12      	cmp	r3, #18
 8001940:	d859      	bhi.n	80019f6 <HAL_GPIO_Init+0x12e>
 8001942:	a201      	add	r2, pc, #4	; (adr r2, 8001948 <HAL_GPIO_Init+0x80>)
 8001944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001948:	080019c3 	.word	0x080019c3
 800194c:	0800199d 	.word	0x0800199d
 8001950:	080019af 	.word	0x080019af
 8001954:	080019f1 	.word	0x080019f1
 8001958:	080019f7 	.word	0x080019f7
 800195c:	080019f7 	.word	0x080019f7
 8001960:	080019f7 	.word	0x080019f7
 8001964:	080019f7 	.word	0x080019f7
 8001968:	080019f7 	.word	0x080019f7
 800196c:	080019f7 	.word	0x080019f7
 8001970:	080019f7 	.word	0x080019f7
 8001974:	080019f7 	.word	0x080019f7
 8001978:	080019f7 	.word	0x080019f7
 800197c:	080019f7 	.word	0x080019f7
 8001980:	080019f7 	.word	0x080019f7
 8001984:	080019f7 	.word	0x080019f7
 8001988:	080019f7 	.word	0x080019f7
 800198c:	080019a5 	.word	0x080019a5
 8001990:	080019b9 	.word	0x080019b9
 8001994:	4a76      	ldr	r2, [pc, #472]	; (8001b70 <HAL_GPIO_Init+0x2a8>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d013      	beq.n	80019c2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800199a:	e02c      	b.n	80019f6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	623b      	str	r3, [r7, #32]
          break;
 80019a2:	e029      	b.n	80019f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	3304      	adds	r3, #4
 80019aa:	623b      	str	r3, [r7, #32]
          break;
 80019ac:	e024      	b.n	80019f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	3308      	adds	r3, #8
 80019b4:	623b      	str	r3, [r7, #32]
          break;
 80019b6:	e01f      	b.n	80019f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	330c      	adds	r3, #12
 80019be:	623b      	str	r3, [r7, #32]
          break;
 80019c0:	e01a      	b.n	80019f8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d102      	bne.n	80019d0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019ca:	2304      	movs	r3, #4
 80019cc:	623b      	str	r3, [r7, #32]
          break;
 80019ce:	e013      	b.n	80019f8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d105      	bne.n	80019e4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019d8:	2308      	movs	r3, #8
 80019da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	69fa      	ldr	r2, [r7, #28]
 80019e0:	611a      	str	r2, [r3, #16]
          break;
 80019e2:	e009      	b.n	80019f8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019e4:	2308      	movs	r3, #8
 80019e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	69fa      	ldr	r2, [r7, #28]
 80019ec:	615a      	str	r2, [r3, #20]
          break;
 80019ee:	e003      	b.n	80019f8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019f0:	2300      	movs	r3, #0
 80019f2:	623b      	str	r3, [r7, #32]
          break;
 80019f4:	e000      	b.n	80019f8 <HAL_GPIO_Init+0x130>
          break;
 80019f6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	2bff      	cmp	r3, #255	; 0xff
 80019fc:	d801      	bhi.n	8001a02 <HAL_GPIO_Init+0x13a>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	e001      	b.n	8001a06 <HAL_GPIO_Init+0x13e>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	3304      	adds	r3, #4
 8001a06:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	2bff      	cmp	r3, #255	; 0xff
 8001a0c:	d802      	bhi.n	8001a14 <HAL_GPIO_Init+0x14c>
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	e002      	b.n	8001a1a <HAL_GPIO_Init+0x152>
 8001a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a16:	3b08      	subs	r3, #8
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	210f      	movs	r1, #15
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	fa01 f303 	lsl.w	r3, r1, r3
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	401a      	ands	r2, r3
 8001a2c:	6a39      	ldr	r1, [r7, #32]
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	fa01 f303 	lsl.w	r3, r1, r3
 8001a34:	431a      	orrs	r2, r3
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	f000 80a9 	beq.w	8001b9a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a48:	4b4a      	ldr	r3, [pc, #296]	; (8001b74 <HAL_GPIO_Init+0x2ac>)
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	4a49      	ldr	r2, [pc, #292]	; (8001b74 <HAL_GPIO_Init+0x2ac>)
 8001a4e:	f043 0301 	orr.w	r3, r3, #1
 8001a52:	6193      	str	r3, [r2, #24]
 8001a54:	4b47      	ldr	r3, [pc, #284]	; (8001b74 <HAL_GPIO_Init+0x2ac>)
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	f003 0301 	and.w	r3, r3, #1
 8001a5c:	60bb      	str	r3, [r7, #8]
 8001a5e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a60:	4a45      	ldr	r2, [pc, #276]	; (8001b78 <HAL_GPIO_Init+0x2b0>)
 8001a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a64:	089b      	lsrs	r3, r3, #2
 8001a66:	3302      	adds	r3, #2
 8001a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a6c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a70:	f003 0303 	and.w	r3, r3, #3
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	220f      	movs	r2, #15
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	4013      	ands	r3, r2
 8001a82:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4a3d      	ldr	r2, [pc, #244]	; (8001b7c <HAL_GPIO_Init+0x2b4>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d00d      	beq.n	8001aa8 <HAL_GPIO_Init+0x1e0>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4a3c      	ldr	r2, [pc, #240]	; (8001b80 <HAL_GPIO_Init+0x2b8>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d007      	beq.n	8001aa4 <HAL_GPIO_Init+0x1dc>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	4a3b      	ldr	r2, [pc, #236]	; (8001b84 <HAL_GPIO_Init+0x2bc>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d101      	bne.n	8001aa0 <HAL_GPIO_Init+0x1d8>
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	e004      	b.n	8001aaa <HAL_GPIO_Init+0x1e2>
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e002      	b.n	8001aaa <HAL_GPIO_Init+0x1e2>
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e000      	b.n	8001aaa <HAL_GPIO_Init+0x1e2>
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aac:	f002 0203 	and.w	r2, r2, #3
 8001ab0:	0092      	lsls	r2, r2, #2
 8001ab2:	4093      	lsls	r3, r2
 8001ab4:	68fa      	ldr	r2, [r7, #12]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001aba:	492f      	ldr	r1, [pc, #188]	; (8001b78 <HAL_GPIO_Init+0x2b0>)
 8001abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abe:	089b      	lsrs	r3, r3, #2
 8001ac0:	3302      	adds	r3, #2
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d006      	beq.n	8001ae2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ad4:	4b2c      	ldr	r3, [pc, #176]	; (8001b88 <HAL_GPIO_Init+0x2c0>)
 8001ad6:	689a      	ldr	r2, [r3, #8]
 8001ad8:	492b      	ldr	r1, [pc, #172]	; (8001b88 <HAL_GPIO_Init+0x2c0>)
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	608b      	str	r3, [r1, #8]
 8001ae0:	e006      	b.n	8001af0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ae2:	4b29      	ldr	r3, [pc, #164]	; (8001b88 <HAL_GPIO_Init+0x2c0>)
 8001ae4:	689a      	ldr	r2, [r3, #8]
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	4927      	ldr	r1, [pc, #156]	; (8001b88 <HAL_GPIO_Init+0x2c0>)
 8001aec:	4013      	ands	r3, r2
 8001aee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d006      	beq.n	8001b0a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001afc:	4b22      	ldr	r3, [pc, #136]	; (8001b88 <HAL_GPIO_Init+0x2c0>)
 8001afe:	68da      	ldr	r2, [r3, #12]
 8001b00:	4921      	ldr	r1, [pc, #132]	; (8001b88 <HAL_GPIO_Init+0x2c0>)
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	60cb      	str	r3, [r1, #12]
 8001b08:	e006      	b.n	8001b18 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b0a:	4b1f      	ldr	r3, [pc, #124]	; (8001b88 <HAL_GPIO_Init+0x2c0>)
 8001b0c:	68da      	ldr	r2, [r3, #12]
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	43db      	mvns	r3, r3
 8001b12:	491d      	ldr	r1, [pc, #116]	; (8001b88 <HAL_GPIO_Init+0x2c0>)
 8001b14:	4013      	ands	r3, r2
 8001b16:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d006      	beq.n	8001b32 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b24:	4b18      	ldr	r3, [pc, #96]	; (8001b88 <HAL_GPIO_Init+0x2c0>)
 8001b26:	685a      	ldr	r2, [r3, #4]
 8001b28:	4917      	ldr	r1, [pc, #92]	; (8001b88 <HAL_GPIO_Init+0x2c0>)
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	604b      	str	r3, [r1, #4]
 8001b30:	e006      	b.n	8001b40 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b32:	4b15      	ldr	r3, [pc, #84]	; (8001b88 <HAL_GPIO_Init+0x2c0>)
 8001b34:	685a      	ldr	r2, [r3, #4]
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	4913      	ldr	r1, [pc, #76]	; (8001b88 <HAL_GPIO_Init+0x2c0>)
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d01f      	beq.n	8001b8c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b4c:	4b0e      	ldr	r3, [pc, #56]	; (8001b88 <HAL_GPIO_Init+0x2c0>)
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	490d      	ldr	r1, [pc, #52]	; (8001b88 <HAL_GPIO_Init+0x2c0>)
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	600b      	str	r3, [r1, #0]
 8001b58:	e01f      	b.n	8001b9a <HAL_GPIO_Init+0x2d2>
 8001b5a:	bf00      	nop
 8001b5c:	10320000 	.word	0x10320000
 8001b60:	10310000 	.word	0x10310000
 8001b64:	10220000 	.word	0x10220000
 8001b68:	10210000 	.word	0x10210000
 8001b6c:	10120000 	.word	0x10120000
 8001b70:	10110000 	.word	0x10110000
 8001b74:	40021000 	.word	0x40021000
 8001b78:	40010000 	.word	0x40010000
 8001b7c:	40010800 	.word	0x40010800
 8001b80:	40010c00 	.word	0x40010c00
 8001b84:	40011000 	.word	0x40011000
 8001b88:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b8c:	4b0b      	ldr	r3, [pc, #44]	; (8001bbc <HAL_GPIO_Init+0x2f4>)
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	43db      	mvns	r3, r3
 8001b94:	4909      	ldr	r1, [pc, #36]	; (8001bbc <HAL_GPIO_Init+0x2f4>)
 8001b96:	4013      	ands	r3, r2
 8001b98:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f47f ae96 	bne.w	80018dc <HAL_GPIO_Init+0x14>
  }
}
 8001bb0:	bf00      	nop
 8001bb2:	bf00      	nop
 8001bb4:	372c      	adds	r7, #44	; 0x2c
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr
 8001bbc:	40010400 	.word	0x40010400

08001bc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	460b      	mov	r3, r1
 8001bca:	807b      	strh	r3, [r7, #2]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bd0:	787b      	ldrb	r3, [r7, #1]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d003      	beq.n	8001bde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bd6:	887a      	ldrh	r2, [r7, #2]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001bdc:	e003      	b.n	8001be6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bde:	887b      	ldrh	r3, [r7, #2]
 8001be0:	041a      	lsls	r2, r3, #16
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	611a      	str	r2, [r3, #16]
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bc80      	pop	{r7}
 8001bee:	4770      	bx	lr

08001bf0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e12b      	b.n	8001e5a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d106      	bne.n	8001c1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f7fe fb3c 	bl	8000294 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2224      	movs	r2, #36	; 0x24
 8001c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f022 0201 	bic.w	r2, r2, #1
 8001c32:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c52:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c54:	f002 ffc8 	bl	8004be8 <HAL_RCC_GetPCLK1Freq>
 8001c58:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	4a81      	ldr	r2, [pc, #516]	; (8001e64 <HAL_I2C_Init+0x274>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d807      	bhi.n	8001c74 <HAL_I2C_Init+0x84>
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	4a80      	ldr	r2, [pc, #512]	; (8001e68 <HAL_I2C_Init+0x278>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	bf94      	ite	ls
 8001c6c:	2301      	movls	r3, #1
 8001c6e:	2300      	movhi	r3, #0
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	e006      	b.n	8001c82 <HAL_I2C_Init+0x92>
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	4a7d      	ldr	r2, [pc, #500]	; (8001e6c <HAL_I2C_Init+0x27c>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	bf94      	ite	ls
 8001c7c:	2301      	movls	r3, #1
 8001c7e:	2300      	movhi	r3, #0
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e0e7      	b.n	8001e5a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	4a78      	ldr	r2, [pc, #480]	; (8001e70 <HAL_I2C_Init+0x280>)
 8001c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c92:	0c9b      	lsrs	r3, r3, #18
 8001c94:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68ba      	ldr	r2, [r7, #8]
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	6a1b      	ldr	r3, [r3, #32]
 8001cb0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	4a6a      	ldr	r2, [pc, #424]	; (8001e64 <HAL_I2C_Init+0x274>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d802      	bhi.n	8001cc4 <HAL_I2C_Init+0xd4>
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	e009      	b.n	8001cd8 <HAL_I2C_Init+0xe8>
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001cca:	fb02 f303 	mul.w	r3, r2, r3
 8001cce:	4a69      	ldr	r2, [pc, #420]	; (8001e74 <HAL_I2C_Init+0x284>)
 8001cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd4:	099b      	lsrs	r3, r3, #6
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	6812      	ldr	r2, [r2, #0]
 8001cdc:	430b      	orrs	r3, r1
 8001cde:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	69db      	ldr	r3, [r3, #28]
 8001ce6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001cea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	495c      	ldr	r1, [pc, #368]	; (8001e64 <HAL_I2C_Init+0x274>)
 8001cf4:	428b      	cmp	r3, r1
 8001cf6:	d819      	bhi.n	8001d2c <HAL_I2C_Init+0x13c>
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	1e59      	subs	r1, r3, #1
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d06:	1c59      	adds	r1, r3, #1
 8001d08:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001d0c:	400b      	ands	r3, r1
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d00a      	beq.n	8001d28 <HAL_I2C_Init+0x138>
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	1e59      	subs	r1, r3, #1
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d20:	3301      	adds	r3, #1
 8001d22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d26:	e051      	b.n	8001dcc <HAL_I2C_Init+0x1dc>
 8001d28:	2304      	movs	r3, #4
 8001d2a:	e04f      	b.n	8001dcc <HAL_I2C_Init+0x1dc>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d111      	bne.n	8001d58 <HAL_I2C_Init+0x168>
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	1e58      	subs	r0, r3, #1
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6859      	ldr	r1, [r3, #4]
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	440b      	add	r3, r1
 8001d42:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d46:	3301      	adds	r3, #1
 8001d48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	bf0c      	ite	eq
 8001d50:	2301      	moveq	r3, #1
 8001d52:	2300      	movne	r3, #0
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	e012      	b.n	8001d7e <HAL_I2C_Init+0x18e>
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	1e58      	subs	r0, r3, #1
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6859      	ldr	r1, [r3, #4]
 8001d60:	460b      	mov	r3, r1
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	440b      	add	r3, r1
 8001d66:	0099      	lsls	r1, r3, #2
 8001d68:	440b      	add	r3, r1
 8001d6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d6e:	3301      	adds	r3, #1
 8001d70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	bf0c      	ite	eq
 8001d78:	2301      	moveq	r3, #1
 8001d7a:	2300      	movne	r3, #0
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <HAL_I2C_Init+0x196>
 8001d82:	2301      	movs	r3, #1
 8001d84:	e022      	b.n	8001dcc <HAL_I2C_Init+0x1dc>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d10e      	bne.n	8001dac <HAL_I2C_Init+0x1bc>
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	1e58      	subs	r0, r3, #1
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6859      	ldr	r1, [r3, #4]
 8001d96:	460b      	mov	r3, r1
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	440b      	add	r3, r1
 8001d9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001da0:	3301      	adds	r3, #1
 8001da2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001da6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001daa:	e00f      	b.n	8001dcc <HAL_I2C_Init+0x1dc>
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	1e58      	subs	r0, r3, #1
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6859      	ldr	r1, [r3, #4]
 8001db4:	460b      	mov	r3, r1
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	440b      	add	r3, r1
 8001dba:	0099      	lsls	r1, r3, #2
 8001dbc:	440b      	add	r3, r1
 8001dbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dc8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001dcc:	6879      	ldr	r1, [r7, #4]
 8001dce:	6809      	ldr	r1, [r1, #0]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	69da      	ldr	r2, [r3, #28]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a1b      	ldr	r3, [r3, #32]
 8001de6:	431a      	orrs	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	430a      	orrs	r2, r1
 8001dee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001dfa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	6911      	ldr	r1, [r2, #16]
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	68d2      	ldr	r2, [r2, #12]
 8001e06:	4311      	orrs	r1, r2
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	6812      	ldr	r2, [r2, #0]
 8001e0c:	430b      	orrs	r3, r1
 8001e0e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	695a      	ldr	r2, [r3, #20]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	431a      	orrs	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f042 0201 	orr.w	r2, r2, #1
 8001e3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2220      	movs	r2, #32
 8001e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	000186a0 	.word	0x000186a0
 8001e68:	001e847f 	.word	0x001e847f
 8001e6c:	003d08ff 	.word	0x003d08ff
 8001e70:	431bde83 	.word	0x431bde83
 8001e74:	10624dd3 	.word	0x10624dd3

08001e78 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e8a:	2b80      	cmp	r3, #128	; 0x80
 8001e8c:	d103      	bne.n	8001e96 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2200      	movs	r2, #0
 8001e94:	611a      	str	r2, [r3, #16]
  }
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bc80      	pop	{r7}
 8001e9e:	4770      	bx	lr

08001ea0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b088      	sub	sp, #32
 8001ea4:	af02      	add	r7, sp, #8
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	4608      	mov	r0, r1
 8001eaa:	4611      	mov	r1, r2
 8001eac:	461a      	mov	r2, r3
 8001eae:	4603      	mov	r3, r0
 8001eb0:	817b      	strh	r3, [r7, #10]
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	813b      	strh	r3, [r7, #8]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001eba:	f7ff f825 	bl	8000f08 <HAL_GetTick>
 8001ebe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	2b20      	cmp	r3, #32
 8001eca:	f040 80d9 	bne.w	8002080 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	2319      	movs	r3, #25
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	496d      	ldr	r1, [pc, #436]	; (800208c <HAL_I2C_Mem_Write+0x1ec>)
 8001ed8:	68f8      	ldr	r0, [r7, #12]
 8001eda:	f002 f839 	bl	8003f50 <I2C_WaitOnFlagUntilTimeout>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	e0cc      	b.n	8002082 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d101      	bne.n	8001ef6 <HAL_I2C_Mem_Write+0x56>
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	e0c5      	b.n	8002082 <HAL_I2C_Mem_Write+0x1e2>
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d007      	beq.n	8001f1c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f042 0201 	orr.w	r2, r2, #1
 8001f1a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f2a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2221      	movs	r2, #33	; 0x21
 8001f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2240      	movs	r2, #64	; 0x40
 8001f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6a3a      	ldr	r2, [r7, #32]
 8001f46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001f4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	4a4d      	ldr	r2, [pc, #308]	; (8002090 <HAL_I2C_Mem_Write+0x1f0>)
 8001f5c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f5e:	88f8      	ldrh	r0, [r7, #6]
 8001f60:	893a      	ldrh	r2, [r7, #8]
 8001f62:	8979      	ldrh	r1, [r7, #10]
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	9301      	str	r3, [sp, #4]
 8001f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f6a:	9300      	str	r3, [sp, #0]
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	68f8      	ldr	r0, [r7, #12]
 8001f70:	f001 fdc8 	bl	8003b04 <I2C_RequestMemoryWrite>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d052      	beq.n	8002020 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e081      	b.n	8002082 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f7e:	697a      	ldr	r2, [r7, #20]
 8001f80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f82:	68f8      	ldr	r0, [r7, #12]
 8001f84:	f002 f8fe 	bl	8004184 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d00d      	beq.n	8001faa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	2b04      	cmp	r3, #4
 8001f94:	d107      	bne.n	8001fa6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fa4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e06b      	b.n	8002082 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fae:	781a      	ldrb	r2, [r3, #0]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fba:	1c5a      	adds	r2, r3, #1
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fc4:	3b01      	subs	r3, #1
 8001fc6:	b29a      	uxth	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	b29a      	uxth	r2, r3
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	695b      	ldr	r3, [r3, #20]
 8001fe0:	f003 0304 	and.w	r3, r3, #4
 8001fe4:	2b04      	cmp	r3, #4
 8001fe6:	d11b      	bne.n	8002020 <HAL_I2C_Mem_Write+0x180>
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d017      	beq.n	8002020 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff4:	781a      	ldrb	r2, [r3, #0]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002000:	1c5a      	adds	r2, r3, #1
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800200a:	3b01      	subs	r3, #1
 800200c:	b29a      	uxth	r2, r3
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002016:	b29b      	uxth	r3, r3
 8002018:	3b01      	subs	r3, #1
 800201a:	b29a      	uxth	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002024:	2b00      	cmp	r3, #0
 8002026:	d1aa      	bne.n	8001f7e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002028:	697a      	ldr	r2, [r7, #20]
 800202a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800202c:	68f8      	ldr	r0, [r7, #12]
 800202e:	f002 f8f1 	bl	8004214 <I2C_WaitOnBTFFlagUntilTimeout>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d00d      	beq.n	8002054 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203c:	2b04      	cmp	r3, #4
 800203e:	d107      	bne.n	8002050 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800204e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e016      	b.n	8002082 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002062:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2220      	movs	r2, #32
 8002068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2200      	movs	r2, #0
 8002078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800207c:	2300      	movs	r3, #0
 800207e:	e000      	b.n	8002082 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002080:	2302      	movs	r3, #2
  }
}
 8002082:	4618      	mov	r0, r3
 8002084:	3718      	adds	r7, #24
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	00100002 	.word	0x00100002
 8002090:	ffff0000 	.word	0xffff0000

08002094 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b08c      	sub	sp, #48	; 0x30
 8002098:	af02      	add	r7, sp, #8
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	4608      	mov	r0, r1
 800209e:	4611      	mov	r1, r2
 80020a0:	461a      	mov	r2, r3
 80020a2:	4603      	mov	r3, r0
 80020a4:	817b      	strh	r3, [r7, #10]
 80020a6:	460b      	mov	r3, r1
 80020a8:	813b      	strh	r3, [r7, #8]
 80020aa:	4613      	mov	r3, r2
 80020ac:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80020ae:	2300      	movs	r3, #0
 80020b0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80020b2:	f7fe ff29 	bl	8000f08 <HAL_GetTick>
 80020b6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b20      	cmp	r3, #32
 80020c2:	f040 8244 	bne.w	800254e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c8:	9300      	str	r3, [sp, #0]
 80020ca:	2319      	movs	r3, #25
 80020cc:	2201      	movs	r2, #1
 80020ce:	4982      	ldr	r1, [pc, #520]	; (80022d8 <HAL_I2C_Mem_Read+0x244>)
 80020d0:	68f8      	ldr	r0, [r7, #12]
 80020d2:	f001 ff3d 	bl	8003f50 <I2C_WaitOnFlagUntilTimeout>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80020dc:	2302      	movs	r3, #2
 80020de:	e237      	b.n	8002550 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d101      	bne.n	80020ee <HAL_I2C_Mem_Read+0x5a>
 80020ea:	2302      	movs	r3, #2
 80020ec:	e230      	b.n	8002550 <HAL_I2C_Mem_Read+0x4bc>
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2201      	movs	r2, #1
 80020f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0301 	and.w	r3, r3, #1
 8002100:	2b01      	cmp	r3, #1
 8002102:	d007      	beq.n	8002114 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f042 0201 	orr.w	r2, r2, #1
 8002112:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002122:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2222      	movs	r2, #34	; 0x22
 8002128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2240      	movs	r2, #64	; 0x40
 8002130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2200      	movs	r2, #0
 8002138:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800213e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002144:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800214a:	b29a      	uxth	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	4a62      	ldr	r2, [pc, #392]	; (80022dc <HAL_I2C_Mem_Read+0x248>)
 8002154:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002156:	88f8      	ldrh	r0, [r7, #6]
 8002158:	893a      	ldrh	r2, [r7, #8]
 800215a:	8979      	ldrh	r1, [r7, #10]
 800215c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215e:	9301      	str	r3, [sp, #4]
 8002160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002162:	9300      	str	r3, [sp, #0]
 8002164:	4603      	mov	r3, r0
 8002166:	68f8      	ldr	r0, [r7, #12]
 8002168:	f001 fd62 	bl	8003c30 <I2C_RequestMemoryRead>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e1ec      	b.n	8002550 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800217a:	2b00      	cmp	r3, #0
 800217c:	d113      	bne.n	80021a6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800217e:	2300      	movs	r3, #0
 8002180:	61fb      	str	r3, [r7, #28]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	695b      	ldr	r3, [r3, #20]
 8002188:	61fb      	str	r3, [r7, #28]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	61fb      	str	r3, [r7, #28]
 8002192:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	e1c0      	b.n	8002528 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d11e      	bne.n	80021ec <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021bc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80021be:	b672      	cpsid	i
}
 80021c0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021c2:	2300      	movs	r3, #0
 80021c4:	61bb      	str	r3, [r7, #24]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	695b      	ldr	r3, [r3, #20]
 80021cc:	61bb      	str	r3, [r7, #24]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	61bb      	str	r3, [r7, #24]
 80021d6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021e6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80021e8:	b662      	cpsie	i
}
 80021ea:	e035      	b.n	8002258 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d11e      	bne.n	8002232 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002202:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002204:	b672      	cpsid	i
}
 8002206:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002208:	2300      	movs	r3, #0
 800220a:	617b      	str	r3, [r7, #20]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	617b      	str	r3, [r7, #20]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	617b      	str	r3, [r7, #20]
 800221c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800222c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800222e:	b662      	cpsie	i
}
 8002230:	e012      	b.n	8002258 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002240:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002242:	2300      	movs	r3, #0
 8002244:	613b      	str	r3, [r7, #16]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	695b      	ldr	r3, [r3, #20]
 800224c:	613b      	str	r3, [r7, #16]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	613b      	str	r3, [r7, #16]
 8002256:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002258:	e166      	b.n	8002528 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800225e:	2b03      	cmp	r3, #3
 8002260:	f200 811f 	bhi.w	80024a2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002268:	2b01      	cmp	r3, #1
 800226a:	d123      	bne.n	80022b4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800226c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800226e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002270:	68f8      	ldr	r0, [r7, #12]
 8002272:	f002 f849 	bl	8004308 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e167      	b.n	8002550 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	691a      	ldr	r2, [r3, #16]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228a:	b2d2      	uxtb	r2, r2
 800228c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002292:	1c5a      	adds	r2, r3, #1
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800229c:	3b01      	subs	r3, #1
 800229e:	b29a      	uxth	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	3b01      	subs	r3, #1
 80022ac:	b29a      	uxth	r2, r3
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80022b2:	e139      	b.n	8002528 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d152      	bne.n	8002362 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80022bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022be:	9300      	str	r3, [sp, #0]
 80022c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022c2:	2200      	movs	r2, #0
 80022c4:	4906      	ldr	r1, [pc, #24]	; (80022e0 <HAL_I2C_Mem_Read+0x24c>)
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	f001 fe42 	bl	8003f50 <I2C_WaitOnFlagUntilTimeout>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d008      	beq.n	80022e4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e13c      	b.n	8002550 <HAL_I2C_Mem_Read+0x4bc>
 80022d6:	bf00      	nop
 80022d8:	00100002 	.word	0x00100002
 80022dc:	ffff0000 	.word	0xffff0000
 80022e0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80022e4:	b672      	cpsid	i
}
 80022e6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	691a      	ldr	r2, [r3, #16]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002302:	b2d2      	uxtb	r2, r2
 8002304:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230a:	1c5a      	adds	r2, r3, #1
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002314:	3b01      	subs	r3, #1
 8002316:	b29a      	uxth	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002320:	b29b      	uxth	r3, r3
 8002322:	3b01      	subs	r3, #1
 8002324:	b29a      	uxth	r2, r3
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800232a:	b662      	cpsie	i
}
 800232c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	691a      	ldr	r2, [r3, #16]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002338:	b2d2      	uxtb	r2, r2
 800233a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002340:	1c5a      	adds	r2, r3, #1
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800234a:	3b01      	subs	r3, #1
 800234c:	b29a      	uxth	r2, r3
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002356:	b29b      	uxth	r3, r3
 8002358:	3b01      	subs	r3, #1
 800235a:	b29a      	uxth	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002360:	e0e2      	b.n	8002528 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002364:	9300      	str	r3, [sp, #0]
 8002366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002368:	2200      	movs	r2, #0
 800236a:	497b      	ldr	r1, [pc, #492]	; (8002558 <HAL_I2C_Mem_Read+0x4c4>)
 800236c:	68f8      	ldr	r0, [r7, #12]
 800236e:	f001 fdef 	bl	8003f50 <I2C_WaitOnFlagUntilTimeout>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e0e9      	b.n	8002550 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800238a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800238c:	b672      	cpsid	i
}
 800238e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	691a      	ldr	r2, [r3, #16]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239a:	b2d2      	uxtb	r2, r2
 800239c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a2:	1c5a      	adds	r2, r3, #1
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ac:	3b01      	subs	r3, #1
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	3b01      	subs	r3, #1
 80023bc:	b29a      	uxth	r2, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80023c2:	4b66      	ldr	r3, [pc, #408]	; (800255c <HAL_I2C_Mem_Read+0x4c8>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	08db      	lsrs	r3, r3, #3
 80023c8:	4a65      	ldr	r2, [pc, #404]	; (8002560 <HAL_I2C_Mem_Read+0x4cc>)
 80023ca:	fba2 2303 	umull	r2, r3, r2, r3
 80023ce:	0a1a      	lsrs	r2, r3, #8
 80023d0:	4613      	mov	r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	4413      	add	r3, r2
 80023d6:	00da      	lsls	r2, r3, #3
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80023dc:	6a3b      	ldr	r3, [r7, #32]
 80023de:	3b01      	subs	r3, #1
 80023e0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80023e2:	6a3b      	ldr	r3, [r7, #32]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d118      	bne.n	800241a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2200      	movs	r2, #0
 80023ec:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2220      	movs	r2, #32
 80023f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002402:	f043 0220 	orr.w	r2, r3, #32
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800240a:	b662      	cpsie	i
}
 800240c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e09a      	b.n	8002550 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	695b      	ldr	r3, [r3, #20]
 8002420:	f003 0304 	and.w	r3, r3, #4
 8002424:	2b04      	cmp	r3, #4
 8002426:	d1d9      	bne.n	80023dc <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002436:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	691a      	ldr	r2, [r3, #16]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002442:	b2d2      	uxtb	r2, r2
 8002444:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244a:	1c5a      	adds	r2, r3, #1
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002454:	3b01      	subs	r3, #1
 8002456:	b29a      	uxth	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002460:	b29b      	uxth	r3, r3
 8002462:	3b01      	subs	r3, #1
 8002464:	b29a      	uxth	r2, r3
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800246a:	b662      	cpsie	i
}
 800246c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	691a      	ldr	r2, [r3, #16]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002478:	b2d2      	uxtb	r2, r2
 800247a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002480:	1c5a      	adds	r2, r3, #1
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800248a:	3b01      	subs	r3, #1
 800248c:	b29a      	uxth	r2, r3
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002496:	b29b      	uxth	r3, r3
 8002498:	3b01      	subs	r3, #1
 800249a:	b29a      	uxth	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024a0:	e042      	b.n	8002528 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	f001 ff2e 	bl	8004308 <I2C_WaitOnRXNEFlagUntilTimeout>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e04c      	b.n	8002550 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	691a      	ldr	r2, [r3, #16]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c0:	b2d2      	uxtb	r2, r2
 80024c2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c8:	1c5a      	adds	r2, r3, #1
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d2:	3b01      	subs	r3, #1
 80024d4:	b29a      	uxth	r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024de:	b29b      	uxth	r3, r3
 80024e0:	3b01      	subs	r3, #1
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	f003 0304 	and.w	r3, r3, #4
 80024f2:	2b04      	cmp	r3, #4
 80024f4:	d118      	bne.n	8002528 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	691a      	ldr	r2, [r3, #16]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002500:	b2d2      	uxtb	r2, r2
 8002502:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002508:	1c5a      	adds	r2, r3, #1
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002512:	3b01      	subs	r3, #1
 8002514:	b29a      	uxth	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800251e:	b29b      	uxth	r3, r3
 8002520:	3b01      	subs	r3, #1
 8002522:	b29a      	uxth	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800252c:	2b00      	cmp	r3, #0
 800252e:	f47f ae94 	bne.w	800225a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2220      	movs	r2, #32
 8002536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800254a:	2300      	movs	r3, #0
 800254c:	e000      	b.n	8002550 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800254e:	2302      	movs	r3, #2
  }
}
 8002550:	4618      	mov	r0, r3
 8002552:	3728      	adds	r7, #40	; 0x28
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	00010004 	.word	0x00010004
 800255c:	20000000 	.word	0x20000000
 8002560:	14f8b589 	.word	0x14f8b589

08002564 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b088      	sub	sp, #32
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800256c:	2300      	movs	r3, #0
 800256e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002584:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800258c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800258e:	7bfb      	ldrb	r3, [r7, #15]
 8002590:	2b10      	cmp	r3, #16
 8002592:	d003      	beq.n	800259c <HAL_I2C_EV_IRQHandler+0x38>
 8002594:	7bfb      	ldrb	r3, [r7, #15]
 8002596:	2b40      	cmp	r3, #64	; 0x40
 8002598:	f040 80c1 	bne.w	800271e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d10d      	bne.n	80025d2 <HAL_I2C_EV_IRQHandler+0x6e>
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80025bc:	d003      	beq.n	80025c6 <HAL_I2C_EV_IRQHandler+0x62>
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80025c4:	d101      	bne.n	80025ca <HAL_I2C_EV_IRQHandler+0x66>
 80025c6:	2301      	movs	r3, #1
 80025c8:	e000      	b.n	80025cc <HAL_I2C_EV_IRQHandler+0x68>
 80025ca:	2300      	movs	r3, #0
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	f000 8132 	beq.w	8002836 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00c      	beq.n	80025f6 <HAL_I2C_EV_IRQHandler+0x92>
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	0a5b      	lsrs	r3, r3, #9
 80025e0:	f003 0301 	and.w	r3, r3, #1
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d006      	beq.n	80025f6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f001 ff18 	bl	800441e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 fcd6 	bl	8002fa0 <I2C_Master_SB>
 80025f4:	e092      	b.n	800271c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	08db      	lsrs	r3, r3, #3
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d009      	beq.n	8002616 <HAL_I2C_EV_IRQHandler+0xb2>
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	0a5b      	lsrs	r3, r3, #9
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 fd4b 	bl	80030aa <I2C_Master_ADD10>
 8002614:	e082      	b.n	800271c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	085b      	lsrs	r3, r3, #1
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b00      	cmp	r3, #0
 8002620:	d009      	beq.n	8002636 <HAL_I2C_EV_IRQHandler+0xd2>
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	0a5b      	lsrs	r3, r3, #9
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 fd64 	bl	80030fc <I2C_Master_ADDR>
 8002634:	e072      	b.n	800271c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	089b      	lsrs	r3, r3, #2
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b00      	cmp	r3, #0
 8002640:	d03b      	beq.n	80026ba <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800264c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002650:	f000 80f3 	beq.w	800283a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	09db      	lsrs	r3, r3, #7
 8002658:	f003 0301 	and.w	r3, r3, #1
 800265c:	2b00      	cmp	r3, #0
 800265e:	d00f      	beq.n	8002680 <HAL_I2C_EV_IRQHandler+0x11c>
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	0a9b      	lsrs	r3, r3, #10
 8002664:	f003 0301 	and.w	r3, r3, #1
 8002668:	2b00      	cmp	r3, #0
 800266a:	d009      	beq.n	8002680 <HAL_I2C_EV_IRQHandler+0x11c>
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	089b      	lsrs	r3, r3, #2
 8002670:	f003 0301 	and.w	r3, r3, #1
 8002674:	2b00      	cmp	r3, #0
 8002676:	d103      	bne.n	8002680 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f000 f942 	bl	8002902 <I2C_MasterTransmit_TXE>
 800267e:	e04d      	b.n	800271c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	089b      	lsrs	r3, r3, #2
 8002684:	f003 0301 	and.w	r3, r3, #1
 8002688:	2b00      	cmp	r3, #0
 800268a:	f000 80d6 	beq.w	800283a <HAL_I2C_EV_IRQHandler+0x2d6>
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	0a5b      	lsrs	r3, r3, #9
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b00      	cmp	r3, #0
 8002698:	f000 80cf 	beq.w	800283a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800269c:	7bbb      	ldrb	r3, [r7, #14]
 800269e:	2b21      	cmp	r3, #33	; 0x21
 80026a0:	d103      	bne.n	80026aa <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 f9c9 	bl	8002a3a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026a8:	e0c7      	b.n	800283a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80026aa:	7bfb      	ldrb	r3, [r7, #15]
 80026ac:	2b40      	cmp	r3, #64	; 0x40
 80026ae:	f040 80c4 	bne.w	800283a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 fa37 	bl	8002b26 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026b8:	e0bf      	b.n	800283a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026c8:	f000 80b7 	beq.w	800283a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	099b      	lsrs	r3, r3, #6
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d00f      	beq.n	80026f8 <HAL_I2C_EV_IRQHandler+0x194>
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	0a9b      	lsrs	r3, r3, #10
 80026dc:	f003 0301 	and.w	r3, r3, #1
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d009      	beq.n	80026f8 <HAL_I2C_EV_IRQHandler+0x194>
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	089b      	lsrs	r3, r3, #2
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d103      	bne.n	80026f8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f000 fab0 	bl	8002c56 <I2C_MasterReceive_RXNE>
 80026f6:	e011      	b.n	800271c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	089b      	lsrs	r3, r3, #2
 80026fc:	f003 0301 	and.w	r3, r3, #1
 8002700:	2b00      	cmp	r3, #0
 8002702:	f000 809a 	beq.w	800283a <HAL_I2C_EV_IRQHandler+0x2d6>
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	0a5b      	lsrs	r3, r3, #9
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	2b00      	cmp	r3, #0
 8002710:	f000 8093 	beq.w	800283a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f000 fb59 	bl	8002dcc <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800271a:	e08e      	b.n	800283a <HAL_I2C_EV_IRQHandler+0x2d6>
 800271c:	e08d      	b.n	800283a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	2b00      	cmp	r3, #0
 8002724:	d004      	beq.n	8002730 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	695b      	ldr	r3, [r3, #20]
 800272c:	61fb      	str	r3, [r7, #28]
 800272e:	e007      	b.n	8002740 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	085b      	lsrs	r3, r3, #1
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	2b00      	cmp	r3, #0
 800274a:	d012      	beq.n	8002772 <HAL_I2C_EV_IRQHandler+0x20e>
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	0a5b      	lsrs	r3, r3, #9
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	2b00      	cmp	r3, #0
 8002756:	d00c      	beq.n	8002772 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275c:	2b00      	cmp	r3, #0
 800275e:	d003      	beq.n	8002768 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002768:	69b9      	ldr	r1, [r7, #24]
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 ff1d 	bl	80035aa <I2C_Slave_ADDR>
 8002770:	e066      	b.n	8002840 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	091b      	lsrs	r3, r3, #4
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	2b00      	cmp	r3, #0
 800277c:	d009      	beq.n	8002792 <HAL_I2C_EV_IRQHandler+0x22e>
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	0a5b      	lsrs	r3, r3, #9
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	2b00      	cmp	r3, #0
 8002788:	d003      	beq.n	8002792 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 ff58 	bl	8003640 <I2C_Slave_STOPF>
 8002790:	e056      	b.n	8002840 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002792:	7bbb      	ldrb	r3, [r7, #14]
 8002794:	2b21      	cmp	r3, #33	; 0x21
 8002796:	d002      	beq.n	800279e <HAL_I2C_EV_IRQHandler+0x23a>
 8002798:	7bbb      	ldrb	r3, [r7, #14]
 800279a:	2b29      	cmp	r3, #41	; 0x29
 800279c:	d125      	bne.n	80027ea <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	09db      	lsrs	r3, r3, #7
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00f      	beq.n	80027ca <HAL_I2C_EV_IRQHandler+0x266>
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	0a9b      	lsrs	r3, r3, #10
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d009      	beq.n	80027ca <HAL_I2C_EV_IRQHandler+0x266>
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	089b      	lsrs	r3, r3, #2
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d103      	bne.n	80027ca <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 fe35 	bl	8003432 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80027c8:	e039      	b.n	800283e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	089b      	lsrs	r3, r3, #2
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d033      	beq.n	800283e <HAL_I2C_EV_IRQHandler+0x2da>
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	0a5b      	lsrs	r3, r3, #9
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d02d      	beq.n	800283e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 fe62 	bl	80034ac <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80027e8:	e029      	b.n	800283e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	099b      	lsrs	r3, r3, #6
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00f      	beq.n	8002816 <HAL_I2C_EV_IRQHandler+0x2b2>
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	0a9b      	lsrs	r3, r3, #10
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d009      	beq.n	8002816 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	089b      	lsrs	r3, r3, #2
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b00      	cmp	r3, #0
 800280c:	d103      	bne.n	8002816 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 fe6c 	bl	80034ec <I2C_SlaveReceive_RXNE>
 8002814:	e014      	b.n	8002840 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	089b      	lsrs	r3, r3, #2
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00e      	beq.n	8002840 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	0a5b      	lsrs	r3, r3, #9
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	2b00      	cmp	r3, #0
 800282c:	d008      	beq.n	8002840 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 fe9a 	bl	8003568 <I2C_SlaveReceive_BTF>
 8002834:	e004      	b.n	8002840 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002836:	bf00      	nop
 8002838:	e002      	b.n	8002840 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800283a:	bf00      	nop
 800283c:	e000      	b.n	8002840 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800283e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002840:	3720      	adds	r7, #32
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002846:	b480      	push	{r7}
 8002848:	b083      	sub	sp, #12
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800284e:	bf00      	nop
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr

08002858 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002860:	bf00      	nop
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	bc80      	pop	{r7}
 8002868:	4770      	bx	lr

0800286a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800286a:	b480      	push	{r7}
 800286c:	b083      	sub	sp, #12
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	bc80      	pop	{r7}
 800287a:	4770      	bx	lr

0800287c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	bc80      	pop	{r7}
 800288c:	4770      	bx	lr

0800288e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800288e:	b480      	push	{r7}
 8002890:	b083      	sub	sp, #12
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
 8002896:	460b      	mov	r3, r1
 8002898:	70fb      	strb	r3, [r7, #3]
 800289a:	4613      	mov	r3, r2
 800289c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800289e:	bf00      	nop
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr

080028a8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80028b0:	bf00      	nop
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bc80      	pop	{r7}
 80028b8:	4770      	bx	lr

080028ba <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b083      	sub	sp, #12
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80028c2:	bf00      	nop
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bc80      	pop	{r7}
 80028ca:	4770      	bx	lr

080028cc <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	bc80      	pop	{r7}
 80028dc:	4770      	bx	lr

080028de <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80028de:	b480      	push	{r7}
 80028e0:	b083      	sub	sp, #12
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bc80      	pop	{r7}
 80028ee:	4770      	bx	lr

080028f0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bc80      	pop	{r7}
 8002900:	4770      	bx	lr

08002902 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b084      	sub	sp, #16
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002910:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002918:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002924:	2b00      	cmp	r3, #0
 8002926:	d150      	bne.n	80029ca <I2C_MasterTransmit_TXE+0xc8>
 8002928:	7bfb      	ldrb	r3, [r7, #15]
 800292a:	2b21      	cmp	r3, #33	; 0x21
 800292c:	d14d      	bne.n	80029ca <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	2b08      	cmp	r3, #8
 8002932:	d01d      	beq.n	8002970 <I2C_MasterTransmit_TXE+0x6e>
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	2b20      	cmp	r3, #32
 8002938:	d01a      	beq.n	8002970 <I2C_MasterTransmit_TXE+0x6e>
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002940:	d016      	beq.n	8002970 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	685a      	ldr	r2, [r3, #4]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002950:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2211      	movs	r2, #17
 8002956:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2220      	movs	r2, #32
 8002964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f7ff ff6c 	bl	8002846 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800296e:	e060      	b.n	8002a32 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	685a      	ldr	r2, [r3, #4]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800297e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800298e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2220      	movs	r2, #32
 800299a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b40      	cmp	r3, #64	; 0x40
 80029a8:	d107      	bne.n	80029ba <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7ff ff81 	bl	80028ba <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80029b8:	e03b      	b.n	8002a32 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f7ff ff3f 	bl	8002846 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80029c8:	e033      	b.n	8002a32 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80029ca:	7bfb      	ldrb	r3, [r7, #15]
 80029cc:	2b21      	cmp	r3, #33	; 0x21
 80029ce:	d005      	beq.n	80029dc <I2C_MasterTransmit_TXE+0xda>
 80029d0:	7bbb      	ldrb	r3, [r7, #14]
 80029d2:	2b40      	cmp	r3, #64	; 0x40
 80029d4:	d12d      	bne.n	8002a32 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80029d6:	7bfb      	ldrb	r3, [r7, #15]
 80029d8:	2b22      	cmp	r3, #34	; 0x22
 80029da:	d12a      	bne.n	8002a32 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d108      	bne.n	80029f8 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	685a      	ldr	r2, [r3, #4]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029f4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80029f6:	e01c      	b.n	8002a32 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2b40      	cmp	r3, #64	; 0x40
 8002a02:	d103      	bne.n	8002a0c <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 f88e 	bl	8002b26 <I2C_MemoryTransmit_TXE_BTF>
}
 8002a0a:	e012      	b.n	8002a32 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a10:	781a      	ldrb	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	1c5a      	adds	r2, r3, #1
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002a30:	e7ff      	b.n	8002a32 <I2C_MasterTransmit_TXE+0x130>
 8002a32:	bf00      	nop
 8002a34:	3710      	adds	r7, #16
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b084      	sub	sp, #16
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a46:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	2b21      	cmp	r3, #33	; 0x21
 8002a52:	d164      	bne.n	8002b1e <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d012      	beq.n	8002a84 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a62:	781a      	ldrb	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6e:	1c5a      	adds	r2, r3, #1
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002a82:	e04c      	b.n	8002b1e <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2b08      	cmp	r3, #8
 8002a88:	d01d      	beq.n	8002ac6 <I2C_MasterTransmit_BTF+0x8c>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2b20      	cmp	r3, #32
 8002a8e:	d01a      	beq.n	8002ac6 <I2C_MasterTransmit_BTF+0x8c>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a96:	d016      	beq.n	8002ac6 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	685a      	ldr	r2, [r3, #4]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002aa6:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2211      	movs	r2, #17
 8002aac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2220      	movs	r2, #32
 8002aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f7ff fec1 	bl	8002846 <HAL_I2C_MasterTxCpltCallback>
}
 8002ac4:	e02b      	b.n	8002b1e <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	685a      	ldr	r2, [r3, #4]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002ad4:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ae4:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2220      	movs	r2, #32
 8002af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	2b40      	cmp	r3, #64	; 0x40
 8002afe:	d107      	bne.n	8002b10 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f7ff fed6 	bl	80028ba <HAL_I2C_MemTxCpltCallback>
}
 8002b0e:	e006      	b.n	8002b1e <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f7ff fe94 	bl	8002846 <HAL_I2C_MasterTxCpltCallback>
}
 8002b1e:	bf00      	nop
 8002b20:	3710      	adds	r7, #16
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b084      	sub	sp, #16
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b34:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d11d      	bne.n	8002b7a <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d10b      	bne.n	8002b5e <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b4a:	b2da      	uxtb	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b56:	1c9a      	adds	r2, r3, #2
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8002b5c:	e077      	b.n	8002c4e <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	121b      	asrs	r3, r3, #8
 8002b66:	b2da      	uxtb	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b72:	1c5a      	adds	r2, r3, #1
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002b78:	e069      	b.n	8002c4e <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d10b      	bne.n	8002b9a <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b86:	b2da      	uxtb	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b92:	1c5a      	adds	r2, r3, #1
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002b98:	e059      	b.n	8002c4e <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d152      	bne.n	8002c48 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002ba2:	7bfb      	ldrb	r3, [r7, #15]
 8002ba4:	2b22      	cmp	r3, #34	; 0x22
 8002ba6:	d10d      	bne.n	8002bc4 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bb6:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bbc:	1c5a      	adds	r2, r3, #1
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002bc2:	e044      	b.n	8002c4e <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d015      	beq.n	8002bfa <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002bce:	7bfb      	ldrb	r3, [r7, #15]
 8002bd0:	2b21      	cmp	r3, #33	; 0x21
 8002bd2:	d112      	bne.n	8002bfa <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd8:	781a      	ldrb	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be4:	1c5a      	adds	r2, r3, #1
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002bf8:	e029      	b.n	8002c4e <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d124      	bne.n	8002c4e <I2C_MemoryTransmit_TXE_BTF+0x128>
 8002c04:	7bfb      	ldrb	r3, [r7, #15]
 8002c06:	2b21      	cmp	r3, #33	; 0x21
 8002c08:	d121      	bne.n	8002c4e <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	685a      	ldr	r2, [r3, #4]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c18:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c28:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2220      	movs	r2, #32
 8002c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f7ff fe3a 	bl	80028ba <HAL_I2C_MemTxCpltCallback>
}
 8002c46:	e002      	b.n	8002c4e <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f7ff f915 	bl	8001e78 <I2C_Flush_DR>
}
 8002c4e:	bf00      	nop
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b084      	sub	sp, #16
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b22      	cmp	r3, #34	; 0x22
 8002c68:	f040 80ac 	bne.w	8002dc4 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2b03      	cmp	r3, #3
 8002c78:	d921      	bls.n	8002cbe <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	691a      	ldr	r2, [r3, #16]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c84:	b2d2      	uxtb	r2, r2
 8002c86:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8c:	1c5a      	adds	r2, r3, #1
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	2b03      	cmp	r3, #3
 8002ca8:	f040 808c 	bne.w	8002dc4 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cba:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002cbc:	e082      	b.n	8002dc4 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d075      	beq.n	8002db2 <I2C_MasterReceive_RXNE+0x15c>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d002      	beq.n	8002cd2 <I2C_MasterReceive_RXNE+0x7c>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d16f      	bne.n	8002db2 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f001 fae6 	bl	80042a4 <I2C_WaitOnSTOPRequestThroughIT>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d142      	bne.n	8002d64 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cec:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	685a      	ldr	r2, [r3, #4]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002cfc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	691a      	ldr	r2, [r3, #16]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d08:	b2d2      	uxtb	r2, r2
 8002d0a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d10:	1c5a      	adds	r2, r3, #1
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2220      	movs	r2, #32
 8002d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2b40      	cmp	r3, #64	; 0x40
 8002d36:	d10a      	bne.n	8002d4e <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f7ff fdc0 	bl	80028cc <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002d4c:	e03a      	b.n	8002dc4 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2212      	movs	r2, #18
 8002d5a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f7ff fd7b 	bl	8002858 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002d62:	e02f      	b.n	8002dc4 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	685a      	ldr	r2, [r3, #4]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d72:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	691a      	ldr	r2, [r3, #16]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7e:	b2d2      	uxtb	r2, r2
 8002d80:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d86:	1c5a      	adds	r2, r3, #1
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	3b01      	subs	r3, #1
 8002d94:	b29a      	uxth	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2220      	movs	r2, #32
 8002d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f7ff fd97 	bl	80028de <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002db0:	e008      	b.n	8002dc4 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	685a      	ldr	r2, [r3, #4]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dc0:	605a      	str	r2, [r3, #4]
}
 8002dc2:	e7ff      	b.n	8002dc4 <I2C_MasterReceive_RXNE+0x16e>
 8002dc4:	bf00      	nop
 8002dc6:	3710      	adds	r7, #16
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd8:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	2b04      	cmp	r3, #4
 8002de2:	d11b      	bne.n	8002e1c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	685a      	ldr	r2, [r3, #4]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002df2:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	691a      	ldr	r2, [r3, #16]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfe:	b2d2      	uxtb	r2, r2
 8002e00:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e06:	1c5a      	adds	r2, r3, #1
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	3b01      	subs	r3, #1
 8002e14:	b29a      	uxth	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002e1a:	e0bd      	b.n	8002f98 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	2b03      	cmp	r3, #3
 8002e24:	d129      	bne.n	8002e7a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e34:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2b04      	cmp	r3, #4
 8002e3a:	d00a      	beq.n	8002e52 <I2C_MasterReceive_BTF+0x86>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d007      	beq.n	8002e52 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e50:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	691a      	ldr	r2, [r3, #16]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5c:	b2d2      	uxtb	r2, r2
 8002e5e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e64:	1c5a      	adds	r2, r3, #1
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	3b01      	subs	r3, #1
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002e78:	e08e      	b.n	8002f98 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d176      	bne.n	8002f72 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d002      	beq.n	8002e90 <I2C_MasterReceive_BTF+0xc4>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2b10      	cmp	r3, #16
 8002e8e:	d108      	bne.n	8002ea2 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	e019      	b.n	8002ed6 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2b04      	cmp	r3, #4
 8002ea6:	d002      	beq.n	8002eae <I2C_MasterReceive_BTF+0xe2>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d108      	bne.n	8002ec0 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	e00a      	b.n	8002ed6 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2b10      	cmp	r3, #16
 8002ec4:	d007      	beq.n	8002ed6 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ed4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	691a      	ldr	r2, [r3, #16]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee0:	b2d2      	uxtb	r2, r2
 8002ee2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee8:	1c5a      	adds	r2, r3, #1
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	b29a      	uxth	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	691a      	ldr	r2, [r3, #16]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f06:	b2d2      	uxtb	r2, r2
 8002f08:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0e:	1c5a      	adds	r2, r3, #1
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	685a      	ldr	r2, [r3, #4]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002f30:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2220      	movs	r2, #32
 8002f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b40      	cmp	r3, #64	; 0x40
 8002f44:	d10a      	bne.n	8002f5c <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f7ff fcb9 	bl	80028cc <HAL_I2C_MemRxCpltCallback>
}
 8002f5a:	e01d      	b.n	8002f98 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2212      	movs	r2, #18
 8002f68:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f7ff fc74 	bl	8002858 <HAL_I2C_MasterRxCpltCallback>
}
 8002f70:	e012      	b.n	8002f98 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	691a      	ldr	r2, [r3, #16]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7c:	b2d2      	uxtb	r2, r2
 8002f7e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f84:	1c5a      	adds	r2, r3, #1
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	3b01      	subs	r3, #1
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002f98:	bf00      	nop
 8002f9a:	3710      	adds	r7, #16
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	2b40      	cmp	r3, #64	; 0x40
 8002fb2:	d117      	bne.n	8002fe4 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d109      	bne.n	8002fd0 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fcc:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002fce:	e067      	b.n	80030a0 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	f043 0301 	orr.w	r3, r3, #1
 8002fda:	b2da      	uxtb	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	611a      	str	r2, [r3, #16]
}
 8002fe2:	e05d      	b.n	80030a0 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	691b      	ldr	r3, [r3, #16]
 8002fe8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fec:	d133      	bne.n	8003056 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b21      	cmp	r3, #33	; 0x21
 8002ff8:	d109      	bne.n	800300e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	461a      	mov	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800300a:	611a      	str	r2, [r3, #16]
 800300c:	e008      	b.n	8003020 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003012:	b2db      	uxtb	r3, r3
 8003014:	f043 0301 	orr.w	r3, r3, #1
 8003018:	b2da      	uxtb	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003024:	2b00      	cmp	r3, #0
 8003026:	d004      	beq.n	8003032 <I2C_Master_SB+0x92>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800302c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302e:	2b00      	cmp	r3, #0
 8003030:	d108      	bne.n	8003044 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003036:	2b00      	cmp	r3, #0
 8003038:	d032      	beq.n	80030a0 <I2C_Master_SB+0x100>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003040:	2b00      	cmp	r3, #0
 8003042:	d02d      	beq.n	80030a0 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	685a      	ldr	r2, [r3, #4]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003052:	605a      	str	r2, [r3, #4]
}
 8003054:	e024      	b.n	80030a0 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800305a:	2b00      	cmp	r3, #0
 800305c:	d10e      	bne.n	800307c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003062:	b29b      	uxth	r3, r3
 8003064:	11db      	asrs	r3, r3, #7
 8003066:	b2db      	uxtb	r3, r3
 8003068:	f003 0306 	and.w	r3, r3, #6
 800306c:	b2db      	uxtb	r3, r3
 800306e:	f063 030f 	orn	r3, r3, #15
 8003072:	b2da      	uxtb	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	611a      	str	r2, [r3, #16]
}
 800307a:	e011      	b.n	80030a0 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003080:	2b01      	cmp	r3, #1
 8003082:	d10d      	bne.n	80030a0 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003088:	b29b      	uxth	r3, r3
 800308a:	11db      	asrs	r3, r3, #7
 800308c:	b2db      	uxtb	r3, r3
 800308e:	f003 0306 	and.w	r3, r3, #6
 8003092:	b2db      	uxtb	r3, r3
 8003094:	f063 030e 	orn	r3, r3, #14
 8003098:	b2da      	uxtb	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	611a      	str	r2, [r3, #16]
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bc80      	pop	{r7}
 80030a8:	4770      	bx	lr

080030aa <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80030aa:	b480      	push	{r7}
 80030ac:	b083      	sub	sp, #12
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b6:	b2da      	uxtb	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d004      	beq.n	80030d0 <I2C_Master_ADD10+0x26>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d108      	bne.n	80030e2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00c      	beq.n	80030f2 <I2C_Master_ADD10+0x48>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d007      	beq.n	80030f2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	685a      	ldr	r2, [r3, #4]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030f0:	605a      	str	r2, [r3, #4]
  }
}
 80030f2:	bf00      	nop
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bc80      	pop	{r7}
 80030fa:	4770      	bx	lr

080030fc <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b091      	sub	sp, #68	; 0x44
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800310a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003112:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003118:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b22      	cmp	r3, #34	; 0x22
 8003124:	f040 8174 	bne.w	8003410 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800312c:	2b00      	cmp	r3, #0
 800312e:	d10f      	bne.n	8003150 <I2C_Master_ADDR+0x54>
 8003130:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003134:	2b40      	cmp	r3, #64	; 0x40
 8003136:	d10b      	bne.n	8003150 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003138:	2300      	movs	r3, #0
 800313a:	633b      	str	r3, [r7, #48]	; 0x30
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	633b      	str	r3, [r7, #48]	; 0x30
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	633b      	str	r3, [r7, #48]	; 0x30
 800314c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800314e:	e16b      	b.n	8003428 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003154:	2b00      	cmp	r3, #0
 8003156:	d11d      	bne.n	8003194 <I2C_Master_ADDR+0x98>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003160:	d118      	bne.n	8003194 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003162:	2300      	movs	r3, #0
 8003164:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	695b      	ldr	r3, [r3, #20]
 800316c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003176:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003186:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800318c:	1c5a      	adds	r2, r3, #1
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	651a      	str	r2, [r3, #80]	; 0x50
 8003192:	e149      	b.n	8003428 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003198:	b29b      	uxth	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	d113      	bne.n	80031c6 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800319e:	2300      	movs	r3, #0
 80031a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80031b2:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031c2:	601a      	str	r2, [r3, #0]
 80031c4:	e120      	b.n	8003408 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	f040 808a 	bne.w	80032e6 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80031d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031d8:	d137      	bne.n	800324a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031e8:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031f8:	d113      	bne.n	8003222 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003208:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800320a:	2300      	movs	r3, #0
 800320c:	627b      	str	r3, [r7, #36]	; 0x24
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	695b      	ldr	r3, [r3, #20]
 8003214:	627b      	str	r3, [r7, #36]	; 0x24
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	627b      	str	r3, [r7, #36]	; 0x24
 800321e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003220:	e0f2      	b.n	8003408 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003222:	2300      	movs	r3, #0
 8003224:	623b      	str	r3, [r7, #32]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	623b      	str	r3, [r7, #32]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	623b      	str	r3, [r7, #32]
 8003236:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003246:	601a      	str	r2, [r3, #0]
 8003248:	e0de      	b.n	8003408 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800324a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800324c:	2b08      	cmp	r3, #8
 800324e:	d02e      	beq.n	80032ae <I2C_Master_ADDR+0x1b2>
 8003250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003252:	2b20      	cmp	r3, #32
 8003254:	d02b      	beq.n	80032ae <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003258:	2b12      	cmp	r3, #18
 800325a:	d102      	bne.n	8003262 <I2C_Master_ADDR+0x166>
 800325c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800325e:	2b01      	cmp	r3, #1
 8003260:	d125      	bne.n	80032ae <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003264:	2b04      	cmp	r3, #4
 8003266:	d00e      	beq.n	8003286 <I2C_Master_ADDR+0x18a>
 8003268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800326a:	2b02      	cmp	r3, #2
 800326c:	d00b      	beq.n	8003286 <I2C_Master_ADDR+0x18a>
 800326e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003270:	2b10      	cmp	r3, #16
 8003272:	d008      	beq.n	8003286 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003282:	601a      	str	r2, [r3, #0]
 8003284:	e007      	b.n	8003296 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003294:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003296:	2300      	movs	r3, #0
 8003298:	61fb      	str	r3, [r7, #28]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	695b      	ldr	r3, [r3, #20]
 80032a0:	61fb      	str	r3, [r7, #28]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	61fb      	str	r3, [r7, #28]
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	e0ac      	b.n	8003408 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032bc:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032be:	2300      	movs	r3, #0
 80032c0:	61bb      	str	r3, [r7, #24]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	695b      	ldr	r3, [r3, #20]
 80032c8:	61bb      	str	r3, [r7, #24]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	61bb      	str	r3, [r7, #24]
 80032d2:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032e2:	601a      	str	r2, [r3, #0]
 80032e4:	e090      	b.n	8003408 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d158      	bne.n	80033a2 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80032f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	d021      	beq.n	800333a <I2C_Master_ADDR+0x23e>
 80032f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d01e      	beq.n	800333a <I2C_Master_ADDR+0x23e>
 80032fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032fe:	2b10      	cmp	r3, #16
 8003300:	d01b      	beq.n	800333a <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003310:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003312:	2300      	movs	r3, #0
 8003314:	617b      	str	r3, [r7, #20]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	695b      	ldr	r3, [r3, #20]
 800331c:	617b      	str	r3, [r7, #20]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	617b      	str	r3, [r7, #20]
 8003326:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003336:	601a      	str	r2, [r3, #0]
 8003338:	e012      	b.n	8003360 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003348:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800334a:	2300      	movs	r3, #0
 800334c:	613b      	str	r3, [r7, #16]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	695b      	ldr	r3, [r3, #20]
 8003354:	613b      	str	r3, [r7, #16]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	613b      	str	r3, [r7, #16]
 800335e:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800336a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800336e:	d14b      	bne.n	8003408 <I2C_Master_ADDR+0x30c>
 8003370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003372:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003376:	d00b      	beq.n	8003390 <I2C_Master_ADDR+0x294>
 8003378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800337a:	2b01      	cmp	r3, #1
 800337c:	d008      	beq.n	8003390 <I2C_Master_ADDR+0x294>
 800337e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003380:	2b08      	cmp	r3, #8
 8003382:	d005      	beq.n	8003390 <I2C_Master_ADDR+0x294>
 8003384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003386:	2b10      	cmp	r3, #16
 8003388:	d002      	beq.n	8003390 <I2C_Master_ADDR+0x294>
 800338a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800338c:	2b20      	cmp	r3, #32
 800338e:	d13b      	bne.n	8003408 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	685a      	ldr	r2, [r3, #4]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800339e:	605a      	str	r2, [r3, #4]
 80033a0:	e032      	b.n	8003408 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033b0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033c0:	d117      	bne.n	80033f2 <I2C_Master_ADDR+0x2f6>
 80033c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033c8:	d00b      	beq.n	80033e2 <I2C_Master_ADDR+0x2e6>
 80033ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d008      	beq.n	80033e2 <I2C_Master_ADDR+0x2e6>
 80033d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033d2:	2b08      	cmp	r3, #8
 80033d4:	d005      	beq.n	80033e2 <I2C_Master_ADDR+0x2e6>
 80033d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033d8:	2b10      	cmp	r3, #16
 80033da:	d002      	beq.n	80033e2 <I2C_Master_ADDR+0x2e6>
 80033dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033de:	2b20      	cmp	r3, #32
 80033e0:	d107      	bne.n	80033f2 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	685a      	ldr	r2, [r3, #4]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80033f0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033f2:	2300      	movs	r3, #0
 80033f4:	60fb      	str	r3, [r7, #12]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	695b      	ldr	r3, [r3, #20]
 80033fc:	60fb      	str	r3, [r7, #12]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	60fb      	str	r3, [r7, #12]
 8003406:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800340e:	e00b      	b.n	8003428 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003410:	2300      	movs	r3, #0
 8003412:	60bb      	str	r3, [r7, #8]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	60bb      	str	r3, [r7, #8]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	60bb      	str	r3, [r7, #8]
 8003424:	68bb      	ldr	r3, [r7, #8]
}
 8003426:	e7ff      	b.n	8003428 <I2C_Master_ADDR+0x32c>
 8003428:	bf00      	nop
 800342a:	3744      	adds	r7, #68	; 0x44
 800342c:	46bd      	mov	sp, r7
 800342e:	bc80      	pop	{r7}
 8003430:	4770      	bx	lr

08003432 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003432:	b580      	push	{r7, lr}
 8003434:	b084      	sub	sp, #16
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003440:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003446:	b29b      	uxth	r3, r3
 8003448:	2b00      	cmp	r3, #0
 800344a:	d02b      	beq.n	80034a4 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003450:	781a      	ldrb	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345c:	1c5a      	adds	r2, r3, #1
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003466:	b29b      	uxth	r3, r3
 8003468:	3b01      	subs	r3, #1
 800346a:	b29a      	uxth	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003474:	b29b      	uxth	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d114      	bne.n	80034a4 <I2C_SlaveTransmit_TXE+0x72>
 800347a:	7bfb      	ldrb	r3, [r7, #15]
 800347c:	2b29      	cmp	r3, #41	; 0x29
 800347e:	d111      	bne.n	80034a4 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	685a      	ldr	r2, [r3, #4]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800348e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2221      	movs	r2, #33	; 0x21
 8003494:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2228      	movs	r2, #40	; 0x28
 800349a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f7ff f9e3 	bl	800286a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80034a4:	bf00      	nop
 80034a6:	3710      	adds	r7, #16
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d011      	beq.n	80034e2 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c2:	781a      	ldrb	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ce:	1c5a      	adds	r2, r3, #1
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d8:	b29b      	uxth	r3, r3
 80034da:	3b01      	subs	r3, #1
 80034dc:	b29a      	uxth	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80034e2:	bf00      	nop
 80034e4:	370c      	adds	r7, #12
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bc80      	pop	{r7}
 80034ea:	4770      	bx	lr

080034ec <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034fa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003500:	b29b      	uxth	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d02c      	beq.n	8003560 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	691a      	ldr	r2, [r3, #16]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003510:	b2d2      	uxtb	r2, r2
 8003512:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003518:	1c5a      	adds	r2, r3, #1
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003522:	b29b      	uxth	r3, r3
 8003524:	3b01      	subs	r3, #1
 8003526:	b29a      	uxth	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003530:	b29b      	uxth	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d114      	bne.n	8003560 <I2C_SlaveReceive_RXNE+0x74>
 8003536:	7bfb      	ldrb	r3, [r7, #15]
 8003538:	2b2a      	cmp	r3, #42	; 0x2a
 800353a:	d111      	bne.n	8003560 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	685a      	ldr	r2, [r3, #4]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800354a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2222      	movs	r2, #34	; 0x22
 8003550:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2228      	movs	r2, #40	; 0x28
 8003556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f7ff f98e 	bl	800287c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003560:	bf00      	nop
 8003562:	3710      	adds	r7, #16
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003574:	b29b      	uxth	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d012      	beq.n	80035a0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	691a      	ldr	r2, [r3, #16]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003584:	b2d2      	uxtb	r2, r2
 8003586:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358c:	1c5a      	adds	r2, r3, #1
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003596:	b29b      	uxth	r3, r3
 8003598:	3b01      	subs	r3, #1
 800359a:	b29a      	uxth	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80035a0:	bf00      	nop
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bc80      	pop	{r7}
 80035a8:	4770      	bx	lr

080035aa <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b084      	sub	sp, #16
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
 80035b2:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80035b4:	2300      	movs	r3, #0
 80035b6:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80035c4:	2b28      	cmp	r3, #40	; 0x28
 80035c6:	d127      	bne.n	8003618 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	685a      	ldr	r2, [r3, #4]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035d6:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	089b      	lsrs	r3, r3, #2
 80035dc:	f003 0301 	and.w	r3, r3, #1
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d101      	bne.n	80035e8 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80035e4:	2301      	movs	r3, #1
 80035e6:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	09db      	lsrs	r3, r3, #7
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d103      	bne.n	80035fc <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	81bb      	strh	r3, [r7, #12]
 80035fa:	e002      	b.n	8003602 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800360a:	89ba      	ldrh	r2, [r7, #12]
 800360c:	7bfb      	ldrb	r3, [r7, #15]
 800360e:	4619      	mov	r1, r3
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f7ff f93c 	bl	800288e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003616:	e00e      	b.n	8003636 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003618:	2300      	movs	r3, #0
 800361a:	60bb      	str	r3, [r7, #8]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	60bb      	str	r3, [r7, #8]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	60bb      	str	r3, [r7, #8]
 800362c:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003636:	bf00      	nop
 8003638:	3710      	adds	r7, #16
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
	...

08003640 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800364e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	685a      	ldr	r2, [r3, #4]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800365e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003660:	2300      	movs	r3, #0
 8003662:	60bb      	str	r3, [r7, #8]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	60bb      	str	r3, [r7, #8]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f042 0201 	orr.w	r2, r2, #1
 800367a:	601a      	str	r2, [r3, #0]
 800367c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800368c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003698:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800369c:	d172      	bne.n	8003784 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800369e:	7bfb      	ldrb	r3, [r7, #15]
 80036a0:	2b22      	cmp	r3, #34	; 0x22
 80036a2:	d002      	beq.n	80036aa <I2C_Slave_STOPF+0x6a>
 80036a4:	7bfb      	ldrb	r3, [r7, #15]
 80036a6:	2b2a      	cmp	r3, #42	; 0x2a
 80036a8:	d135      	bne.n	8003716 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036bc:	b29b      	uxth	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d005      	beq.n	80036ce <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c6:	f043 0204 	orr.w	r2, r3, #4
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	685a      	ldr	r2, [r3, #4]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036dc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e2:	4618      	mov	r0, r3
 80036e4:	f7fd ff60 	bl	80015a8 <HAL_DMA_GetState>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d049      	beq.n	8003782 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f2:	4a69      	ldr	r2, [pc, #420]	; (8003898 <I2C_Slave_STOPF+0x258>)
 80036f4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7fd fdd6 	bl	80012ac <HAL_DMA_Abort_IT>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d03d      	beq.n	8003782 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003710:	4610      	mov	r0, r2
 8003712:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003714:	e035      	b.n	8003782 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	b29a      	uxth	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003728:	b29b      	uxth	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d005      	beq.n	800373a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003732:	f043 0204 	orr.w	r2, r3, #4
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	685a      	ldr	r2, [r3, #4]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003748:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800374e:	4618      	mov	r0, r3
 8003750:	f7fd ff2a 	bl	80015a8 <HAL_DMA_GetState>
 8003754:	4603      	mov	r3, r0
 8003756:	2b01      	cmp	r3, #1
 8003758:	d014      	beq.n	8003784 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800375e:	4a4e      	ldr	r2, [pc, #312]	; (8003898 <I2C_Slave_STOPF+0x258>)
 8003760:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003766:	4618      	mov	r0, r3
 8003768:	f7fd fda0 	bl	80012ac <HAL_DMA_Abort_IT>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d008      	beq.n	8003784 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800377c:	4610      	mov	r0, r2
 800377e:	4798      	blx	r3
 8003780:	e000      	b.n	8003784 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003782:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003788:	b29b      	uxth	r3, r3
 800378a:	2b00      	cmp	r3, #0
 800378c:	d03e      	beq.n	800380c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	695b      	ldr	r3, [r3, #20]
 8003794:	f003 0304 	and.w	r3, r3, #4
 8003798:	2b04      	cmp	r3, #4
 800379a:	d112      	bne.n	80037c2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	691a      	ldr	r2, [r3, #16]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a6:	b2d2      	uxtb	r2, r2
 80037a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ae:	1c5a      	adds	r2, r3, #1
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	3b01      	subs	r3, #1
 80037bc:	b29a      	uxth	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	695b      	ldr	r3, [r3, #20]
 80037c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037cc:	2b40      	cmp	r3, #64	; 0x40
 80037ce:	d112      	bne.n	80037f6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	691a      	ldr	r2, [r3, #16]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037da:	b2d2      	uxtb	r2, r2
 80037dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e2:	1c5a      	adds	r2, r3, #1
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	3b01      	subs	r3, #1
 80037f0:	b29a      	uxth	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d005      	beq.n	800380c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003804:	f043 0204 	orr.w	r2, r3, #4
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003810:	2b00      	cmp	r3, #0
 8003812:	d003      	beq.n	800381c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 f843 	bl	80038a0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800381a:	e039      	b.n	8003890 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800381c:	7bfb      	ldrb	r3, [r7, #15]
 800381e:	2b2a      	cmp	r3, #42	; 0x2a
 8003820:	d109      	bne.n	8003836 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2228      	movs	r2, #40	; 0x28
 800382c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f7ff f823 	bl	800287c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b28      	cmp	r3, #40	; 0x28
 8003840:	d111      	bne.n	8003866 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a15      	ldr	r2, [pc, #84]	; (800389c <I2C_Slave_STOPF+0x25c>)
 8003846:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2220      	movs	r2, #32
 8003852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f7ff f822 	bl	80028a8 <HAL_I2C_ListenCpltCallback>
}
 8003864:	e014      	b.n	8003890 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386a:	2b22      	cmp	r3, #34	; 0x22
 800386c:	d002      	beq.n	8003874 <I2C_Slave_STOPF+0x234>
 800386e:	7bfb      	ldrb	r3, [r7, #15]
 8003870:	2b22      	cmp	r3, #34	; 0x22
 8003872:	d10d      	bne.n	8003890 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2220      	movs	r2, #32
 800387e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f7fe fff6 	bl	800287c <HAL_I2C_SlaveRxCpltCallback>
}
 8003890:	bf00      	nop
 8003892:	3710      	adds	r7, #16
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	08003e01 	.word	0x08003e01
 800389c:	ffff0000 	.word	0xffff0000

080038a0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038ae:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038b6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80038b8:	7bbb      	ldrb	r3, [r7, #14]
 80038ba:	2b10      	cmp	r3, #16
 80038bc:	d002      	beq.n	80038c4 <I2C_ITError+0x24>
 80038be:	7bbb      	ldrb	r3, [r7, #14]
 80038c0:	2b40      	cmp	r3, #64	; 0x40
 80038c2:	d10a      	bne.n	80038da <I2C_ITError+0x3a>
 80038c4:	7bfb      	ldrb	r3, [r7, #15]
 80038c6:	2b22      	cmp	r3, #34	; 0x22
 80038c8:	d107      	bne.n	80038da <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038d8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80038da:	7bfb      	ldrb	r3, [r7, #15]
 80038dc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80038e0:	2b28      	cmp	r3, #40	; 0x28
 80038e2:	d107      	bne.n	80038f4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2228      	movs	r2, #40	; 0x28
 80038ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80038f2:	e015      	b.n	8003920 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003902:	d00a      	beq.n	800391a <I2C_ITError+0x7a>
 8003904:	7bfb      	ldrb	r3, [r7, #15]
 8003906:	2b60      	cmp	r3, #96	; 0x60
 8003908:	d007      	beq.n	800391a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2220      	movs	r2, #32
 800390e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800392a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800392e:	d162      	bne.n	80039f6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	685a      	ldr	r2, [r3, #4]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800393e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003944:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b01      	cmp	r3, #1
 800394c:	d020      	beq.n	8003990 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003952:	4a6a      	ldr	r2, [pc, #424]	; (8003afc <I2C_ITError+0x25c>)
 8003954:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800395a:	4618      	mov	r0, r3
 800395c:	f7fd fca6 	bl	80012ac <HAL_DMA_Abort_IT>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	f000 8089 	beq.w	8003a7a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f022 0201 	bic.w	r2, r2, #1
 8003976:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2220      	movs	r2, #32
 800397c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800398a:	4610      	mov	r0, r2
 800398c:	4798      	blx	r3
 800398e:	e074      	b.n	8003a7a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003994:	4a59      	ldr	r2, [pc, #356]	; (8003afc <I2C_ITError+0x25c>)
 8003996:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399c:	4618      	mov	r0, r3
 800399e:	f7fd fc85 	bl	80012ac <HAL_DMA_Abort_IT>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d068      	beq.n	8003a7a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b2:	2b40      	cmp	r3, #64	; 0x40
 80039b4:	d10b      	bne.n	80039ce <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	691a      	ldr	r2, [r3, #16]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c0:	b2d2      	uxtb	r2, r2
 80039c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c8:	1c5a      	adds	r2, r3, #1
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f022 0201 	bic.w	r2, r2, #1
 80039dc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2220      	movs	r2, #32
 80039e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80039f0:	4610      	mov	r0, r2
 80039f2:	4798      	blx	r3
 80039f4:	e041      	b.n	8003a7a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	2b60      	cmp	r3, #96	; 0x60
 8003a00:	d125      	bne.n	8003a4e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2220      	movs	r2, #32
 8003a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a1a:	2b40      	cmp	r3, #64	; 0x40
 8003a1c:	d10b      	bne.n	8003a36 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	691a      	ldr	r2, [r3, #16]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a28:	b2d2      	uxtb	r2, r2
 8003a2a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a30:	1c5a      	adds	r2, r3, #1
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f022 0201 	bic.w	r2, r2, #1
 8003a44:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f7fe ff52 	bl	80028f0 <HAL_I2C_AbortCpltCallback>
 8003a4c:	e015      	b.n	8003a7a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	695b      	ldr	r3, [r3, #20]
 8003a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a58:	2b40      	cmp	r3, #64	; 0x40
 8003a5a:	d10b      	bne.n	8003a74 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	691a      	ldr	r2, [r3, #16]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a66:	b2d2      	uxtb	r2, r2
 8003a68:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6e:	1c5a      	adds	r2, r3, #1
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f7fe ff32 	bl	80028de <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d10e      	bne.n	8003aa8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d109      	bne.n	8003aa8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d104      	bne.n	8003aa8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d007      	beq.n	8003ab8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	685a      	ldr	r2, [r3, #4]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ab6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003abe:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac4:	f003 0304 	and.w	r3, r3, #4
 8003ac8:	2b04      	cmp	r3, #4
 8003aca:	d113      	bne.n	8003af4 <I2C_ITError+0x254>
 8003acc:	7bfb      	ldrb	r3, [r7, #15]
 8003ace:	2b28      	cmp	r3, #40	; 0x28
 8003ad0:	d110      	bne.n	8003af4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a0a      	ldr	r2, [pc, #40]	; (8003b00 <I2C_ITError+0x260>)
 8003ad6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2220      	movs	r2, #32
 8003ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f7fe feda 	bl	80028a8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003af4:	bf00      	nop
 8003af6:	3710      	adds	r7, #16
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	08003e01 	.word	0x08003e01
 8003b00:	ffff0000 	.word	0xffff0000

08003b04 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b088      	sub	sp, #32
 8003b08:	af02      	add	r7, sp, #8
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	4608      	mov	r0, r1
 8003b0e:	4611      	mov	r1, r2
 8003b10:	461a      	mov	r2, r3
 8003b12:	4603      	mov	r3, r0
 8003b14:	817b      	strh	r3, [r7, #10]
 8003b16:	460b      	mov	r3, r1
 8003b18:	813b      	strh	r3, [r7, #8]
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b2c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b30:	9300      	str	r3, [sp, #0]
 8003b32:	6a3b      	ldr	r3, [r7, #32]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b3a:	68f8      	ldr	r0, [r7, #12]
 8003b3c:	f000 fa08 	bl	8003f50 <I2C_WaitOnFlagUntilTimeout>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00d      	beq.n	8003b62 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b54:	d103      	bne.n	8003b5e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b5c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e05f      	b.n	8003c22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b62:	897b      	ldrh	r3, [r7, #10]
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	461a      	mov	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b70:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b74:	6a3a      	ldr	r2, [r7, #32]
 8003b76:	492d      	ldr	r1, [pc, #180]	; (8003c2c <I2C_RequestMemoryWrite+0x128>)
 8003b78:	68f8      	ldr	r0, [r7, #12]
 8003b7a:	f000 fa63 	bl	8004044 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d001      	beq.n	8003b88 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e04c      	b.n	8003c22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b88:	2300      	movs	r3, #0
 8003b8a:	617b      	str	r3, [r7, #20]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	617b      	str	r3, [r7, #20]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	617b      	str	r3, [r7, #20]
 8003b9c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ba0:	6a39      	ldr	r1, [r7, #32]
 8003ba2:	68f8      	ldr	r0, [r7, #12]
 8003ba4:	f000 faee 	bl	8004184 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00d      	beq.n	8003bca <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb2:	2b04      	cmp	r3, #4
 8003bb4:	d107      	bne.n	8003bc6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bc4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e02b      	b.n	8003c22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003bca:	88fb      	ldrh	r3, [r7, #6]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d105      	bne.n	8003bdc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003bd0:	893b      	ldrh	r3, [r7, #8]
 8003bd2:	b2da      	uxtb	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	611a      	str	r2, [r3, #16]
 8003bda:	e021      	b.n	8003c20 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003bdc:	893b      	ldrh	r3, [r7, #8]
 8003bde:	0a1b      	lsrs	r3, r3, #8
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	b2da      	uxtb	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bec:	6a39      	ldr	r1, [r7, #32]
 8003bee:	68f8      	ldr	r0, [r7, #12]
 8003bf0:	f000 fac8 	bl	8004184 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00d      	beq.n	8003c16 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfe:	2b04      	cmp	r3, #4
 8003c00:	d107      	bne.n	8003c12 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c10:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e005      	b.n	8003c22 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c16:	893b      	ldrh	r3, [r7, #8]
 8003c18:	b2da      	uxtb	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3718      	adds	r7, #24
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	00010002 	.word	0x00010002

08003c30 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b088      	sub	sp, #32
 8003c34:	af02      	add	r7, sp, #8
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	4608      	mov	r0, r1
 8003c3a:	4611      	mov	r1, r2
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	4603      	mov	r3, r0
 8003c40:	817b      	strh	r3, [r7, #10]
 8003c42:	460b      	mov	r3, r1
 8003c44:	813b      	strh	r3, [r7, #8]
 8003c46:	4613      	mov	r3, r2
 8003c48:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c58:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c68:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6c:	9300      	str	r3, [sp, #0]
 8003c6e:	6a3b      	ldr	r3, [r7, #32]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c76:	68f8      	ldr	r0, [r7, #12]
 8003c78:	f000 f96a 	bl	8003f50 <I2C_WaitOnFlagUntilTimeout>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00d      	beq.n	8003c9e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c90:	d103      	bne.n	8003c9a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c98:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e0aa      	b.n	8003df4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c9e:	897b      	ldrh	r3, [r7, #10]
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003cac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb0:	6a3a      	ldr	r2, [r7, #32]
 8003cb2:	4952      	ldr	r1, [pc, #328]	; (8003dfc <I2C_RequestMemoryRead+0x1cc>)
 8003cb4:	68f8      	ldr	r0, [r7, #12]
 8003cb6:	f000 f9c5 	bl	8004044 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d001      	beq.n	8003cc4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e097      	b.n	8003df4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	617b      	str	r3, [r7, #20]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	617b      	str	r3, [r7, #20]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	617b      	str	r3, [r7, #20]
 8003cd8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cdc:	6a39      	ldr	r1, [r7, #32]
 8003cde:	68f8      	ldr	r0, [r7, #12]
 8003ce0:	f000 fa50 	bl	8004184 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d00d      	beq.n	8003d06 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cee:	2b04      	cmp	r3, #4
 8003cf0:	d107      	bne.n	8003d02 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d00:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e076      	b.n	8003df4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d06:	88fb      	ldrh	r3, [r7, #6]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d105      	bne.n	8003d18 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d0c:	893b      	ldrh	r3, [r7, #8]
 8003d0e:	b2da      	uxtb	r2, r3
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	611a      	str	r2, [r3, #16]
 8003d16:	e021      	b.n	8003d5c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d18:	893b      	ldrh	r3, [r7, #8]
 8003d1a:	0a1b      	lsrs	r3, r3, #8
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	b2da      	uxtb	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d28:	6a39      	ldr	r1, [r7, #32]
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	f000 fa2a 	bl	8004184 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00d      	beq.n	8003d52 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3a:	2b04      	cmp	r3, #4
 8003d3c:	d107      	bne.n	8003d4e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d4c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e050      	b.n	8003df4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d52:	893b      	ldrh	r3, [r7, #8]
 8003d54:	b2da      	uxtb	r2, r3
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d5e:	6a39      	ldr	r1, [r7, #32]
 8003d60:	68f8      	ldr	r0, [r7, #12]
 8003d62:	f000 fa0f 	bl	8004184 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00d      	beq.n	8003d88 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d70:	2b04      	cmp	r3, #4
 8003d72:	d107      	bne.n	8003d84 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d82:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e035      	b.n	8003df4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d96:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9a:	9300      	str	r3, [sp, #0]
 8003d9c:	6a3b      	ldr	r3, [r7, #32]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003da4:	68f8      	ldr	r0, [r7, #12]
 8003da6:	f000 f8d3 	bl	8003f50 <I2C_WaitOnFlagUntilTimeout>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d00d      	beq.n	8003dcc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dbe:	d103      	bne.n	8003dc8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dc6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e013      	b.n	8003df4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003dcc:	897b      	ldrh	r3, [r7, #10]
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	f043 0301 	orr.w	r3, r3, #1
 8003dd4:	b2da      	uxtb	r2, r3
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dde:	6a3a      	ldr	r2, [r7, #32]
 8003de0:	4906      	ldr	r1, [pc, #24]	; (8003dfc <I2C_RequestMemoryRead+0x1cc>)
 8003de2:	68f8      	ldr	r0, [r7, #12]
 8003de4:	f000 f92e 	bl	8004044 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d001      	beq.n	8003df2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e000      	b.n	8003df4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3718      	adds	r7, #24
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	00010002 	.word	0x00010002

08003e00 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b086      	sub	sp, #24
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e10:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e18:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003e1a:	4b4b      	ldr	r3, [pc, #300]	; (8003f48 <I2C_DMAAbort+0x148>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	08db      	lsrs	r3, r3, #3
 8003e20:	4a4a      	ldr	r2, [pc, #296]	; (8003f4c <I2C_DMAAbort+0x14c>)
 8003e22:	fba2 2303 	umull	r2, r3, r2, r3
 8003e26:	0a1a      	lsrs	r2, r3, #8
 8003e28:	4613      	mov	r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	4413      	add	r3, r2
 8003e2e:	00da      	lsls	r2, r3, #3
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d106      	bne.n	8003e48 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3e:	f043 0220 	orr.w	r2, r3, #32
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003e46:	e00a      	b.n	8003e5e <I2C_DMAAbort+0x5e>
    }
    count--;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e5c:	d0ea      	beq.n	8003e34 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d003      	beq.n	8003e6e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d003      	beq.n	8003e7e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e8c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	2200      	movs	r2, #0
 8003e92:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d003      	beq.n	8003ea4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d003      	beq.n	8003eb4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f022 0201 	bic.w	r2, r2, #1
 8003ec2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	2b60      	cmp	r3, #96	; 0x60
 8003ece:	d10e      	bne.n	8003eee <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003ee6:	6978      	ldr	r0, [r7, #20]
 8003ee8:	f7fe fd02 	bl	80028f0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003eec:	e027      	b.n	8003f3e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003eee:	7cfb      	ldrb	r3, [r7, #19]
 8003ef0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ef4:	2b28      	cmp	r3, #40	; 0x28
 8003ef6:	d117      	bne.n	8003f28 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f042 0201 	orr.w	r2, r2, #1
 8003f06:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f16:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	2228      	movs	r2, #40	; 0x28
 8003f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003f26:	e007      	b.n	8003f38 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	2220      	movs	r2, #32
 8003f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003f38:	6978      	ldr	r0, [r7, #20]
 8003f3a:	f7fe fcd0 	bl	80028de <HAL_I2C_ErrorCallback>
}
 8003f3e:	bf00      	nop
 8003f40:	3718      	adds	r7, #24
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	20000000 	.word	0x20000000
 8003f4c:	14f8b589 	.word	0x14f8b589

08003f50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	603b      	str	r3, [r7, #0]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f60:	e048      	b.n	8003ff4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f68:	d044      	beq.n	8003ff4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f6a:	f7fc ffcd 	bl	8000f08 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	683a      	ldr	r2, [r7, #0]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d302      	bcc.n	8003f80 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d139      	bne.n	8003ff4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	0c1b      	lsrs	r3, r3, #16
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d10d      	bne.n	8003fa6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	695b      	ldr	r3, [r3, #20]
 8003f90:	43da      	mvns	r2, r3
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	4013      	ands	r3, r2
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	bf0c      	ite	eq
 8003f9c:	2301      	moveq	r3, #1
 8003f9e:	2300      	movne	r3, #0
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	e00c      	b.n	8003fc0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	699b      	ldr	r3, [r3, #24]
 8003fac:	43da      	mvns	r2, r3
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	bf0c      	ite	eq
 8003fb8:	2301      	moveq	r3, #1
 8003fba:	2300      	movne	r3, #0
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	79fb      	ldrb	r3, [r7, #7]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d116      	bne.n	8003ff4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2220      	movs	r2, #32
 8003fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe0:	f043 0220 	orr.w	r2, r3, #32
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e023      	b.n	800403c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	0c1b      	lsrs	r3, r3, #16
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d10d      	bne.n	800401a <I2C_WaitOnFlagUntilTimeout+0xca>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	695b      	ldr	r3, [r3, #20]
 8004004:	43da      	mvns	r2, r3
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	4013      	ands	r3, r2
 800400a:	b29b      	uxth	r3, r3
 800400c:	2b00      	cmp	r3, #0
 800400e:	bf0c      	ite	eq
 8004010:	2301      	moveq	r3, #1
 8004012:	2300      	movne	r3, #0
 8004014:	b2db      	uxtb	r3, r3
 8004016:	461a      	mov	r2, r3
 8004018:	e00c      	b.n	8004034 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	43da      	mvns	r2, r3
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	4013      	ands	r3, r2
 8004026:	b29b      	uxth	r3, r3
 8004028:	2b00      	cmp	r3, #0
 800402a:	bf0c      	ite	eq
 800402c:	2301      	moveq	r3, #1
 800402e:	2300      	movne	r3, #0
 8004030:	b2db      	uxtb	r3, r3
 8004032:	461a      	mov	r2, r3
 8004034:	79fb      	ldrb	r3, [r7, #7]
 8004036:	429a      	cmp	r2, r3
 8004038:	d093      	beq.n	8003f62 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3710      	adds	r7, #16
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	607a      	str	r2, [r7, #4]
 8004050:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004052:	e071      	b.n	8004138 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800405e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004062:	d123      	bne.n	80040ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004072:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800407c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2220      	movs	r2, #32
 8004088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004098:	f043 0204 	orr.w	r2, r3, #4
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e067      	b.n	800417c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b2:	d041      	beq.n	8004138 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040b4:	f7fc ff28 	bl	8000f08 <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d302      	bcc.n	80040ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d136      	bne.n	8004138 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	0c1b      	lsrs	r3, r3, #16
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d10c      	bne.n	80040ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	43da      	mvns	r2, r3
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	4013      	ands	r3, r2
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	bf14      	ite	ne
 80040e6:	2301      	movne	r3, #1
 80040e8:	2300      	moveq	r3, #0
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	e00b      	b.n	8004106 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	699b      	ldr	r3, [r3, #24]
 80040f4:	43da      	mvns	r2, r3
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	4013      	ands	r3, r2
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	bf14      	ite	ne
 8004100:	2301      	movne	r3, #1
 8004102:	2300      	moveq	r3, #0
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b00      	cmp	r3, #0
 8004108:	d016      	beq.n	8004138 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2200      	movs	r2, #0
 800410e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2220      	movs	r2, #32
 8004114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2200      	movs	r2, #0
 800411c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004124:	f043 0220 	orr.w	r2, r3, #32
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2200      	movs	r2, #0
 8004130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e021      	b.n	800417c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	0c1b      	lsrs	r3, r3, #16
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b01      	cmp	r3, #1
 8004140:	d10c      	bne.n	800415c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	695b      	ldr	r3, [r3, #20]
 8004148:	43da      	mvns	r2, r3
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	4013      	ands	r3, r2
 800414e:	b29b      	uxth	r3, r3
 8004150:	2b00      	cmp	r3, #0
 8004152:	bf14      	ite	ne
 8004154:	2301      	movne	r3, #1
 8004156:	2300      	moveq	r3, #0
 8004158:	b2db      	uxtb	r3, r3
 800415a:	e00b      	b.n	8004174 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	43da      	mvns	r2, r3
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	4013      	ands	r3, r2
 8004168:	b29b      	uxth	r3, r3
 800416a:	2b00      	cmp	r3, #0
 800416c:	bf14      	ite	ne
 800416e:	2301      	movne	r3, #1
 8004170:	2300      	moveq	r3, #0
 8004172:	b2db      	uxtb	r3, r3
 8004174:	2b00      	cmp	r3, #0
 8004176:	f47f af6d 	bne.w	8004054 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	3710      	adds	r7, #16
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004190:	e034      	b.n	80041fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004192:	68f8      	ldr	r0, [r7, #12]
 8004194:	f000 f915 	bl	80043c2 <I2C_IsAcknowledgeFailed>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d001      	beq.n	80041a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e034      	b.n	800420c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a8:	d028      	beq.n	80041fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041aa:	f7fc fead 	bl	8000f08 <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	68ba      	ldr	r2, [r7, #8]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d302      	bcc.n	80041c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d11d      	bne.n	80041fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ca:	2b80      	cmp	r3, #128	; 0x80
 80041cc:	d016      	beq.n	80041fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2200      	movs	r2, #0
 80041d2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2220      	movs	r2, #32
 80041d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e8:	f043 0220 	orr.w	r2, r3, #32
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e007      	b.n	800420c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004206:	2b80      	cmp	r3, #128	; 0x80
 8004208:	d1c3      	bne.n	8004192 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3710      	adds	r7, #16
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004220:	e034      	b.n	800428c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004222:	68f8      	ldr	r0, [r7, #12]
 8004224:	f000 f8cd 	bl	80043c2 <I2C_IsAcknowledgeFailed>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e034      	b.n	800429c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004238:	d028      	beq.n	800428c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800423a:	f7fc fe65 	bl	8000f08 <HAL_GetTick>
 800423e:	4602      	mov	r2, r0
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	68ba      	ldr	r2, [r7, #8]
 8004246:	429a      	cmp	r2, r3
 8004248:	d302      	bcc.n	8004250 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d11d      	bne.n	800428c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	f003 0304 	and.w	r3, r3, #4
 800425a:	2b04      	cmp	r3, #4
 800425c:	d016      	beq.n	800428c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2220      	movs	r2, #32
 8004268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004278:	f043 0220 	orr.w	r2, r3, #32
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e007      	b.n	800429c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	f003 0304 	and.w	r3, r3, #4
 8004296:	2b04      	cmp	r3, #4
 8004298:	d1c3      	bne.n	8004222 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	3710      	adds	r7, #16
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80042ac:	2300      	movs	r3, #0
 80042ae:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80042b0:	4b13      	ldr	r3, [pc, #76]	; (8004300 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	08db      	lsrs	r3, r3, #3
 80042b6:	4a13      	ldr	r2, [pc, #76]	; (8004304 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80042b8:	fba2 2303 	umull	r2, r3, r2, r3
 80042bc:	0a1a      	lsrs	r2, r3, #8
 80042be:	4613      	mov	r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	4413      	add	r3, r2
 80042c4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	3b01      	subs	r3, #1
 80042ca:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d107      	bne.n	80042e2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d6:	f043 0220 	orr.w	r2, r3, #32
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e008      	b.n	80042f4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042f0:	d0e9      	beq.n	80042c6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3714      	adds	r7, #20
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bc80      	pop	{r7}
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	20000000 	.word	0x20000000
 8004304:	14f8b589 	.word	0x14f8b589

08004308 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004314:	e049      	b.n	80043aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	695b      	ldr	r3, [r3, #20]
 800431c:	f003 0310 	and.w	r3, r3, #16
 8004320:	2b10      	cmp	r3, #16
 8004322:	d119      	bne.n	8004358 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f06f 0210 	mvn.w	r2, #16
 800432c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2220      	movs	r2, #32
 8004338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e030      	b.n	80043ba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004358:	f7fc fdd6 	bl	8000f08 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	68ba      	ldr	r2, [r7, #8]
 8004364:	429a      	cmp	r2, r3
 8004366:	d302      	bcc.n	800436e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d11d      	bne.n	80043aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	695b      	ldr	r3, [r3, #20]
 8004374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004378:	2b40      	cmp	r3, #64	; 0x40
 800437a:	d016      	beq.n	80043aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2200      	movs	r2, #0
 8004380:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2220      	movs	r2, #32
 8004386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004396:	f043 0220 	orr.w	r2, r3, #32
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e007      	b.n	80043ba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	695b      	ldr	r3, [r3, #20]
 80043b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b4:	2b40      	cmp	r3, #64	; 0x40
 80043b6:	d1ae      	bne.n	8004316 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3710      	adds	r7, #16
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}

080043c2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80043c2:	b480      	push	{r7}
 80043c4:	b083      	sub	sp, #12
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	695b      	ldr	r3, [r3, #20]
 80043d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043d8:	d11b      	bne.n	8004412 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043e2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2220      	movs	r2, #32
 80043ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	f043 0204 	orr.w	r2, r3, #4
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e000      	b.n	8004414 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	bc80      	pop	{r7}
 800441c:	4770      	bx	lr

0800441e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800441e:	b480      	push	{r7}
 8004420:	b083      	sub	sp, #12
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800442e:	d103      	bne.n	8004438 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004436:	e007      	b.n	8004448 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004440:	d102      	bne.n	8004448 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2208      	movs	r2, #8
 8004446:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004448:	bf00      	nop
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	bc80      	pop	{r7}
 8004450:	4770      	bx	lr
	...

08004454 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b086      	sub	sp, #24
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d101      	bne.n	8004466 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e272      	b.n	800494c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	2b00      	cmp	r3, #0
 8004470:	f000 8087 	beq.w	8004582 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004474:	4b92      	ldr	r3, [pc, #584]	; (80046c0 <HAL_RCC_OscConfig+0x26c>)
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f003 030c 	and.w	r3, r3, #12
 800447c:	2b04      	cmp	r3, #4
 800447e:	d00c      	beq.n	800449a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004480:	4b8f      	ldr	r3, [pc, #572]	; (80046c0 <HAL_RCC_OscConfig+0x26c>)
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f003 030c 	and.w	r3, r3, #12
 8004488:	2b08      	cmp	r3, #8
 800448a:	d112      	bne.n	80044b2 <HAL_RCC_OscConfig+0x5e>
 800448c:	4b8c      	ldr	r3, [pc, #560]	; (80046c0 <HAL_RCC_OscConfig+0x26c>)
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004498:	d10b      	bne.n	80044b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800449a:	4b89      	ldr	r3, [pc, #548]	; (80046c0 <HAL_RCC_OscConfig+0x26c>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d06c      	beq.n	8004580 <HAL_RCC_OscConfig+0x12c>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d168      	bne.n	8004580 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e24c      	b.n	800494c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044ba:	d106      	bne.n	80044ca <HAL_RCC_OscConfig+0x76>
 80044bc:	4b80      	ldr	r3, [pc, #512]	; (80046c0 <HAL_RCC_OscConfig+0x26c>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a7f      	ldr	r2, [pc, #508]	; (80046c0 <HAL_RCC_OscConfig+0x26c>)
 80044c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044c6:	6013      	str	r3, [r2, #0]
 80044c8:	e02e      	b.n	8004528 <HAL_RCC_OscConfig+0xd4>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d10c      	bne.n	80044ec <HAL_RCC_OscConfig+0x98>
 80044d2:	4b7b      	ldr	r3, [pc, #492]	; (80046c0 <HAL_RCC_OscConfig+0x26c>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a7a      	ldr	r2, [pc, #488]	; (80046c0 <HAL_RCC_OscConfig+0x26c>)
 80044d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044dc:	6013      	str	r3, [r2, #0]
 80044de:	4b78      	ldr	r3, [pc, #480]	; (80046c0 <HAL_RCC_OscConfig+0x26c>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a77      	ldr	r2, [pc, #476]	; (80046c0 <HAL_RCC_OscConfig+0x26c>)
 80044e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044e8:	6013      	str	r3, [r2, #0]
 80044ea:	e01d      	b.n	8004528 <HAL_RCC_OscConfig+0xd4>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044f4:	d10c      	bne.n	8004510 <HAL_RCC_OscConfig+0xbc>
 80044f6:	4b72      	ldr	r3, [pc, #456]	; (80046c0 <HAL_RCC_OscConfig+0x26c>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a71      	ldr	r2, [pc, #452]	; (80046c0 <HAL_RCC_OscConfig+0x26c>)
 80044fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004500:	6013      	str	r3, [r2, #0]
 8004502:	4b6f      	ldr	r3, [pc, #444]	; (80046c0 <HAL_RCC_OscConfig+0x26c>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a6e      	ldr	r2, [pc, #440]	; (80046c0 <HAL_RCC_OscConfig+0x26c>)
 8004508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800450c:	6013      	str	r3, [r2, #0]
 800450e:	e00b      	b.n	8004528 <HAL_RCC_OscConfig+0xd4>
 8004510:	4b6b      	ldr	r3, [pc, #428]	; (80046c0 <HAL_RCC_OscConfig+0x26c>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a6a      	ldr	r2, [pc, #424]	; (80046c0 <HAL_RCC_OscConfig+0x26c>)
 8004516:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800451a:	6013      	str	r3, [r2, #0]
 800451c:	4b68      	ldr	r3, [pc, #416]	; (80046c0 <HAL_RCC_OscConfig+0x26c>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a67      	ldr	r2, [pc, #412]	; (80046c0 <HAL_RCC_OscConfig+0x26c>)
 8004522:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004526:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d013      	beq.n	8004558 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004530:	f7fc fcea 	bl	8000f08 <HAL_GetTick>
 8004534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004536:	e008      	b.n	800454a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004538:	f7fc fce6 	bl	8000f08 <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	2b64      	cmp	r3, #100	; 0x64
 8004544:	d901      	bls.n	800454a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e200      	b.n	800494c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800454a:	4b5d      	ldr	r3, [pc, #372]	; (80046c0 <HAL_RCC_OscConfig+0x26c>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d0f0      	beq.n	8004538 <HAL_RCC_OscConfig+0xe4>
 8004556:	e014      	b.n	8004582 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004558:	f7fc fcd6 	bl	8000f08 <HAL_GetTick>
 800455c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800455e:	e008      	b.n	8004572 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004560:	f7fc fcd2 	bl	8000f08 <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	2b64      	cmp	r3, #100	; 0x64
 800456c:	d901      	bls.n	8004572 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e1ec      	b.n	800494c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004572:	4b53      	ldr	r3, [pc, #332]	; (80046c0 <HAL_RCC_OscConfig+0x26c>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1f0      	bne.n	8004560 <HAL_RCC_OscConfig+0x10c>
 800457e:	e000      	b.n	8004582 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004580:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b00      	cmp	r3, #0
 800458c:	d063      	beq.n	8004656 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800458e:	4b4c      	ldr	r3, [pc, #304]	; (80046c0 <HAL_RCC_OscConfig+0x26c>)
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f003 030c 	and.w	r3, r3, #12
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00b      	beq.n	80045b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800459a:	4b49      	ldr	r3, [pc, #292]	; (80046c0 <HAL_RCC_OscConfig+0x26c>)
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f003 030c 	and.w	r3, r3, #12
 80045a2:	2b08      	cmp	r3, #8
 80045a4:	d11c      	bne.n	80045e0 <HAL_RCC_OscConfig+0x18c>
 80045a6:	4b46      	ldr	r3, [pc, #280]	; (80046c0 <HAL_RCC_OscConfig+0x26c>)
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d116      	bne.n	80045e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045b2:	4b43      	ldr	r3, [pc, #268]	; (80046c0 <HAL_RCC_OscConfig+0x26c>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d005      	beq.n	80045ca <HAL_RCC_OscConfig+0x176>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d001      	beq.n	80045ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e1c0      	b.n	800494c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ca:	4b3d      	ldr	r3, [pc, #244]	; (80046c0 <HAL_RCC_OscConfig+0x26c>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	00db      	lsls	r3, r3, #3
 80045d8:	4939      	ldr	r1, [pc, #228]	; (80046c0 <HAL_RCC_OscConfig+0x26c>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045de:	e03a      	b.n	8004656 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d020      	beq.n	800462a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045e8:	4b36      	ldr	r3, [pc, #216]	; (80046c4 <HAL_RCC_OscConfig+0x270>)
 80045ea:	2201      	movs	r2, #1
 80045ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ee:	f7fc fc8b 	bl	8000f08 <HAL_GetTick>
 80045f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045f4:	e008      	b.n	8004608 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045f6:	f7fc fc87 	bl	8000f08 <HAL_GetTick>
 80045fa:	4602      	mov	r2, r0
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	2b02      	cmp	r3, #2
 8004602:	d901      	bls.n	8004608 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e1a1      	b.n	800494c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004608:	4b2d      	ldr	r3, [pc, #180]	; (80046c0 <HAL_RCC_OscConfig+0x26c>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0302 	and.w	r3, r3, #2
 8004610:	2b00      	cmp	r3, #0
 8004612:	d0f0      	beq.n	80045f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004614:	4b2a      	ldr	r3, [pc, #168]	; (80046c0 <HAL_RCC_OscConfig+0x26c>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	695b      	ldr	r3, [r3, #20]
 8004620:	00db      	lsls	r3, r3, #3
 8004622:	4927      	ldr	r1, [pc, #156]	; (80046c0 <HAL_RCC_OscConfig+0x26c>)
 8004624:	4313      	orrs	r3, r2
 8004626:	600b      	str	r3, [r1, #0]
 8004628:	e015      	b.n	8004656 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800462a:	4b26      	ldr	r3, [pc, #152]	; (80046c4 <HAL_RCC_OscConfig+0x270>)
 800462c:	2200      	movs	r2, #0
 800462e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004630:	f7fc fc6a 	bl	8000f08 <HAL_GetTick>
 8004634:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004636:	e008      	b.n	800464a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004638:	f7fc fc66 	bl	8000f08 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	2b02      	cmp	r3, #2
 8004644:	d901      	bls.n	800464a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e180      	b.n	800494c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800464a:	4b1d      	ldr	r3, [pc, #116]	; (80046c0 <HAL_RCC_OscConfig+0x26c>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0302 	and.w	r3, r3, #2
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1f0      	bne.n	8004638 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0308 	and.w	r3, r3, #8
 800465e:	2b00      	cmp	r3, #0
 8004660:	d03a      	beq.n	80046d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d019      	beq.n	800469e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800466a:	4b17      	ldr	r3, [pc, #92]	; (80046c8 <HAL_RCC_OscConfig+0x274>)
 800466c:	2201      	movs	r2, #1
 800466e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004670:	f7fc fc4a 	bl	8000f08 <HAL_GetTick>
 8004674:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004676:	e008      	b.n	800468a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004678:	f7fc fc46 	bl	8000f08 <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	2b02      	cmp	r3, #2
 8004684:	d901      	bls.n	800468a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e160      	b.n	800494c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800468a:	4b0d      	ldr	r3, [pc, #52]	; (80046c0 <HAL_RCC_OscConfig+0x26c>)
 800468c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468e:	f003 0302 	and.w	r3, r3, #2
 8004692:	2b00      	cmp	r3, #0
 8004694:	d0f0      	beq.n	8004678 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004696:	2001      	movs	r0, #1
 8004698:	f000 face 	bl	8004c38 <RCC_Delay>
 800469c:	e01c      	b.n	80046d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800469e:	4b0a      	ldr	r3, [pc, #40]	; (80046c8 <HAL_RCC_OscConfig+0x274>)
 80046a0:	2200      	movs	r2, #0
 80046a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046a4:	f7fc fc30 	bl	8000f08 <HAL_GetTick>
 80046a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046aa:	e00f      	b.n	80046cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046ac:	f7fc fc2c 	bl	8000f08 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d908      	bls.n	80046cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e146      	b.n	800494c <HAL_RCC_OscConfig+0x4f8>
 80046be:	bf00      	nop
 80046c0:	40021000 	.word	0x40021000
 80046c4:	42420000 	.word	0x42420000
 80046c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046cc:	4b92      	ldr	r3, [pc, #584]	; (8004918 <HAL_RCC_OscConfig+0x4c4>)
 80046ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d0:	f003 0302 	and.w	r3, r3, #2
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1e9      	bne.n	80046ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0304 	and.w	r3, r3, #4
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f000 80a6 	beq.w	8004832 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046e6:	2300      	movs	r3, #0
 80046e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046ea:	4b8b      	ldr	r3, [pc, #556]	; (8004918 <HAL_RCC_OscConfig+0x4c4>)
 80046ec:	69db      	ldr	r3, [r3, #28]
 80046ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10d      	bne.n	8004712 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046f6:	4b88      	ldr	r3, [pc, #544]	; (8004918 <HAL_RCC_OscConfig+0x4c4>)
 80046f8:	69db      	ldr	r3, [r3, #28]
 80046fa:	4a87      	ldr	r2, [pc, #540]	; (8004918 <HAL_RCC_OscConfig+0x4c4>)
 80046fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004700:	61d3      	str	r3, [r2, #28]
 8004702:	4b85      	ldr	r3, [pc, #532]	; (8004918 <HAL_RCC_OscConfig+0x4c4>)
 8004704:	69db      	ldr	r3, [r3, #28]
 8004706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800470a:	60bb      	str	r3, [r7, #8]
 800470c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800470e:	2301      	movs	r3, #1
 8004710:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004712:	4b82      	ldr	r3, [pc, #520]	; (800491c <HAL_RCC_OscConfig+0x4c8>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800471a:	2b00      	cmp	r3, #0
 800471c:	d118      	bne.n	8004750 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800471e:	4b7f      	ldr	r3, [pc, #508]	; (800491c <HAL_RCC_OscConfig+0x4c8>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a7e      	ldr	r2, [pc, #504]	; (800491c <HAL_RCC_OscConfig+0x4c8>)
 8004724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004728:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800472a:	f7fc fbed 	bl	8000f08 <HAL_GetTick>
 800472e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004730:	e008      	b.n	8004744 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004732:	f7fc fbe9 	bl	8000f08 <HAL_GetTick>
 8004736:	4602      	mov	r2, r0
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	2b64      	cmp	r3, #100	; 0x64
 800473e:	d901      	bls.n	8004744 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e103      	b.n	800494c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004744:	4b75      	ldr	r3, [pc, #468]	; (800491c <HAL_RCC_OscConfig+0x4c8>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800474c:	2b00      	cmp	r3, #0
 800474e:	d0f0      	beq.n	8004732 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d106      	bne.n	8004766 <HAL_RCC_OscConfig+0x312>
 8004758:	4b6f      	ldr	r3, [pc, #444]	; (8004918 <HAL_RCC_OscConfig+0x4c4>)
 800475a:	6a1b      	ldr	r3, [r3, #32]
 800475c:	4a6e      	ldr	r2, [pc, #440]	; (8004918 <HAL_RCC_OscConfig+0x4c4>)
 800475e:	f043 0301 	orr.w	r3, r3, #1
 8004762:	6213      	str	r3, [r2, #32]
 8004764:	e02d      	b.n	80047c2 <HAL_RCC_OscConfig+0x36e>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10c      	bne.n	8004788 <HAL_RCC_OscConfig+0x334>
 800476e:	4b6a      	ldr	r3, [pc, #424]	; (8004918 <HAL_RCC_OscConfig+0x4c4>)
 8004770:	6a1b      	ldr	r3, [r3, #32]
 8004772:	4a69      	ldr	r2, [pc, #420]	; (8004918 <HAL_RCC_OscConfig+0x4c4>)
 8004774:	f023 0301 	bic.w	r3, r3, #1
 8004778:	6213      	str	r3, [r2, #32]
 800477a:	4b67      	ldr	r3, [pc, #412]	; (8004918 <HAL_RCC_OscConfig+0x4c4>)
 800477c:	6a1b      	ldr	r3, [r3, #32]
 800477e:	4a66      	ldr	r2, [pc, #408]	; (8004918 <HAL_RCC_OscConfig+0x4c4>)
 8004780:	f023 0304 	bic.w	r3, r3, #4
 8004784:	6213      	str	r3, [r2, #32]
 8004786:	e01c      	b.n	80047c2 <HAL_RCC_OscConfig+0x36e>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	2b05      	cmp	r3, #5
 800478e:	d10c      	bne.n	80047aa <HAL_RCC_OscConfig+0x356>
 8004790:	4b61      	ldr	r3, [pc, #388]	; (8004918 <HAL_RCC_OscConfig+0x4c4>)
 8004792:	6a1b      	ldr	r3, [r3, #32]
 8004794:	4a60      	ldr	r2, [pc, #384]	; (8004918 <HAL_RCC_OscConfig+0x4c4>)
 8004796:	f043 0304 	orr.w	r3, r3, #4
 800479a:	6213      	str	r3, [r2, #32]
 800479c:	4b5e      	ldr	r3, [pc, #376]	; (8004918 <HAL_RCC_OscConfig+0x4c4>)
 800479e:	6a1b      	ldr	r3, [r3, #32]
 80047a0:	4a5d      	ldr	r2, [pc, #372]	; (8004918 <HAL_RCC_OscConfig+0x4c4>)
 80047a2:	f043 0301 	orr.w	r3, r3, #1
 80047a6:	6213      	str	r3, [r2, #32]
 80047a8:	e00b      	b.n	80047c2 <HAL_RCC_OscConfig+0x36e>
 80047aa:	4b5b      	ldr	r3, [pc, #364]	; (8004918 <HAL_RCC_OscConfig+0x4c4>)
 80047ac:	6a1b      	ldr	r3, [r3, #32]
 80047ae:	4a5a      	ldr	r2, [pc, #360]	; (8004918 <HAL_RCC_OscConfig+0x4c4>)
 80047b0:	f023 0301 	bic.w	r3, r3, #1
 80047b4:	6213      	str	r3, [r2, #32]
 80047b6:	4b58      	ldr	r3, [pc, #352]	; (8004918 <HAL_RCC_OscConfig+0x4c4>)
 80047b8:	6a1b      	ldr	r3, [r3, #32]
 80047ba:	4a57      	ldr	r2, [pc, #348]	; (8004918 <HAL_RCC_OscConfig+0x4c4>)
 80047bc:	f023 0304 	bic.w	r3, r3, #4
 80047c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d015      	beq.n	80047f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047ca:	f7fc fb9d 	bl	8000f08 <HAL_GetTick>
 80047ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047d0:	e00a      	b.n	80047e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047d2:	f7fc fb99 	bl	8000f08 <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d901      	bls.n	80047e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e0b1      	b.n	800494c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047e8:	4b4b      	ldr	r3, [pc, #300]	; (8004918 <HAL_RCC_OscConfig+0x4c4>)
 80047ea:	6a1b      	ldr	r3, [r3, #32]
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d0ee      	beq.n	80047d2 <HAL_RCC_OscConfig+0x37e>
 80047f4:	e014      	b.n	8004820 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047f6:	f7fc fb87 	bl	8000f08 <HAL_GetTick>
 80047fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047fc:	e00a      	b.n	8004814 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047fe:	f7fc fb83 	bl	8000f08 <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	f241 3288 	movw	r2, #5000	; 0x1388
 800480c:	4293      	cmp	r3, r2
 800480e:	d901      	bls.n	8004814 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e09b      	b.n	800494c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004814:	4b40      	ldr	r3, [pc, #256]	; (8004918 <HAL_RCC_OscConfig+0x4c4>)
 8004816:	6a1b      	ldr	r3, [r3, #32]
 8004818:	f003 0302 	and.w	r3, r3, #2
 800481c:	2b00      	cmp	r3, #0
 800481e:	d1ee      	bne.n	80047fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004820:	7dfb      	ldrb	r3, [r7, #23]
 8004822:	2b01      	cmp	r3, #1
 8004824:	d105      	bne.n	8004832 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004826:	4b3c      	ldr	r3, [pc, #240]	; (8004918 <HAL_RCC_OscConfig+0x4c4>)
 8004828:	69db      	ldr	r3, [r3, #28]
 800482a:	4a3b      	ldr	r2, [pc, #236]	; (8004918 <HAL_RCC_OscConfig+0x4c4>)
 800482c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004830:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	69db      	ldr	r3, [r3, #28]
 8004836:	2b00      	cmp	r3, #0
 8004838:	f000 8087 	beq.w	800494a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800483c:	4b36      	ldr	r3, [pc, #216]	; (8004918 <HAL_RCC_OscConfig+0x4c4>)
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f003 030c 	and.w	r3, r3, #12
 8004844:	2b08      	cmp	r3, #8
 8004846:	d061      	beq.n	800490c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	69db      	ldr	r3, [r3, #28]
 800484c:	2b02      	cmp	r3, #2
 800484e:	d146      	bne.n	80048de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004850:	4b33      	ldr	r3, [pc, #204]	; (8004920 <HAL_RCC_OscConfig+0x4cc>)
 8004852:	2200      	movs	r2, #0
 8004854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004856:	f7fc fb57 	bl	8000f08 <HAL_GetTick>
 800485a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800485c:	e008      	b.n	8004870 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800485e:	f7fc fb53 	bl	8000f08 <HAL_GetTick>
 8004862:	4602      	mov	r2, r0
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	2b02      	cmp	r3, #2
 800486a:	d901      	bls.n	8004870 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e06d      	b.n	800494c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004870:	4b29      	ldr	r3, [pc, #164]	; (8004918 <HAL_RCC_OscConfig+0x4c4>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1f0      	bne.n	800485e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a1b      	ldr	r3, [r3, #32]
 8004880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004884:	d108      	bne.n	8004898 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004886:	4b24      	ldr	r3, [pc, #144]	; (8004918 <HAL_RCC_OscConfig+0x4c4>)
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	4921      	ldr	r1, [pc, #132]	; (8004918 <HAL_RCC_OscConfig+0x4c4>)
 8004894:	4313      	orrs	r3, r2
 8004896:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004898:	4b1f      	ldr	r3, [pc, #124]	; (8004918 <HAL_RCC_OscConfig+0x4c4>)
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a19      	ldr	r1, [r3, #32]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a8:	430b      	orrs	r3, r1
 80048aa:	491b      	ldr	r1, [pc, #108]	; (8004918 <HAL_RCC_OscConfig+0x4c4>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048b0:	4b1b      	ldr	r3, [pc, #108]	; (8004920 <HAL_RCC_OscConfig+0x4cc>)
 80048b2:	2201      	movs	r2, #1
 80048b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048b6:	f7fc fb27 	bl	8000f08 <HAL_GetTick>
 80048ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048bc:	e008      	b.n	80048d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048be:	f7fc fb23 	bl	8000f08 <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d901      	bls.n	80048d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e03d      	b.n	800494c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048d0:	4b11      	ldr	r3, [pc, #68]	; (8004918 <HAL_RCC_OscConfig+0x4c4>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d0f0      	beq.n	80048be <HAL_RCC_OscConfig+0x46a>
 80048dc:	e035      	b.n	800494a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048de:	4b10      	ldr	r3, [pc, #64]	; (8004920 <HAL_RCC_OscConfig+0x4cc>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048e4:	f7fc fb10 	bl	8000f08 <HAL_GetTick>
 80048e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048ea:	e008      	b.n	80048fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048ec:	f7fc fb0c 	bl	8000f08 <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d901      	bls.n	80048fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e026      	b.n	800494c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048fe:	4b06      	ldr	r3, [pc, #24]	; (8004918 <HAL_RCC_OscConfig+0x4c4>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1f0      	bne.n	80048ec <HAL_RCC_OscConfig+0x498>
 800490a:	e01e      	b.n	800494a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	69db      	ldr	r3, [r3, #28]
 8004910:	2b01      	cmp	r3, #1
 8004912:	d107      	bne.n	8004924 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e019      	b.n	800494c <HAL_RCC_OscConfig+0x4f8>
 8004918:	40021000 	.word	0x40021000
 800491c:	40007000 	.word	0x40007000
 8004920:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004924:	4b0b      	ldr	r3, [pc, #44]	; (8004954 <HAL_RCC_OscConfig+0x500>)
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a1b      	ldr	r3, [r3, #32]
 8004934:	429a      	cmp	r2, r3
 8004936:	d106      	bne.n	8004946 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004942:	429a      	cmp	r2, r3
 8004944:	d001      	beq.n	800494a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e000      	b.n	800494c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3718      	adds	r7, #24
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}
 8004954:	40021000 	.word	0x40021000

08004958 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d101      	bne.n	800496c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e0d0      	b.n	8004b0e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800496c:	4b6a      	ldr	r3, [pc, #424]	; (8004b18 <HAL_RCC_ClockConfig+0x1c0>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0307 	and.w	r3, r3, #7
 8004974:	683a      	ldr	r2, [r7, #0]
 8004976:	429a      	cmp	r2, r3
 8004978:	d910      	bls.n	800499c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800497a:	4b67      	ldr	r3, [pc, #412]	; (8004b18 <HAL_RCC_ClockConfig+0x1c0>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f023 0207 	bic.w	r2, r3, #7
 8004982:	4965      	ldr	r1, [pc, #404]	; (8004b18 <HAL_RCC_ClockConfig+0x1c0>)
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	4313      	orrs	r3, r2
 8004988:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800498a:	4b63      	ldr	r3, [pc, #396]	; (8004b18 <HAL_RCC_ClockConfig+0x1c0>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0307 	and.w	r3, r3, #7
 8004992:	683a      	ldr	r2, [r7, #0]
 8004994:	429a      	cmp	r2, r3
 8004996:	d001      	beq.n	800499c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e0b8      	b.n	8004b0e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0302 	and.w	r3, r3, #2
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d020      	beq.n	80049ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0304 	and.w	r3, r3, #4
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d005      	beq.n	80049c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049b4:	4b59      	ldr	r3, [pc, #356]	; (8004b1c <HAL_RCC_ClockConfig+0x1c4>)
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	4a58      	ldr	r2, [pc, #352]	; (8004b1c <HAL_RCC_ClockConfig+0x1c4>)
 80049ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80049be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0308 	and.w	r3, r3, #8
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d005      	beq.n	80049d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049cc:	4b53      	ldr	r3, [pc, #332]	; (8004b1c <HAL_RCC_ClockConfig+0x1c4>)
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	4a52      	ldr	r2, [pc, #328]	; (8004b1c <HAL_RCC_ClockConfig+0x1c4>)
 80049d2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80049d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049d8:	4b50      	ldr	r3, [pc, #320]	; (8004b1c <HAL_RCC_ClockConfig+0x1c4>)
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	494d      	ldr	r1, [pc, #308]	; (8004b1c <HAL_RCC_ClockConfig+0x1c4>)
 80049e6:	4313      	orrs	r3, r2
 80049e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0301 	and.w	r3, r3, #1
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d040      	beq.n	8004a78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d107      	bne.n	8004a0e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049fe:	4b47      	ldr	r3, [pc, #284]	; (8004b1c <HAL_RCC_ClockConfig+0x1c4>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d115      	bne.n	8004a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e07f      	b.n	8004b0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d107      	bne.n	8004a26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a16:	4b41      	ldr	r3, [pc, #260]	; (8004b1c <HAL_RCC_ClockConfig+0x1c4>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d109      	bne.n	8004a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e073      	b.n	8004b0e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a26:	4b3d      	ldr	r3, [pc, #244]	; (8004b1c <HAL_RCC_ClockConfig+0x1c4>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0302 	and.w	r3, r3, #2
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d101      	bne.n	8004a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e06b      	b.n	8004b0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a36:	4b39      	ldr	r3, [pc, #228]	; (8004b1c <HAL_RCC_ClockConfig+0x1c4>)
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f023 0203 	bic.w	r2, r3, #3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	4936      	ldr	r1, [pc, #216]	; (8004b1c <HAL_RCC_ClockConfig+0x1c4>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a48:	f7fc fa5e 	bl	8000f08 <HAL_GetTick>
 8004a4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a4e:	e00a      	b.n	8004a66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a50:	f7fc fa5a 	bl	8000f08 <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d901      	bls.n	8004a66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e053      	b.n	8004b0e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a66:	4b2d      	ldr	r3, [pc, #180]	; (8004b1c <HAL_RCC_ClockConfig+0x1c4>)
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f003 020c 	and.w	r2, r3, #12
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d1eb      	bne.n	8004a50 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a78:	4b27      	ldr	r3, [pc, #156]	; (8004b18 <HAL_RCC_ClockConfig+0x1c0>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0307 	and.w	r3, r3, #7
 8004a80:	683a      	ldr	r2, [r7, #0]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d210      	bcs.n	8004aa8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a86:	4b24      	ldr	r3, [pc, #144]	; (8004b18 <HAL_RCC_ClockConfig+0x1c0>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f023 0207 	bic.w	r2, r3, #7
 8004a8e:	4922      	ldr	r1, [pc, #136]	; (8004b18 <HAL_RCC_ClockConfig+0x1c0>)
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a96:	4b20      	ldr	r3, [pc, #128]	; (8004b18 <HAL_RCC_ClockConfig+0x1c0>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0307 	and.w	r3, r3, #7
 8004a9e:	683a      	ldr	r2, [r7, #0]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d001      	beq.n	8004aa8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e032      	b.n	8004b0e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0304 	and.w	r3, r3, #4
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d008      	beq.n	8004ac6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ab4:	4b19      	ldr	r3, [pc, #100]	; (8004b1c <HAL_RCC_ClockConfig+0x1c4>)
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	4916      	ldr	r1, [pc, #88]	; (8004b1c <HAL_RCC_ClockConfig+0x1c4>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0308 	and.w	r3, r3, #8
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d009      	beq.n	8004ae6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004ad2:	4b12      	ldr	r3, [pc, #72]	; (8004b1c <HAL_RCC_ClockConfig+0x1c4>)
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	00db      	lsls	r3, r3, #3
 8004ae0:	490e      	ldr	r1, [pc, #56]	; (8004b1c <HAL_RCC_ClockConfig+0x1c4>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ae6:	f000 f821 	bl	8004b2c <HAL_RCC_GetSysClockFreq>
 8004aea:	4602      	mov	r2, r0
 8004aec:	4b0b      	ldr	r3, [pc, #44]	; (8004b1c <HAL_RCC_ClockConfig+0x1c4>)
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	091b      	lsrs	r3, r3, #4
 8004af2:	f003 030f 	and.w	r3, r3, #15
 8004af6:	490a      	ldr	r1, [pc, #40]	; (8004b20 <HAL_RCC_ClockConfig+0x1c8>)
 8004af8:	5ccb      	ldrb	r3, [r1, r3]
 8004afa:	fa22 f303 	lsr.w	r3, r2, r3
 8004afe:	4a09      	ldr	r2, [pc, #36]	; (8004b24 <HAL_RCC_ClockConfig+0x1cc>)
 8004b00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b02:	4b09      	ldr	r3, [pc, #36]	; (8004b28 <HAL_RCC_ClockConfig+0x1d0>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4618      	mov	r0, r3
 8004b08:	f7fc f9bc 	bl	8000e84 <HAL_InitTick>

  return HAL_OK;
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3710      	adds	r7, #16
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	40022000 	.word	0x40022000
 8004b1c:	40021000 	.word	0x40021000
 8004b20:	080073cc 	.word	0x080073cc
 8004b24:	20000000 	.word	0x20000000
 8004b28:	20000004 	.word	0x20000004

08004b2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b087      	sub	sp, #28
 8004b30:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004b32:	2300      	movs	r3, #0
 8004b34:	60fb      	str	r3, [r7, #12]
 8004b36:	2300      	movs	r3, #0
 8004b38:	60bb      	str	r3, [r7, #8]
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	617b      	str	r3, [r7, #20]
 8004b3e:	2300      	movs	r3, #0
 8004b40:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004b42:	2300      	movs	r3, #0
 8004b44:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004b46:	4b1e      	ldr	r3, [pc, #120]	; (8004bc0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f003 030c 	and.w	r3, r3, #12
 8004b52:	2b04      	cmp	r3, #4
 8004b54:	d002      	beq.n	8004b5c <HAL_RCC_GetSysClockFreq+0x30>
 8004b56:	2b08      	cmp	r3, #8
 8004b58:	d003      	beq.n	8004b62 <HAL_RCC_GetSysClockFreq+0x36>
 8004b5a:	e027      	b.n	8004bac <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b5c:	4b19      	ldr	r3, [pc, #100]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b5e:	613b      	str	r3, [r7, #16]
      break;
 8004b60:	e027      	b.n	8004bb2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	0c9b      	lsrs	r3, r3, #18
 8004b66:	f003 030f 	and.w	r3, r3, #15
 8004b6a:	4a17      	ldr	r2, [pc, #92]	; (8004bc8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004b6c:	5cd3      	ldrb	r3, [r2, r3]
 8004b6e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d010      	beq.n	8004b9c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004b7a:	4b11      	ldr	r3, [pc, #68]	; (8004bc0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	0c5b      	lsrs	r3, r3, #17
 8004b80:	f003 0301 	and.w	r3, r3, #1
 8004b84:	4a11      	ldr	r2, [pc, #68]	; (8004bcc <HAL_RCC_GetSysClockFreq+0xa0>)
 8004b86:	5cd3      	ldrb	r3, [r2, r3]
 8004b88:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a0d      	ldr	r2, [pc, #52]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b8e:	fb03 f202 	mul.w	r2, r3, r2
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b98:	617b      	str	r3, [r7, #20]
 8004b9a:	e004      	b.n	8004ba6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a0c      	ldr	r2, [pc, #48]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004ba0:	fb02 f303 	mul.w	r3, r2, r3
 8004ba4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	613b      	str	r3, [r7, #16]
      break;
 8004baa:	e002      	b.n	8004bb2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004bac:	4b05      	ldr	r3, [pc, #20]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004bae:	613b      	str	r3, [r7, #16]
      break;
 8004bb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bb2:	693b      	ldr	r3, [r7, #16]
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	371c      	adds	r7, #28
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bc80      	pop	{r7}
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	40021000 	.word	0x40021000
 8004bc4:	007a1200 	.word	0x007a1200
 8004bc8:	080073e4 	.word	0x080073e4
 8004bcc:	080073f4 	.word	0x080073f4
 8004bd0:	003d0900 	.word	0x003d0900

08004bd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bd8:	4b02      	ldr	r3, [pc, #8]	; (8004be4 <HAL_RCC_GetHCLKFreq+0x10>)
 8004bda:	681b      	ldr	r3, [r3, #0]
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bc80      	pop	{r7}
 8004be2:	4770      	bx	lr
 8004be4:	20000000 	.word	0x20000000

08004be8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004bec:	f7ff fff2 	bl	8004bd4 <HAL_RCC_GetHCLKFreq>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	4b05      	ldr	r3, [pc, #20]	; (8004c08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	0a1b      	lsrs	r3, r3, #8
 8004bf8:	f003 0307 	and.w	r3, r3, #7
 8004bfc:	4903      	ldr	r1, [pc, #12]	; (8004c0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bfe:	5ccb      	ldrb	r3, [r1, r3]
 8004c00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	40021000 	.word	0x40021000
 8004c0c:	080073dc 	.word	0x080073dc

08004c10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c14:	f7ff ffde 	bl	8004bd4 <HAL_RCC_GetHCLKFreq>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	4b05      	ldr	r3, [pc, #20]	; (8004c30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	0adb      	lsrs	r3, r3, #11
 8004c20:	f003 0307 	and.w	r3, r3, #7
 8004c24:	4903      	ldr	r1, [pc, #12]	; (8004c34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c26:	5ccb      	ldrb	r3, [r1, r3]
 8004c28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	40021000 	.word	0x40021000
 8004c34:	080073dc 	.word	0x080073dc

08004c38 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b085      	sub	sp, #20
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004c40:	4b0a      	ldr	r3, [pc, #40]	; (8004c6c <RCC_Delay+0x34>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a0a      	ldr	r2, [pc, #40]	; (8004c70 <RCC_Delay+0x38>)
 8004c46:	fba2 2303 	umull	r2, r3, r2, r3
 8004c4a:	0a5b      	lsrs	r3, r3, #9
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	fb02 f303 	mul.w	r3, r2, r3
 8004c52:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004c54:	bf00      	nop
  }
  while (Delay --);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	1e5a      	subs	r2, r3, #1
 8004c5a:	60fa      	str	r2, [r7, #12]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d1f9      	bne.n	8004c54 <RCC_Delay+0x1c>
}
 8004c60:	bf00      	nop
 8004c62:	bf00      	nop
 8004c64:	3714      	adds	r7, #20
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bc80      	pop	{r7}
 8004c6a:	4770      	bx	lr
 8004c6c:	20000000 	.word	0x20000000
 8004c70:	10624dd3 	.word	0x10624dd3

08004c74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e041      	b.n	8004d0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d106      	bne.n	8004ca0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f7fb ff60 	bl	8000b60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2202      	movs	r2, #2
 8004ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	3304      	adds	r3, #4
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	4610      	mov	r0, r2
 8004cb4:	f000 fc92 	bl	80055dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3708      	adds	r7, #8
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}

08004d12 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d12:	b580      	push	{r7, lr}
 8004d14:	b082      	sub	sp, #8
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d101      	bne.n	8004d24 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e041      	b.n	8004da8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d106      	bne.n	8004d3e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f7fb ff71 	bl	8000c20 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2202      	movs	r2, #2
 8004d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	3304      	adds	r3, #4
 8004d4e:	4619      	mov	r1, r3
 8004d50:	4610      	mov	r0, r2
 8004d52:	f000 fc43 	bl	80055dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2201      	movs	r2, #1
 8004d62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2201      	movs	r2, #1
 8004d72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2201      	movs	r2, #1
 8004d82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2201      	movs	r2, #1
 8004da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3708      	adds	r7, #8
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d109      	bne.n	8004dd8 <HAL_TIM_PWM_Start_IT+0x28>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	bf14      	ite	ne
 8004dd0:	2301      	movne	r3, #1
 8004dd2:	2300      	moveq	r3, #0
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	e022      	b.n	8004e1e <HAL_TIM_PWM_Start_IT+0x6e>
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	2b04      	cmp	r3, #4
 8004ddc:	d109      	bne.n	8004df2 <HAL_TIM_PWM_Start_IT+0x42>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	bf14      	ite	ne
 8004dea:	2301      	movne	r3, #1
 8004dec:	2300      	moveq	r3, #0
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	e015      	b.n	8004e1e <HAL_TIM_PWM_Start_IT+0x6e>
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	2b08      	cmp	r3, #8
 8004df6:	d109      	bne.n	8004e0c <HAL_TIM_PWM_Start_IT+0x5c>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	bf14      	ite	ne
 8004e04:	2301      	movne	r3, #1
 8004e06:	2300      	moveq	r3, #0
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	e008      	b.n	8004e1e <HAL_TIM_PWM_Start_IT+0x6e>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	bf14      	ite	ne
 8004e18:	2301      	movne	r3, #1
 8004e1a:	2300      	moveq	r3, #0
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d001      	beq.n	8004e26 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e0a4      	b.n	8004f70 <HAL_TIM_PWM_Start_IT+0x1c0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d104      	bne.n	8004e36 <HAL_TIM_PWM_Start_IT+0x86>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2202      	movs	r2, #2
 8004e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e34:	e013      	b.n	8004e5e <HAL_TIM_PWM_Start_IT+0xae>
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	2b04      	cmp	r3, #4
 8004e3a:	d104      	bne.n	8004e46 <HAL_TIM_PWM_Start_IT+0x96>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2202      	movs	r2, #2
 8004e40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e44:	e00b      	b.n	8004e5e <HAL_TIM_PWM_Start_IT+0xae>
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	2b08      	cmp	r3, #8
 8004e4a:	d104      	bne.n	8004e56 <HAL_TIM_PWM_Start_IT+0xa6>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2202      	movs	r2, #2
 8004e50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e54:	e003      	b.n	8004e5e <HAL_TIM_PWM_Start_IT+0xae>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2202      	movs	r2, #2
 8004e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	2b0c      	cmp	r3, #12
 8004e62:	d841      	bhi.n	8004ee8 <HAL_TIM_PWM_Start_IT+0x138>
 8004e64:	a201      	add	r2, pc, #4	; (adr r2, 8004e6c <HAL_TIM_PWM_Start_IT+0xbc>)
 8004e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e6a:	bf00      	nop
 8004e6c:	08004ea1 	.word	0x08004ea1
 8004e70:	08004ee9 	.word	0x08004ee9
 8004e74:	08004ee9 	.word	0x08004ee9
 8004e78:	08004ee9 	.word	0x08004ee9
 8004e7c:	08004eb3 	.word	0x08004eb3
 8004e80:	08004ee9 	.word	0x08004ee9
 8004e84:	08004ee9 	.word	0x08004ee9
 8004e88:	08004ee9 	.word	0x08004ee9
 8004e8c:	08004ec5 	.word	0x08004ec5
 8004e90:	08004ee9 	.word	0x08004ee9
 8004e94:	08004ee9 	.word	0x08004ee9
 8004e98:	08004ee9 	.word	0x08004ee9
 8004e9c:	08004ed7 	.word	0x08004ed7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68da      	ldr	r2, [r3, #12]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f042 0202 	orr.w	r2, r2, #2
 8004eae:	60da      	str	r2, [r3, #12]
      break;
 8004eb0:	e01d      	b.n	8004eee <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68da      	ldr	r2, [r3, #12]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f042 0204 	orr.w	r2, r2, #4
 8004ec0:	60da      	str	r2, [r3, #12]
      break;
 8004ec2:	e014      	b.n	8004eee <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68da      	ldr	r2, [r3, #12]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f042 0208 	orr.w	r2, r2, #8
 8004ed2:	60da      	str	r2, [r3, #12]
      break;
 8004ed4:	e00b      	b.n	8004eee <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68da      	ldr	r2, [r3, #12]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f042 0210 	orr.w	r2, r2, #16
 8004ee4:	60da      	str	r2, [r3, #12]
      break;
 8004ee6:	e002      	b.n	8004eee <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	73fb      	strb	r3, [r7, #15]
      break;
 8004eec:	bf00      	nop
  }

  if (status == HAL_OK)
 8004eee:	7bfb      	ldrb	r3, [r7, #15]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d13c      	bne.n	8004f6e <HAL_TIM_PWM_Start_IT+0x1be>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	2201      	movs	r2, #1
 8004efa:	6839      	ldr	r1, [r7, #0]
 8004efc:	4618      	mov	r0, r3
 8004efe:	f000 ff62 	bl	8005dc6 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a1c      	ldr	r2, [pc, #112]	; (8004f78 <HAL_TIM_PWM_Start_IT+0x1c8>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d107      	bne.n	8004f1c <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f1a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a15      	ldr	r2, [pc, #84]	; (8004f78 <HAL_TIM_PWM_Start_IT+0x1c8>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d009      	beq.n	8004f3a <HAL_TIM_PWM_Start_IT+0x18a>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f2e:	d004      	beq.n	8004f3a <HAL_TIM_PWM_Start_IT+0x18a>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a11      	ldr	r2, [pc, #68]	; (8004f7c <HAL_TIM_PWM_Start_IT+0x1cc>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d111      	bne.n	8004f5e <HAL_TIM_PWM_Start_IT+0x1ae>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	f003 0307 	and.w	r3, r3, #7
 8004f44:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	2b06      	cmp	r3, #6
 8004f4a:	d010      	beq.n	8004f6e <HAL_TIM_PWM_Start_IT+0x1be>
      {
        __HAL_TIM_ENABLE(htim);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f042 0201 	orr.w	r2, r2, #1
 8004f5a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f5c:	e007      	b.n	8004f6e <HAL_TIM_PWM_Start_IT+0x1be>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f042 0201 	orr.w	r2, r2, #1
 8004f6c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3710      	adds	r7, #16
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	40012c00 	.word	0x40012c00
 8004f7c:	40000400 	.word	0x40000400

08004f80 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d101      	bne.n	8004f92 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e041      	b.n	8005016 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d106      	bne.n	8004fac <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 f839 	bl	800501e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2202      	movs	r2, #2
 8004fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	3304      	adds	r3, #4
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	4610      	mov	r0, r2
 8004fc0:	f000 fb0c 	bl	80055dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	3708      	adds	r7, #8
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}

0800501e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800501e:	b480      	push	{r7}
 8005020:	b083      	sub	sp, #12
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005026:	bf00      	nop
 8005028:	370c      	adds	r7, #12
 800502a:	46bd      	mov	sp, r7
 800502c:	bc80      	pop	{r7}
 800502e:	4770      	bx	lr

08005030 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b082      	sub	sp, #8
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	f003 0302 	and.w	r3, r3, #2
 8005042:	2b02      	cmp	r3, #2
 8005044:	d122      	bne.n	800508c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	f003 0302 	and.w	r3, r3, #2
 8005050:	2b02      	cmp	r3, #2
 8005052:	d11b      	bne.n	800508c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f06f 0202 	mvn.w	r2, #2
 800505c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2201      	movs	r2, #1
 8005062:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	f003 0303 	and.w	r3, r3, #3
 800506e:	2b00      	cmp	r3, #0
 8005070:	d003      	beq.n	800507a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 fa96 	bl	80055a4 <HAL_TIM_IC_CaptureCallback>
 8005078:	e005      	b.n	8005086 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 fa89 	bl	8005592 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f000 fa98 	bl	80055b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	f003 0304 	and.w	r3, r3, #4
 8005096:	2b04      	cmp	r3, #4
 8005098:	d122      	bne.n	80050e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	f003 0304 	and.w	r3, r3, #4
 80050a4:	2b04      	cmp	r3, #4
 80050a6:	d11b      	bne.n	80050e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f06f 0204 	mvn.w	r2, #4
 80050b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2202      	movs	r2, #2
 80050b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d003      	beq.n	80050ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 fa6c 	bl	80055a4 <HAL_TIM_IC_CaptureCallback>
 80050cc:	e005      	b.n	80050da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 fa5f 	bl	8005592 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f000 fa6e 	bl	80055b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	f003 0308 	and.w	r3, r3, #8
 80050ea:	2b08      	cmp	r3, #8
 80050ec:	d122      	bne.n	8005134 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	f003 0308 	and.w	r3, r3, #8
 80050f8:	2b08      	cmp	r3, #8
 80050fa:	d11b      	bne.n	8005134 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f06f 0208 	mvn.w	r2, #8
 8005104:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2204      	movs	r2, #4
 800510a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	69db      	ldr	r3, [r3, #28]
 8005112:	f003 0303 	and.w	r3, r3, #3
 8005116:	2b00      	cmp	r3, #0
 8005118:	d003      	beq.n	8005122 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 fa42 	bl	80055a4 <HAL_TIM_IC_CaptureCallback>
 8005120:	e005      	b.n	800512e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 fa35 	bl	8005592 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 fa44 	bl	80055b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	f003 0310 	and.w	r3, r3, #16
 800513e:	2b10      	cmp	r3, #16
 8005140:	d122      	bne.n	8005188 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	f003 0310 	and.w	r3, r3, #16
 800514c:	2b10      	cmp	r3, #16
 800514e:	d11b      	bne.n	8005188 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f06f 0210 	mvn.w	r2, #16
 8005158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2208      	movs	r2, #8
 800515e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	69db      	ldr	r3, [r3, #28]
 8005166:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800516a:	2b00      	cmp	r3, #0
 800516c:	d003      	beq.n	8005176 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 fa18 	bl	80055a4 <HAL_TIM_IC_CaptureCallback>
 8005174:	e005      	b.n	8005182 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 fa0b 	bl	8005592 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f000 fa1a 	bl	80055b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	f003 0301 	and.w	r3, r3, #1
 8005192:	2b01      	cmp	r3, #1
 8005194:	d10e      	bne.n	80051b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	f003 0301 	and.w	r3, r3, #1
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d107      	bne.n	80051b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f06f 0201 	mvn.w	r2, #1
 80051ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 f9e6 	bl	8005580 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051be:	2b80      	cmp	r3, #128	; 0x80
 80051c0:	d10e      	bne.n	80051e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051cc:	2b80      	cmp	r3, #128	; 0x80
 80051ce:	d107      	bne.n	80051e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80051d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 fe79 	bl	8005ed2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ea:	2b40      	cmp	r3, #64	; 0x40
 80051ec:	d10e      	bne.n	800520c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f8:	2b40      	cmp	r3, #64	; 0x40
 80051fa:	d107      	bne.n	800520c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 f9de 	bl	80055c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	f003 0320 	and.w	r3, r3, #32
 8005216:	2b20      	cmp	r3, #32
 8005218:	d10e      	bne.n	8005238 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	f003 0320 	and.w	r3, r3, #32
 8005224:	2b20      	cmp	r3, #32
 8005226:	d107      	bne.n	8005238 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f06f 0220 	mvn.w	r2, #32
 8005230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 fe44 	bl	8005ec0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005238:	bf00      	nop
 800523a:	3708      	adds	r7, #8
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b086      	sub	sp, #24
 8005244:	af00      	add	r7, sp, #0
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800524c:	2300      	movs	r3, #0
 800524e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005256:	2b01      	cmp	r3, #1
 8005258:	d101      	bne.n	800525e <HAL_TIM_IC_ConfigChannel+0x1e>
 800525a:	2302      	movs	r3, #2
 800525c:	e088      	b.n	8005370 <HAL_TIM_IC_ConfigChannel+0x130>
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2201      	movs	r2, #1
 8005262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d11b      	bne.n	80052a4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6818      	ldr	r0, [r3, #0]
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	6819      	ldr	r1, [r3, #0]
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	685a      	ldr	r2, [r3, #4]
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	f000 fc20 	bl	8005ac0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	699a      	ldr	r2, [r3, #24]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f022 020c 	bic.w	r2, r2, #12
 800528e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	6999      	ldr	r1, [r3, #24]
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	689a      	ldr	r2, [r3, #8]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	430a      	orrs	r2, r1
 80052a0:	619a      	str	r2, [r3, #24]
 80052a2:	e060      	b.n	8005366 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2b04      	cmp	r3, #4
 80052a8:	d11c      	bne.n	80052e4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6818      	ldr	r0, [r3, #0]
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	6819      	ldr	r1, [r3, #0]
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	685a      	ldr	r2, [r3, #4]
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	f000 fc83 	bl	8005bc4 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	699a      	ldr	r2, [r3, #24]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80052cc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	6999      	ldr	r1, [r3, #24]
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	021a      	lsls	r2, r3, #8
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	430a      	orrs	r2, r1
 80052e0:	619a      	str	r2, [r3, #24]
 80052e2:	e040      	b.n	8005366 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2b08      	cmp	r3, #8
 80052e8:	d11b      	bne.n	8005322 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6818      	ldr	r0, [r3, #0]
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	6819      	ldr	r1, [r3, #0]
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	685a      	ldr	r2, [r3, #4]
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	f000 fcce 	bl	8005c9a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	69da      	ldr	r2, [r3, #28]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f022 020c 	bic.w	r2, r2, #12
 800530c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	69d9      	ldr	r1, [r3, #28]
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	689a      	ldr	r2, [r3, #8]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	430a      	orrs	r2, r1
 800531e:	61da      	str	r2, [r3, #28]
 8005320:	e021      	b.n	8005366 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2b0c      	cmp	r3, #12
 8005326:	d11c      	bne.n	8005362 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6818      	ldr	r0, [r3, #0]
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	6819      	ldr	r1, [r3, #0]
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	685a      	ldr	r2, [r3, #4]
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	f000 fcea 	bl	8005d10 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	69da      	ldr	r2, [r3, #28]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800534a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	69d9      	ldr	r1, [r3, #28]
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	021a      	lsls	r2, r3, #8
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	430a      	orrs	r2, r1
 800535e:	61da      	str	r2, [r3, #28]
 8005360:	e001      	b.n	8005366 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800536e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005370:	4618      	mov	r0, r3
 8005372:	3718      	adds	r7, #24
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b086      	sub	sp, #24
 800537c:	af00      	add	r7, sp, #0
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	60b9      	str	r1, [r7, #8]
 8005382:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005384:	2300      	movs	r3, #0
 8005386:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800538e:	2b01      	cmp	r3, #1
 8005390:	d101      	bne.n	8005396 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005392:	2302      	movs	r3, #2
 8005394:	e0ae      	b.n	80054f4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2201      	movs	r2, #1
 800539a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2b0c      	cmp	r3, #12
 80053a2:	f200 809f 	bhi.w	80054e4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80053a6:	a201      	add	r2, pc, #4	; (adr r2, 80053ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80053a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ac:	080053e1 	.word	0x080053e1
 80053b0:	080054e5 	.word	0x080054e5
 80053b4:	080054e5 	.word	0x080054e5
 80053b8:	080054e5 	.word	0x080054e5
 80053bc:	08005421 	.word	0x08005421
 80053c0:	080054e5 	.word	0x080054e5
 80053c4:	080054e5 	.word	0x080054e5
 80053c8:	080054e5 	.word	0x080054e5
 80053cc:	08005463 	.word	0x08005463
 80053d0:	080054e5 	.word	0x080054e5
 80053d4:	080054e5 	.word	0x080054e5
 80053d8:	080054e5 	.word	0x080054e5
 80053dc:	080054a3 	.word	0x080054a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68b9      	ldr	r1, [r7, #8]
 80053e6:	4618      	mov	r0, r3
 80053e8:	f000 f950 	bl	800568c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	699a      	ldr	r2, [r3, #24]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f042 0208 	orr.w	r2, r2, #8
 80053fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	699a      	ldr	r2, [r3, #24]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f022 0204 	bic.w	r2, r2, #4
 800540a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	6999      	ldr	r1, [r3, #24]
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	691a      	ldr	r2, [r3, #16]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	430a      	orrs	r2, r1
 800541c:	619a      	str	r2, [r3, #24]
      break;
 800541e:	e064      	b.n	80054ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68b9      	ldr	r1, [r7, #8]
 8005426:	4618      	mov	r0, r3
 8005428:	f000 f996 	bl	8005758 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	699a      	ldr	r2, [r3, #24]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800543a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	699a      	ldr	r2, [r3, #24]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800544a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	6999      	ldr	r1, [r3, #24]
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	021a      	lsls	r2, r3, #8
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	430a      	orrs	r2, r1
 800545e:	619a      	str	r2, [r3, #24]
      break;
 8005460:	e043      	b.n	80054ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	68b9      	ldr	r1, [r7, #8]
 8005468:	4618      	mov	r0, r3
 800546a:	f000 f9df 	bl	800582c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	69da      	ldr	r2, [r3, #28]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f042 0208 	orr.w	r2, r2, #8
 800547c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	69da      	ldr	r2, [r3, #28]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f022 0204 	bic.w	r2, r2, #4
 800548c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	69d9      	ldr	r1, [r3, #28]
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	691a      	ldr	r2, [r3, #16]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	430a      	orrs	r2, r1
 800549e:	61da      	str	r2, [r3, #28]
      break;
 80054a0:	e023      	b.n	80054ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68b9      	ldr	r1, [r7, #8]
 80054a8:	4618      	mov	r0, r3
 80054aa:	f000 fa29 	bl	8005900 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	69da      	ldr	r2, [r3, #28]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	69da      	ldr	r2, [r3, #28]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	69d9      	ldr	r1, [r3, #28]
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	691b      	ldr	r3, [r3, #16]
 80054d8:	021a      	lsls	r2, r3, #8
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	430a      	orrs	r2, r1
 80054e0:	61da      	str	r2, [r3, #28]
      break;
 80054e2:	e002      	b.n	80054ea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	75fb      	strb	r3, [r7, #23]
      break;
 80054e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3718      	adds	r7, #24
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800550c:	2b01      	cmp	r3, #1
 800550e:	d101      	bne.n	8005514 <HAL_TIM_SlaveConfigSynchro+0x18>
 8005510:	2302      	movs	r3, #2
 8005512:	e031      	b.n	8005578 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2202      	movs	r2, #2
 8005520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005524:	6839      	ldr	r1, [r7, #0]
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 fa38 	bl	800599c <TIM_SlaveTimer_SetConfig>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d009      	beq.n	8005546 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2201      	movs	r2, #1
 8005536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e018      	b.n	8005578 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68da      	ldr	r2, [r3, #12]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005554:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68da      	ldr	r2, [r3, #12]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005564:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2201      	movs	r2, #1
 800556a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	3708      	adds	r7, #8
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005588:	bf00      	nop
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	bc80      	pop	{r7}
 8005590:	4770      	bx	lr

08005592 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005592:	b480      	push	{r7}
 8005594:	b083      	sub	sp, #12
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800559a:	bf00      	nop
 800559c:	370c      	adds	r7, #12
 800559e:	46bd      	mov	sp, r7
 80055a0:	bc80      	pop	{r7}
 80055a2:	4770      	bx	lr

080055a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055ac:	bf00      	nop
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bc80      	pop	{r7}
 80055b4:	4770      	bx	lr

080055b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055b6:	b480      	push	{r7}
 80055b8:	b083      	sub	sp, #12
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055be:	bf00      	nop
 80055c0:	370c      	adds	r7, #12
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bc80      	pop	{r7}
 80055c6:	4770      	bx	lr

080055c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055d0:	bf00      	nop
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bc80      	pop	{r7}
 80055d8:	4770      	bx	lr
	...

080055dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80055dc:	b480      	push	{r7}
 80055de:	b085      	sub	sp, #20
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a25      	ldr	r2, [pc, #148]	; (8005684 <TIM_Base_SetConfig+0xa8>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d007      	beq.n	8005604 <TIM_Base_SetConfig+0x28>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055fa:	d003      	beq.n	8005604 <TIM_Base_SetConfig+0x28>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a22      	ldr	r2, [pc, #136]	; (8005688 <TIM_Base_SetConfig+0xac>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d108      	bne.n	8005616 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800560a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	4313      	orrs	r3, r2
 8005614:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a1a      	ldr	r2, [pc, #104]	; (8005684 <TIM_Base_SetConfig+0xa8>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d007      	beq.n	800562e <TIM_Base_SetConfig+0x52>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005624:	d003      	beq.n	800562e <TIM_Base_SetConfig+0x52>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a17      	ldr	r2, [pc, #92]	; (8005688 <TIM_Base_SetConfig+0xac>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d108      	bne.n	8005640 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005634:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	68fa      	ldr	r2, [r7, #12]
 800563c:	4313      	orrs	r3, r2
 800563e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	695b      	ldr	r3, [r3, #20]
 800564a:	4313      	orrs	r3, r2
 800564c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	689a      	ldr	r2, [r3, #8]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a07      	ldr	r2, [pc, #28]	; (8005684 <TIM_Base_SetConfig+0xa8>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d103      	bne.n	8005674 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	691a      	ldr	r2, [r3, #16]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	615a      	str	r2, [r3, #20]
}
 800567a:	bf00      	nop
 800567c:	3714      	adds	r7, #20
 800567e:	46bd      	mov	sp, r7
 8005680:	bc80      	pop	{r7}
 8005682:	4770      	bx	lr
 8005684:	40012c00 	.word	0x40012c00
 8005688:	40000400 	.word	0x40000400

0800568c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800568c:	b480      	push	{r7}
 800568e:	b087      	sub	sp, #28
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a1b      	ldr	r3, [r3, #32]
 800569a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6a1b      	ldr	r3, [r3, #32]
 80056a0:	f023 0201 	bic.w	r2, r3, #1
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	699b      	ldr	r3, [r3, #24]
 80056b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f023 0303 	bic.w	r3, r3, #3
 80056c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	f023 0302 	bic.w	r3, r3, #2
 80056d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	697a      	ldr	r2, [r7, #20]
 80056dc:	4313      	orrs	r3, r2
 80056de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4a1c      	ldr	r2, [pc, #112]	; (8005754 <TIM_OC1_SetConfig+0xc8>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d10c      	bne.n	8005702 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	f023 0308 	bic.w	r3, r3, #8
 80056ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	697a      	ldr	r2, [r7, #20]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	f023 0304 	bic.w	r3, r3, #4
 8005700:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a13      	ldr	r2, [pc, #76]	; (8005754 <TIM_OC1_SetConfig+0xc8>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d111      	bne.n	800572e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005710:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005718:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	693a      	ldr	r2, [r7, #16]
 8005720:	4313      	orrs	r3, r2
 8005722:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	699b      	ldr	r3, [r3, #24]
 8005728:	693a      	ldr	r2, [r7, #16]
 800572a:	4313      	orrs	r3, r2
 800572c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	693a      	ldr	r2, [r7, #16]
 8005732:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	685a      	ldr	r2, [r3, #4]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	697a      	ldr	r2, [r7, #20]
 8005746:	621a      	str	r2, [r3, #32]
}
 8005748:	bf00      	nop
 800574a:	371c      	adds	r7, #28
 800574c:	46bd      	mov	sp, r7
 800574e:	bc80      	pop	{r7}
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop
 8005754:	40012c00 	.word	0x40012c00

08005758 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005758:	b480      	push	{r7}
 800575a:	b087      	sub	sp, #28
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a1b      	ldr	r3, [r3, #32]
 8005766:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6a1b      	ldr	r3, [r3, #32]
 800576c:	f023 0210 	bic.w	r2, r3, #16
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	699b      	ldr	r3, [r3, #24]
 800577e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005786:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800578e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	021b      	lsls	r3, r3, #8
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	4313      	orrs	r3, r2
 800579a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	f023 0320 	bic.w	r3, r3, #32
 80057a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	011b      	lsls	r3, r3, #4
 80057aa:	697a      	ldr	r2, [r7, #20]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a1d      	ldr	r2, [pc, #116]	; (8005828 <TIM_OC2_SetConfig+0xd0>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d10d      	bne.n	80057d4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	011b      	lsls	r3, r3, #4
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a14      	ldr	r2, [pc, #80]	; (8005828 <TIM_OC2_SetConfig+0xd0>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d113      	bne.n	8005804 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	695b      	ldr	r3, [r3, #20]
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	693a      	ldr	r2, [r7, #16]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	699b      	ldr	r3, [r3, #24]
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	693a      	ldr	r2, [r7, #16]
 8005800:	4313      	orrs	r3, r2
 8005802:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	693a      	ldr	r2, [r7, #16]
 8005808:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	685a      	ldr	r2, [r3, #4]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	621a      	str	r2, [r3, #32]
}
 800581e:	bf00      	nop
 8005820:	371c      	adds	r7, #28
 8005822:	46bd      	mov	sp, r7
 8005824:	bc80      	pop	{r7}
 8005826:	4770      	bx	lr
 8005828:	40012c00 	.word	0x40012c00

0800582c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800582c:	b480      	push	{r7}
 800582e:	b087      	sub	sp, #28
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a1b      	ldr	r3, [r3, #32]
 800583a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a1b      	ldr	r3, [r3, #32]
 8005840:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	69db      	ldr	r3, [r3, #28]
 8005852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800585a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f023 0303 	bic.w	r3, r3, #3
 8005862:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	68fa      	ldr	r2, [r7, #12]
 800586a:	4313      	orrs	r3, r2
 800586c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005874:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	021b      	lsls	r3, r3, #8
 800587c:	697a      	ldr	r2, [r7, #20]
 800587e:	4313      	orrs	r3, r2
 8005880:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a1d      	ldr	r2, [pc, #116]	; (80058fc <TIM_OC3_SetConfig+0xd0>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d10d      	bne.n	80058a6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005890:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	021b      	lsls	r3, r3, #8
 8005898:	697a      	ldr	r2, [r7, #20]
 800589a:	4313      	orrs	r3, r2
 800589c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a14      	ldr	r2, [pc, #80]	; (80058fc <TIM_OC3_SetConfig+0xd0>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d113      	bne.n	80058d6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	695b      	ldr	r3, [r3, #20]
 80058c2:	011b      	lsls	r3, r3, #4
 80058c4:	693a      	ldr	r2, [r7, #16]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	011b      	lsls	r3, r3, #4
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	693a      	ldr	r2, [r7, #16]
 80058da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	685a      	ldr	r2, [r3, #4]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	697a      	ldr	r2, [r7, #20]
 80058ee:	621a      	str	r2, [r3, #32]
}
 80058f0:	bf00      	nop
 80058f2:	371c      	adds	r7, #28
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bc80      	pop	{r7}
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop
 80058fc:	40012c00 	.word	0x40012c00

08005900 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005900:	b480      	push	{r7}
 8005902:	b087      	sub	sp, #28
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a1b      	ldr	r3, [r3, #32]
 800590e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6a1b      	ldr	r3, [r3, #32]
 8005914:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	69db      	ldr	r3, [r3, #28]
 8005926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800592e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005936:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	021b      	lsls	r3, r3, #8
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	4313      	orrs	r3, r2
 8005942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800594a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	031b      	lsls	r3, r3, #12
 8005952:	693a      	ldr	r2, [r7, #16]
 8005954:	4313      	orrs	r3, r2
 8005956:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4a0f      	ldr	r2, [pc, #60]	; (8005998 <TIM_OC4_SetConfig+0x98>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d109      	bne.n	8005974 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005966:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	695b      	ldr	r3, [r3, #20]
 800596c:	019b      	lsls	r3, r3, #6
 800596e:	697a      	ldr	r2, [r7, #20]
 8005970:	4313      	orrs	r3, r2
 8005972:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	685a      	ldr	r2, [r3, #4]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	693a      	ldr	r2, [r7, #16]
 800598c:	621a      	str	r2, [r3, #32]
}
 800598e:	bf00      	nop
 8005990:	371c      	adds	r7, #28
 8005992:	46bd      	mov	sp, r7
 8005994:	bc80      	pop	{r7}
 8005996:	4770      	bx	lr
 8005998:	40012c00 	.word	0x40012c00

0800599c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b086      	sub	sp, #24
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059a6:	2300      	movs	r3, #0
 80059a8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059b8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	693a      	ldr	r2, [r7, #16]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	f023 0307 	bic.w	r3, r3, #7
 80059ca:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	693a      	ldr	r2, [r7, #16]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	693a      	ldr	r2, [r7, #16]
 80059dc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	2b70      	cmp	r3, #112	; 0x70
 80059e4:	d01a      	beq.n	8005a1c <TIM_SlaveTimer_SetConfig+0x80>
 80059e6:	2b70      	cmp	r3, #112	; 0x70
 80059e8:	d860      	bhi.n	8005aac <TIM_SlaveTimer_SetConfig+0x110>
 80059ea:	2b60      	cmp	r3, #96	; 0x60
 80059ec:	d054      	beq.n	8005a98 <TIM_SlaveTimer_SetConfig+0xfc>
 80059ee:	2b60      	cmp	r3, #96	; 0x60
 80059f0:	d85c      	bhi.n	8005aac <TIM_SlaveTimer_SetConfig+0x110>
 80059f2:	2b50      	cmp	r3, #80	; 0x50
 80059f4:	d046      	beq.n	8005a84 <TIM_SlaveTimer_SetConfig+0xe8>
 80059f6:	2b50      	cmp	r3, #80	; 0x50
 80059f8:	d858      	bhi.n	8005aac <TIM_SlaveTimer_SetConfig+0x110>
 80059fa:	2b40      	cmp	r3, #64	; 0x40
 80059fc:	d019      	beq.n	8005a32 <TIM_SlaveTimer_SetConfig+0x96>
 80059fe:	2b40      	cmp	r3, #64	; 0x40
 8005a00:	d854      	bhi.n	8005aac <TIM_SlaveTimer_SetConfig+0x110>
 8005a02:	2b30      	cmp	r3, #48	; 0x30
 8005a04:	d055      	beq.n	8005ab2 <TIM_SlaveTimer_SetConfig+0x116>
 8005a06:	2b30      	cmp	r3, #48	; 0x30
 8005a08:	d850      	bhi.n	8005aac <TIM_SlaveTimer_SetConfig+0x110>
 8005a0a:	2b20      	cmp	r3, #32
 8005a0c:	d051      	beq.n	8005ab2 <TIM_SlaveTimer_SetConfig+0x116>
 8005a0e:	2b20      	cmp	r3, #32
 8005a10:	d84c      	bhi.n	8005aac <TIM_SlaveTimer_SetConfig+0x110>
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d04d      	beq.n	8005ab2 <TIM_SlaveTimer_SetConfig+0x116>
 8005a16:	2b10      	cmp	r3, #16
 8005a18:	d04b      	beq.n	8005ab2 <TIM_SlaveTimer_SetConfig+0x116>
 8005a1a:	e047      	b.n	8005aac <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6818      	ldr	r0, [r3, #0]
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	68d9      	ldr	r1, [r3, #12]
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	689a      	ldr	r2, [r3, #8]
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	691b      	ldr	r3, [r3, #16]
 8005a2c:	f000 f9ac 	bl	8005d88 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8005a30:	e040      	b.n	8005ab4 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	2b05      	cmp	r3, #5
 8005a38:	d101      	bne.n	8005a3e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e03b      	b.n	8005ab6 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	6a1b      	ldr	r3, [r3, #32]
 8005a44:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	6a1a      	ldr	r2, [r3, #32]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f022 0201 	bic.w	r2, r2, #1
 8005a54:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	699b      	ldr	r3, [r3, #24]
 8005a5c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a64:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	011b      	lsls	r3, r3, #4
 8005a6c:	68ba      	ldr	r2, [r7, #8]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	68ba      	ldr	r2, [r7, #8]
 8005a78:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	621a      	str	r2, [r3, #32]
      break;
 8005a82:	e017      	b.n	8005ab4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6818      	ldr	r0, [r3, #0]
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	6899      	ldr	r1, [r3, #8]
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	691b      	ldr	r3, [r3, #16]
 8005a90:	461a      	mov	r2, r3
 8005a92:	f000 f869 	bl	8005b68 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8005a96:	e00d      	b.n	8005ab4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6818      	ldr	r0, [r3, #0]
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	6899      	ldr	r1, [r3, #8]
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	f000 f8c9 	bl	8005c3c <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8005aaa:	e003      	b.n	8005ab4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	75fb      	strb	r3, [r7, #23]
      break;
 8005ab0:	e000      	b.n	8005ab4 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8005ab2:	bf00      	nop
  }

  return status;
 8005ab4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3718      	adds	r7, #24
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
	...

08005ac0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b087      	sub	sp, #28
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	607a      	str	r2, [r7, #4]
 8005acc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6a1b      	ldr	r3, [r3, #32]
 8005ad2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6a1b      	ldr	r3, [r3, #32]
 8005ad8:	f023 0201 	bic.w	r2, r3, #1
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	699b      	ldr	r3, [r3, #24]
 8005ae4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	4a1d      	ldr	r2, [pc, #116]	; (8005b60 <TIM_TI1_SetConfig+0xa0>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d007      	beq.n	8005afe <TIM_TI1_SetConfig+0x3e>
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005af4:	d003      	beq.n	8005afe <TIM_TI1_SetConfig+0x3e>
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	4a1a      	ldr	r2, [pc, #104]	; (8005b64 <TIM_TI1_SetConfig+0xa4>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d101      	bne.n	8005b02 <TIM_TI1_SetConfig+0x42>
 8005afe:	2301      	movs	r3, #1
 8005b00:	e000      	b.n	8005b04 <TIM_TI1_SetConfig+0x44>
 8005b02:	2300      	movs	r3, #0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d008      	beq.n	8005b1a <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	f023 0303 	bic.w	r3, r3, #3
 8005b0e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005b10:	697a      	ldr	r2, [r7, #20]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4313      	orrs	r3, r2
 8005b16:	617b      	str	r3, [r7, #20]
 8005b18:	e003      	b.n	8005b22 <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	f043 0301 	orr.w	r3, r3, #1
 8005b20:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	011b      	lsls	r3, r3, #4
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	697a      	ldr	r2, [r7, #20]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	f023 030a 	bic.w	r3, r3, #10
 8005b3c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	f003 030a 	and.w	r3, r3, #10
 8005b44:	693a      	ldr	r2, [r7, #16]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	697a      	ldr	r2, [r7, #20]
 8005b4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	693a      	ldr	r2, [r7, #16]
 8005b54:	621a      	str	r2, [r3, #32]
}
 8005b56:	bf00      	nop
 8005b58:	371c      	adds	r7, #28
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bc80      	pop	{r7}
 8005b5e:	4770      	bx	lr
 8005b60:	40012c00 	.word	0x40012c00
 8005b64:	40000400 	.word	0x40000400

08005b68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b087      	sub	sp, #28
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	60b9      	str	r1, [r7, #8]
 8005b72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6a1b      	ldr	r3, [r3, #32]
 8005b78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	6a1b      	ldr	r3, [r3, #32]
 8005b7e:	f023 0201 	bic.w	r2, r3, #1
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	699b      	ldr	r3, [r3, #24]
 8005b8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	011b      	lsls	r3, r3, #4
 8005b98:	693a      	ldr	r2, [r7, #16]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	f023 030a 	bic.w	r3, r3, #10
 8005ba4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ba6:	697a      	ldr	r2, [r7, #20]
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	693a      	ldr	r2, [r7, #16]
 8005bb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	697a      	ldr	r2, [r7, #20]
 8005bb8:	621a      	str	r2, [r3, #32]
}
 8005bba:	bf00      	nop
 8005bbc:	371c      	adds	r7, #28
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bc80      	pop	{r7}
 8005bc2:	4770      	bx	lr

08005bc4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b087      	sub	sp, #28
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	607a      	str	r2, [r7, #4]
 8005bd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6a1b      	ldr	r3, [r3, #32]
 8005bd6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6a1b      	ldr	r3, [r3, #32]
 8005bdc:	f023 0210 	bic.w	r2, r3, #16
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	699b      	ldr	r3, [r3, #24]
 8005be8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bf0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	021b      	lsls	r3, r3, #8
 8005bf6:	693a      	ldr	r2, [r7, #16]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	031b      	lsls	r3, r3, #12
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	693a      	ldr	r2, [r7, #16]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c16:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	011b      	lsls	r3, r3, #4
 8005c1c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005c20:	697a      	ldr	r2, [r7, #20]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	693a      	ldr	r2, [r7, #16]
 8005c2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	697a      	ldr	r2, [r7, #20]
 8005c30:	621a      	str	r2, [r3, #32]
}
 8005c32:	bf00      	nop
 8005c34:	371c      	adds	r7, #28
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bc80      	pop	{r7}
 8005c3a:	4770      	bx	lr

08005c3c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b087      	sub	sp, #28
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6a1b      	ldr	r3, [r3, #32]
 8005c4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6a1b      	ldr	r3, [r3, #32]
 8005c52:	f023 0210 	bic.w	r2, r3, #16
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	031b      	lsls	r3, r3, #12
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c78:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	011b      	lsls	r3, r3, #4
 8005c7e:	697a      	ldr	r2, [r7, #20]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	693a      	ldr	r2, [r7, #16]
 8005c88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	697a      	ldr	r2, [r7, #20]
 8005c8e:	621a      	str	r2, [r3, #32]
}
 8005c90:	bf00      	nop
 8005c92:	371c      	adds	r7, #28
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bc80      	pop	{r7}
 8005c98:	4770      	bx	lr

08005c9a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	b087      	sub	sp, #28
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	60f8      	str	r0, [r7, #12]
 8005ca2:	60b9      	str	r1, [r7, #8]
 8005ca4:	607a      	str	r2, [r7, #4]
 8005ca6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6a1b      	ldr	r3, [r3, #32]
 8005cac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6a1b      	ldr	r3, [r3, #32]
 8005cb2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	69db      	ldr	r3, [r3, #28]
 8005cbe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	f023 0303 	bic.w	r3, r3, #3
 8005cc6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8005cc8:	693a      	ldr	r2, [r7, #16]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cd6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	011b      	lsls	r3, r3, #4
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	693a      	ldr	r2, [r7, #16]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005cea:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	021b      	lsls	r3, r3, #8
 8005cf0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cf4:	697a      	ldr	r2, [r7, #20]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	693a      	ldr	r2, [r7, #16]
 8005cfe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	697a      	ldr	r2, [r7, #20]
 8005d04:	621a      	str	r2, [r3, #32]
}
 8005d06:	bf00      	nop
 8005d08:	371c      	adds	r7, #28
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bc80      	pop	{r7}
 8005d0e:	4770      	bx	lr

08005d10 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b087      	sub	sp, #28
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	607a      	str	r2, [r7, #4]
 8005d1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6a1b      	ldr	r3, [r3, #32]
 8005d22:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6a1b      	ldr	r3, [r3, #32]
 8005d28:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	69db      	ldr	r3, [r3, #28]
 8005d34:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d3c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	021b      	lsls	r3, r3, #8
 8005d42:	693a      	ldr	r2, [r7, #16]
 8005d44:	4313      	orrs	r3, r2
 8005d46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d4e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	031b      	lsls	r3, r3, #12
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	693a      	ldr	r2, [r7, #16]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d62:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	031b      	lsls	r3, r3, #12
 8005d68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d6c:	697a      	ldr	r2, [r7, #20]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	693a      	ldr	r2, [r7, #16]
 8005d76:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	697a      	ldr	r2, [r7, #20]
 8005d7c:	621a      	str	r2, [r3, #32]
}
 8005d7e:	bf00      	nop
 8005d80:	371c      	adds	r7, #28
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bc80      	pop	{r7}
 8005d86:	4770      	bx	lr

08005d88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b087      	sub	sp, #28
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	607a      	str	r2, [r7, #4]
 8005d94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005da2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	021a      	lsls	r2, r3, #8
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	431a      	orrs	r2, r3
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	697a      	ldr	r2, [r7, #20]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	697a      	ldr	r2, [r7, #20]
 8005dba:	609a      	str	r2, [r3, #8]
}
 8005dbc:	bf00      	nop
 8005dbe:	371c      	adds	r7, #28
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bc80      	pop	{r7}
 8005dc4:	4770      	bx	lr

08005dc6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005dc6:	b480      	push	{r7}
 8005dc8:	b087      	sub	sp, #28
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	60f8      	str	r0, [r7, #12]
 8005dce:	60b9      	str	r1, [r7, #8]
 8005dd0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	f003 031f 	and.w	r3, r3, #31
 8005dd8:	2201      	movs	r2, #1
 8005dda:	fa02 f303 	lsl.w	r3, r2, r3
 8005dde:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6a1a      	ldr	r2, [r3, #32]
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	43db      	mvns	r3, r3
 8005de8:	401a      	ands	r2, r3
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6a1a      	ldr	r2, [r3, #32]
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	f003 031f 	and.w	r3, r3, #31
 8005df8:	6879      	ldr	r1, [r7, #4]
 8005dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8005dfe:	431a      	orrs	r2, r3
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	621a      	str	r2, [r3, #32]
}
 8005e04:	bf00      	nop
 8005e06:	371c      	adds	r7, #28
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bc80      	pop	{r7}
 8005e0c:	4770      	bx	lr
	...

08005e10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b085      	sub	sp, #20
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d101      	bne.n	8005e28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e24:	2302      	movs	r3, #2
 8005e26:	e041      	b.n	8005eac <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2202      	movs	r2, #2
 8005e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a14      	ldr	r2, [pc, #80]	; (8005eb8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d009      	beq.n	8005e80 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e74:	d004      	beq.n	8005e80 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a10      	ldr	r2, [pc, #64]	; (8005ebc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d10c      	bne.n	8005e9a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e86:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	68ba      	ldr	r2, [r7, #8]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	68ba      	ldr	r2, [r7, #8]
 8005e98:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005eaa:	2300      	movs	r3, #0
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3714      	adds	r7, #20
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bc80      	pop	{r7}
 8005eb4:	4770      	bx	lr
 8005eb6:	bf00      	nop
 8005eb8:	40012c00 	.word	0x40012c00
 8005ebc:	40000400 	.word	0x40000400

08005ec0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ec8:	bf00      	nop
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bc80      	pop	{r7}
 8005ed0:	4770      	bx	lr

08005ed2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ed2:	b480      	push	{r7}
 8005ed4:	b083      	sub	sp, #12
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005eda:	bf00      	nop
 8005edc:	370c      	adds	r7, #12
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bc80      	pop	{r7}
 8005ee2:	4770      	bx	lr

08005ee4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d101      	bne.n	8005ef6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e042      	b.n	8005f7c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d106      	bne.n	8005f10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f7fa ff2a 	bl	8000d64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2224      	movs	r2, #36	; 0x24
 8005f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	68da      	ldr	r2, [r3, #12]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 fc7f 	bl	800682c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	691a      	ldr	r2, [r3, #16]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	695a      	ldr	r2, [r3, #20]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68da      	ldr	r2, [r3, #12]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2220      	movs	r2, #32
 8005f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2220      	movs	r2, #32
 8005f70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3708      	adds	r7, #8
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b0ba      	sub	sp, #232	; 0xe8
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	695b      	ldr	r3, [r3, #20]
 8005fa6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005faa:	2300      	movs	r3, #0
 8005fac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fba:	f003 030f 	and.w	r3, r3, #15
 8005fbe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005fc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d10f      	bne.n	8005fea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fce:	f003 0320 	and.w	r3, r3, #32
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d009      	beq.n	8005fea <HAL_UART_IRQHandler+0x66>
 8005fd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fda:	f003 0320 	and.w	r3, r3, #32
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d003      	beq.n	8005fea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 fb63 	bl	80066ae <UART_Receive_IT>
      return;
 8005fe8:	e25b      	b.n	80064a2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005fea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	f000 80de 	beq.w	80061b0 <HAL_UART_IRQHandler+0x22c>
 8005ff4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ff8:	f003 0301 	and.w	r3, r3, #1
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d106      	bne.n	800600e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006004:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006008:	2b00      	cmp	r3, #0
 800600a:	f000 80d1 	beq.w	80061b0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800600e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006012:	f003 0301 	and.w	r3, r3, #1
 8006016:	2b00      	cmp	r3, #0
 8006018:	d00b      	beq.n	8006032 <HAL_UART_IRQHandler+0xae>
 800601a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800601e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006022:	2b00      	cmp	r3, #0
 8006024:	d005      	beq.n	8006032 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800602a:	f043 0201 	orr.w	r2, r3, #1
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006036:	f003 0304 	and.w	r3, r3, #4
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00b      	beq.n	8006056 <HAL_UART_IRQHandler+0xd2>
 800603e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006042:	f003 0301 	and.w	r3, r3, #1
 8006046:	2b00      	cmp	r3, #0
 8006048:	d005      	beq.n	8006056 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800604e:	f043 0202 	orr.w	r2, r3, #2
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800605a:	f003 0302 	and.w	r3, r3, #2
 800605e:	2b00      	cmp	r3, #0
 8006060:	d00b      	beq.n	800607a <HAL_UART_IRQHandler+0xf6>
 8006062:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006066:	f003 0301 	and.w	r3, r3, #1
 800606a:	2b00      	cmp	r3, #0
 800606c:	d005      	beq.n	800607a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006072:	f043 0204 	orr.w	r2, r3, #4
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800607a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800607e:	f003 0308 	and.w	r3, r3, #8
 8006082:	2b00      	cmp	r3, #0
 8006084:	d011      	beq.n	80060aa <HAL_UART_IRQHandler+0x126>
 8006086:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800608a:	f003 0320 	and.w	r3, r3, #32
 800608e:	2b00      	cmp	r3, #0
 8006090:	d105      	bne.n	800609e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006092:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006096:	f003 0301 	and.w	r3, r3, #1
 800609a:	2b00      	cmp	r3, #0
 800609c:	d005      	beq.n	80060aa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060a2:	f043 0208 	orr.w	r2, r3, #8
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	f000 81f2 	beq.w	8006498 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80060b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060b8:	f003 0320 	and.w	r3, r3, #32
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d008      	beq.n	80060d2 <HAL_UART_IRQHandler+0x14e>
 80060c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060c4:	f003 0320 	and.w	r3, r3, #32
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d002      	beq.n	80060d2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f000 faee 	bl	80066ae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	695b      	ldr	r3, [r3, #20]
 80060d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060dc:	2b00      	cmp	r3, #0
 80060de:	bf14      	ite	ne
 80060e0:	2301      	movne	r3, #1
 80060e2:	2300      	moveq	r3, #0
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ee:	f003 0308 	and.w	r3, r3, #8
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d103      	bne.n	80060fe <HAL_UART_IRQHandler+0x17a>
 80060f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d04f      	beq.n	800619e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 f9f8 	bl	80064f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	695b      	ldr	r3, [r3, #20]
 800610a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800610e:	2b00      	cmp	r3, #0
 8006110:	d041      	beq.n	8006196 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	3314      	adds	r3, #20
 8006118:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800611c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006120:	e853 3f00 	ldrex	r3, [r3]
 8006124:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006128:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800612c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006130:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	3314      	adds	r3, #20
 800613a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800613e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006142:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006146:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800614a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800614e:	e841 2300 	strex	r3, r2, [r1]
 8006152:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006156:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d1d9      	bne.n	8006112 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006162:	2b00      	cmp	r3, #0
 8006164:	d013      	beq.n	800618e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800616a:	4a7e      	ldr	r2, [pc, #504]	; (8006364 <HAL_UART_IRQHandler+0x3e0>)
 800616c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006172:	4618      	mov	r0, r3
 8006174:	f7fb f89a 	bl	80012ac <HAL_DMA_Abort_IT>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d016      	beq.n	80061ac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006188:	4610      	mov	r0, r2
 800618a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800618c:	e00e      	b.n	80061ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 f99c 	bl	80064cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006194:	e00a      	b.n	80061ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 f998 	bl	80064cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800619c:	e006      	b.n	80061ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 f994 	bl	80064cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80061aa:	e175      	b.n	8006498 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061ac:	bf00      	nop
    return;
 80061ae:	e173      	b.n	8006498 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	f040 814f 	bne.w	8006458 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80061ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061be:	f003 0310 	and.w	r3, r3, #16
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	f000 8148 	beq.w	8006458 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80061c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061cc:	f003 0310 	and.w	r3, r3, #16
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	f000 8141 	beq.w	8006458 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80061d6:	2300      	movs	r3, #0
 80061d8:	60bb      	str	r3, [r7, #8]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	60bb      	str	r3, [r7, #8]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	60bb      	str	r3, [r7, #8]
 80061ea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	695b      	ldr	r3, [r3, #20]
 80061f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	f000 80b6 	beq.w	8006368 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006208:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800620c:	2b00      	cmp	r3, #0
 800620e:	f000 8145 	beq.w	800649c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006216:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800621a:	429a      	cmp	r2, r3
 800621c:	f080 813e 	bcs.w	800649c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006226:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800622c:	699b      	ldr	r3, [r3, #24]
 800622e:	2b20      	cmp	r3, #32
 8006230:	f000 8088 	beq.w	8006344 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	330c      	adds	r3, #12
 800623a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800623e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006242:	e853 3f00 	ldrex	r3, [r3]
 8006246:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800624a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800624e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006252:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	330c      	adds	r3, #12
 800625c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006260:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006264:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006268:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800626c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006270:	e841 2300 	strex	r3, r2, [r1]
 8006274:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006278:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800627c:	2b00      	cmp	r3, #0
 800627e:	d1d9      	bne.n	8006234 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	3314      	adds	r3, #20
 8006286:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006288:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800628a:	e853 3f00 	ldrex	r3, [r3]
 800628e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006290:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006292:	f023 0301 	bic.w	r3, r3, #1
 8006296:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	3314      	adds	r3, #20
 80062a0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80062a4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80062a8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062aa:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80062ac:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80062b0:	e841 2300 	strex	r3, r2, [r1]
 80062b4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80062b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d1e1      	bne.n	8006280 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	3314      	adds	r3, #20
 80062c2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062c6:	e853 3f00 	ldrex	r3, [r3]
 80062ca:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80062cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	3314      	adds	r3, #20
 80062dc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80062e0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80062e2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80062e6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80062e8:	e841 2300 	strex	r3, r2, [r1]
 80062ec:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80062ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d1e3      	bne.n	80062bc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2220      	movs	r2, #32
 80062f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	330c      	adds	r3, #12
 8006308:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800630a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800630c:	e853 3f00 	ldrex	r3, [r3]
 8006310:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006312:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006314:	f023 0310 	bic.w	r3, r3, #16
 8006318:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	330c      	adds	r3, #12
 8006322:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006326:	65ba      	str	r2, [r7, #88]	; 0x58
 8006328:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800632a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800632c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800632e:	e841 2300 	strex	r3, r2, [r1]
 8006332:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006334:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006336:	2b00      	cmp	r3, #0
 8006338:	d1e3      	bne.n	8006302 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800633e:	4618      	mov	r0, r3
 8006340:	f7fa ff78 	bl	8001234 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2202      	movs	r2, #2
 8006348:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006352:	b29b      	uxth	r3, r3
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	b29b      	uxth	r3, r3
 8006358:	4619      	mov	r1, r3
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 f8bf 	bl	80064de <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006360:	e09c      	b.n	800649c <HAL_UART_IRQHandler+0x518>
 8006362:	bf00      	nop
 8006364:	080065b9 	.word	0x080065b9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006370:	b29b      	uxth	r3, r3
 8006372:	1ad3      	subs	r3, r2, r3
 8006374:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800637c:	b29b      	uxth	r3, r3
 800637e:	2b00      	cmp	r3, #0
 8006380:	f000 808e 	beq.w	80064a0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006384:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006388:	2b00      	cmp	r3, #0
 800638a:	f000 8089 	beq.w	80064a0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	330c      	adds	r3, #12
 8006394:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006398:	e853 3f00 	ldrex	r3, [r3]
 800639c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800639e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	330c      	adds	r3, #12
 80063ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80063b2:	647a      	str	r2, [r7, #68]	; 0x44
 80063b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80063b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063ba:	e841 2300 	strex	r3, r2, [r1]
 80063be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80063c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d1e3      	bne.n	800638e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	3314      	adds	r3, #20
 80063cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d0:	e853 3f00 	ldrex	r3, [r3]
 80063d4:	623b      	str	r3, [r7, #32]
   return(result);
 80063d6:	6a3b      	ldr	r3, [r7, #32]
 80063d8:	f023 0301 	bic.w	r3, r3, #1
 80063dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	3314      	adds	r3, #20
 80063e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80063ea:	633a      	str	r2, [r7, #48]	; 0x30
 80063ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063f2:	e841 2300 	strex	r3, r2, [r1]
 80063f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80063f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d1e3      	bne.n	80063c6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2220      	movs	r2, #32
 8006402:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	330c      	adds	r3, #12
 8006412:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	e853 3f00 	ldrex	r3, [r3]
 800641a:	60fb      	str	r3, [r7, #12]
   return(result);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f023 0310 	bic.w	r3, r3, #16
 8006422:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	330c      	adds	r3, #12
 800642c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006430:	61fa      	str	r2, [r7, #28]
 8006432:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006434:	69b9      	ldr	r1, [r7, #24]
 8006436:	69fa      	ldr	r2, [r7, #28]
 8006438:	e841 2300 	strex	r3, r2, [r1]
 800643c:	617b      	str	r3, [r7, #20]
   return(result);
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d1e3      	bne.n	800640c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2202      	movs	r2, #2
 8006448:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800644a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800644e:	4619      	mov	r1, r3
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f000 f844 	bl	80064de <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006456:	e023      	b.n	80064a0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006458:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800645c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006460:	2b00      	cmp	r3, #0
 8006462:	d009      	beq.n	8006478 <HAL_UART_IRQHandler+0x4f4>
 8006464:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800646c:	2b00      	cmp	r3, #0
 800646e:	d003      	beq.n	8006478 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 f8b5 	bl	80065e0 <UART_Transmit_IT>
    return;
 8006476:	e014      	b.n	80064a2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006478:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800647c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006480:	2b00      	cmp	r3, #0
 8006482:	d00e      	beq.n	80064a2 <HAL_UART_IRQHandler+0x51e>
 8006484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800648c:	2b00      	cmp	r3, #0
 800648e:	d008      	beq.n	80064a2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 f8f4 	bl	800667e <UART_EndTransmit_IT>
    return;
 8006496:	e004      	b.n	80064a2 <HAL_UART_IRQHandler+0x51e>
    return;
 8006498:	bf00      	nop
 800649a:	e002      	b.n	80064a2 <HAL_UART_IRQHandler+0x51e>
      return;
 800649c:	bf00      	nop
 800649e:	e000      	b.n	80064a2 <HAL_UART_IRQHandler+0x51e>
      return;
 80064a0:	bf00      	nop
  }
}
 80064a2:	37e8      	adds	r7, #232	; 0xe8
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}

080064a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80064b0:	bf00      	nop
 80064b2:	370c      	adds	r7, #12
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bc80      	pop	{r7}
 80064b8:	4770      	bx	lr

080064ba <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80064ba:	b480      	push	{r7}
 80064bc:	b083      	sub	sp, #12
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80064c2:	bf00      	nop
 80064c4:	370c      	adds	r7, #12
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bc80      	pop	{r7}
 80064ca:	4770      	bx	lr

080064cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80064d4:	bf00      	nop
 80064d6:	370c      	adds	r7, #12
 80064d8:	46bd      	mov	sp, r7
 80064da:	bc80      	pop	{r7}
 80064dc:	4770      	bx	lr

080064de <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80064de:	b480      	push	{r7}
 80064e0:	b083      	sub	sp, #12
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
 80064e6:	460b      	mov	r3, r1
 80064e8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80064ea:	bf00      	nop
 80064ec:	370c      	adds	r7, #12
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bc80      	pop	{r7}
 80064f2:	4770      	bx	lr

080064f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b095      	sub	sp, #84	; 0x54
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	330c      	adds	r3, #12
 8006502:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006506:	e853 3f00 	ldrex	r3, [r3]
 800650a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800650c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006512:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	330c      	adds	r3, #12
 800651a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800651c:	643a      	str	r2, [r7, #64]	; 0x40
 800651e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006520:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006522:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006524:	e841 2300 	strex	r3, r2, [r1]
 8006528:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800652a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800652c:	2b00      	cmp	r3, #0
 800652e:	d1e5      	bne.n	80064fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	3314      	adds	r3, #20
 8006536:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006538:	6a3b      	ldr	r3, [r7, #32]
 800653a:	e853 3f00 	ldrex	r3, [r3]
 800653e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006540:	69fb      	ldr	r3, [r7, #28]
 8006542:	f023 0301 	bic.w	r3, r3, #1
 8006546:	64bb      	str	r3, [r7, #72]	; 0x48
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	3314      	adds	r3, #20
 800654e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006550:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006552:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006554:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006556:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006558:	e841 2300 	strex	r3, r2, [r1]
 800655c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800655e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006560:	2b00      	cmp	r3, #0
 8006562:	d1e5      	bne.n	8006530 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006568:	2b01      	cmp	r3, #1
 800656a:	d119      	bne.n	80065a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	330c      	adds	r3, #12
 8006572:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	e853 3f00 	ldrex	r3, [r3]
 800657a:	60bb      	str	r3, [r7, #8]
   return(result);
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	f023 0310 	bic.w	r3, r3, #16
 8006582:	647b      	str	r3, [r7, #68]	; 0x44
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	330c      	adds	r3, #12
 800658a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800658c:	61ba      	str	r2, [r7, #24]
 800658e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006590:	6979      	ldr	r1, [r7, #20]
 8006592:	69ba      	ldr	r2, [r7, #24]
 8006594:	e841 2300 	strex	r3, r2, [r1]
 8006598:	613b      	str	r3, [r7, #16]
   return(result);
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d1e5      	bne.n	800656c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2220      	movs	r2, #32
 80065a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	631a      	str	r2, [r3, #48]	; 0x30
}
 80065ae:	bf00      	nop
 80065b0:	3754      	adds	r7, #84	; 0x54
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bc80      	pop	{r7}
 80065b6:	4770      	bx	lr

080065b8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2200      	movs	r2, #0
 80065ca:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2200      	movs	r2, #0
 80065d0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80065d2:	68f8      	ldr	r0, [r7, #12]
 80065d4:	f7ff ff7a 	bl	80064cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065d8:	bf00      	nop
 80065da:	3710      	adds	r7, #16
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b085      	sub	sp, #20
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	2b21      	cmp	r3, #33	; 0x21
 80065f2:	d13e      	bne.n	8006672 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065fc:	d114      	bne.n	8006628 <UART_Transmit_IT+0x48>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	691b      	ldr	r3, [r3, #16]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d110      	bne.n	8006628 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a1b      	ldr	r3, [r3, #32]
 800660a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	881b      	ldrh	r3, [r3, #0]
 8006610:	461a      	mov	r2, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800661a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6a1b      	ldr	r3, [r3, #32]
 8006620:	1c9a      	adds	r2, r3, #2
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	621a      	str	r2, [r3, #32]
 8006626:	e008      	b.n	800663a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6a1b      	ldr	r3, [r3, #32]
 800662c:	1c59      	adds	r1, r3, #1
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	6211      	str	r1, [r2, #32]
 8006632:	781a      	ldrb	r2, [r3, #0]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800663e:	b29b      	uxth	r3, r3
 8006640:	3b01      	subs	r3, #1
 8006642:	b29b      	uxth	r3, r3
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	4619      	mov	r1, r3
 8006648:	84d1      	strh	r1, [r2, #38]	; 0x26
 800664a:	2b00      	cmp	r3, #0
 800664c:	d10f      	bne.n	800666e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68da      	ldr	r2, [r3, #12]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800665c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	68da      	ldr	r2, [r3, #12]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800666c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800666e:	2300      	movs	r3, #0
 8006670:	e000      	b.n	8006674 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006672:	2302      	movs	r3, #2
  }
}
 8006674:	4618      	mov	r0, r3
 8006676:	3714      	adds	r7, #20
 8006678:	46bd      	mov	sp, r7
 800667a:	bc80      	pop	{r7}
 800667c:	4770      	bx	lr

0800667e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800667e:	b580      	push	{r7, lr}
 8006680:	b082      	sub	sp, #8
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68da      	ldr	r2, [r3, #12]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006694:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2220      	movs	r2, #32
 800669a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f7ff ff02 	bl	80064a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80066a4:	2300      	movs	r3, #0
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3708      	adds	r7, #8
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}

080066ae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80066ae:	b580      	push	{r7, lr}
 80066b0:	b08c      	sub	sp, #48	; 0x30
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	2b22      	cmp	r3, #34	; 0x22
 80066c0:	f040 80ae 	bne.w	8006820 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066cc:	d117      	bne.n	80066fe <UART_Receive_IT+0x50>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d113      	bne.n	80066fe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80066d6:	2300      	movs	r3, #0
 80066d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066de:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066ec:	b29a      	uxth	r2, r3
 80066ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066f6:	1c9a      	adds	r2, r3, #2
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	629a      	str	r2, [r3, #40]	; 0x28
 80066fc:	e026      	b.n	800674c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006702:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006704:	2300      	movs	r3, #0
 8006706:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006710:	d007      	beq.n	8006722 <UART_Receive_IT+0x74>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d10a      	bne.n	8006730 <UART_Receive_IT+0x82>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	691b      	ldr	r3, [r3, #16]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d106      	bne.n	8006730 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	b2da      	uxtb	r2, r3
 800672a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800672c:	701a      	strb	r2, [r3, #0]
 800672e:	e008      	b.n	8006742 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	b2db      	uxtb	r3, r3
 8006738:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800673c:	b2da      	uxtb	r2, r3
 800673e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006740:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006746:	1c5a      	adds	r2, r3, #1
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006750:	b29b      	uxth	r3, r3
 8006752:	3b01      	subs	r3, #1
 8006754:	b29b      	uxth	r3, r3
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	4619      	mov	r1, r3
 800675a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800675c:	2b00      	cmp	r3, #0
 800675e:	d15d      	bne.n	800681c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	68da      	ldr	r2, [r3, #12]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f022 0220 	bic.w	r2, r2, #32
 800676e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	68da      	ldr	r2, [r3, #12]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800677e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	695a      	ldr	r2, [r3, #20]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f022 0201 	bic.w	r2, r2, #1
 800678e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2220      	movs	r2, #32
 8006794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d135      	bne.n	8006812 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2200      	movs	r2, #0
 80067aa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	330c      	adds	r3, #12
 80067b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	e853 3f00 	ldrex	r3, [r3]
 80067ba:	613b      	str	r3, [r7, #16]
   return(result);
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	f023 0310 	bic.w	r3, r3, #16
 80067c2:	627b      	str	r3, [r7, #36]	; 0x24
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	330c      	adds	r3, #12
 80067ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067cc:	623a      	str	r2, [r7, #32]
 80067ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d0:	69f9      	ldr	r1, [r7, #28]
 80067d2:	6a3a      	ldr	r2, [r7, #32]
 80067d4:	e841 2300 	strex	r3, r2, [r1]
 80067d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80067da:	69bb      	ldr	r3, [r7, #24]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d1e5      	bne.n	80067ac <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f003 0310 	and.w	r3, r3, #16
 80067ea:	2b10      	cmp	r3, #16
 80067ec:	d10a      	bne.n	8006804 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80067ee:	2300      	movs	r3, #0
 80067f0:	60fb      	str	r3, [r7, #12]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	60fb      	str	r3, [r7, #12]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	60fb      	str	r3, [r7, #12]
 8006802:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006808:	4619      	mov	r1, r3
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f7ff fe67 	bl	80064de <HAL_UARTEx_RxEventCallback>
 8006810:	e002      	b.n	8006818 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f7ff fe51 	bl	80064ba <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006818:	2300      	movs	r3, #0
 800681a:	e002      	b.n	8006822 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800681c:	2300      	movs	r3, #0
 800681e:	e000      	b.n	8006822 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006820:	2302      	movs	r3, #2
  }
}
 8006822:	4618      	mov	r0, r3
 8006824:	3730      	adds	r7, #48	; 0x30
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
	...

0800682c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	68da      	ldr	r2, [r3, #12]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	430a      	orrs	r2, r1
 8006848:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	689a      	ldr	r2, [r3, #8]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	691b      	ldr	r3, [r3, #16]
 8006852:	431a      	orrs	r2, r3
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	695b      	ldr	r3, [r3, #20]
 8006858:	4313      	orrs	r3, r2
 800685a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006866:	f023 030c 	bic.w	r3, r3, #12
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	6812      	ldr	r2, [r2, #0]
 800686e:	68b9      	ldr	r1, [r7, #8]
 8006870:	430b      	orrs	r3, r1
 8006872:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	695b      	ldr	r3, [r3, #20]
 800687a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	699a      	ldr	r2, [r3, #24]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	430a      	orrs	r2, r1
 8006888:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a2c      	ldr	r2, [pc, #176]	; (8006940 <UART_SetConfig+0x114>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d103      	bne.n	800689c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006894:	f7fe f9bc 	bl	8004c10 <HAL_RCC_GetPCLK2Freq>
 8006898:	60f8      	str	r0, [r7, #12]
 800689a:	e002      	b.n	80068a2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800689c:	f7fe f9a4 	bl	8004be8 <HAL_RCC_GetPCLK1Freq>
 80068a0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80068a2:	68fa      	ldr	r2, [r7, #12]
 80068a4:	4613      	mov	r3, r2
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	4413      	add	r3, r2
 80068aa:	009a      	lsls	r2, r3, #2
 80068ac:	441a      	add	r2, r3
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80068b8:	4a22      	ldr	r2, [pc, #136]	; (8006944 <UART_SetConfig+0x118>)
 80068ba:	fba2 2303 	umull	r2, r3, r2, r3
 80068be:	095b      	lsrs	r3, r3, #5
 80068c0:	0119      	lsls	r1, r3, #4
 80068c2:	68fa      	ldr	r2, [r7, #12]
 80068c4:	4613      	mov	r3, r2
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	4413      	add	r3, r2
 80068ca:	009a      	lsls	r2, r3, #2
 80068cc:	441a      	add	r2, r3
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80068d8:	4b1a      	ldr	r3, [pc, #104]	; (8006944 <UART_SetConfig+0x118>)
 80068da:	fba3 0302 	umull	r0, r3, r3, r2
 80068de:	095b      	lsrs	r3, r3, #5
 80068e0:	2064      	movs	r0, #100	; 0x64
 80068e2:	fb00 f303 	mul.w	r3, r0, r3
 80068e6:	1ad3      	subs	r3, r2, r3
 80068e8:	011b      	lsls	r3, r3, #4
 80068ea:	3332      	adds	r3, #50	; 0x32
 80068ec:	4a15      	ldr	r2, [pc, #84]	; (8006944 <UART_SetConfig+0x118>)
 80068ee:	fba2 2303 	umull	r2, r3, r2, r3
 80068f2:	095b      	lsrs	r3, r3, #5
 80068f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80068f8:	4419      	add	r1, r3
 80068fa:	68fa      	ldr	r2, [r7, #12]
 80068fc:	4613      	mov	r3, r2
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	4413      	add	r3, r2
 8006902:	009a      	lsls	r2, r3, #2
 8006904:	441a      	add	r2, r3
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006910:	4b0c      	ldr	r3, [pc, #48]	; (8006944 <UART_SetConfig+0x118>)
 8006912:	fba3 0302 	umull	r0, r3, r3, r2
 8006916:	095b      	lsrs	r3, r3, #5
 8006918:	2064      	movs	r0, #100	; 0x64
 800691a:	fb00 f303 	mul.w	r3, r0, r3
 800691e:	1ad3      	subs	r3, r2, r3
 8006920:	011b      	lsls	r3, r3, #4
 8006922:	3332      	adds	r3, #50	; 0x32
 8006924:	4a07      	ldr	r2, [pc, #28]	; (8006944 <UART_SetConfig+0x118>)
 8006926:	fba2 2303 	umull	r2, r3, r2, r3
 800692a:	095b      	lsrs	r3, r3, #5
 800692c:	f003 020f 	and.w	r2, r3, #15
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	440a      	add	r2, r1
 8006936:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006938:	bf00      	nop
 800693a:	3710      	adds	r7, #16
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}
 8006940:	40013800 	.word	0x40013800
 8006944:	51eb851f 	.word	0x51eb851f

08006948 <__errno>:
 8006948:	4b01      	ldr	r3, [pc, #4]	; (8006950 <__errno+0x8>)
 800694a:	6818      	ldr	r0, [r3, #0]
 800694c:	4770      	bx	lr
 800694e:	bf00      	nop
 8006950:	2000000c 	.word	0x2000000c

08006954 <__libc_init_array>:
 8006954:	b570      	push	{r4, r5, r6, lr}
 8006956:	2600      	movs	r6, #0
 8006958:	4d0c      	ldr	r5, [pc, #48]	; (800698c <__libc_init_array+0x38>)
 800695a:	4c0d      	ldr	r4, [pc, #52]	; (8006990 <__libc_init_array+0x3c>)
 800695c:	1b64      	subs	r4, r4, r5
 800695e:	10a4      	asrs	r4, r4, #2
 8006960:	42a6      	cmp	r6, r4
 8006962:	d109      	bne.n	8006978 <__libc_init_array+0x24>
 8006964:	f000 fd18 	bl	8007398 <_init>
 8006968:	2600      	movs	r6, #0
 800696a:	4d0a      	ldr	r5, [pc, #40]	; (8006994 <__libc_init_array+0x40>)
 800696c:	4c0a      	ldr	r4, [pc, #40]	; (8006998 <__libc_init_array+0x44>)
 800696e:	1b64      	subs	r4, r4, r5
 8006970:	10a4      	asrs	r4, r4, #2
 8006972:	42a6      	cmp	r6, r4
 8006974:	d105      	bne.n	8006982 <__libc_init_array+0x2e>
 8006976:	bd70      	pop	{r4, r5, r6, pc}
 8006978:	f855 3b04 	ldr.w	r3, [r5], #4
 800697c:	4798      	blx	r3
 800697e:	3601      	adds	r6, #1
 8006980:	e7ee      	b.n	8006960 <__libc_init_array+0xc>
 8006982:	f855 3b04 	ldr.w	r3, [r5], #4
 8006986:	4798      	blx	r3
 8006988:	3601      	adds	r6, #1
 800698a:	e7f2      	b.n	8006972 <__libc_init_array+0x1e>
 800698c:	0800745c 	.word	0x0800745c
 8006990:	0800745c 	.word	0x0800745c
 8006994:	0800745c 	.word	0x0800745c
 8006998:	08007460 	.word	0x08007460

0800699c <memset>:
 800699c:	4603      	mov	r3, r0
 800699e:	4402      	add	r2, r0
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d100      	bne.n	80069a6 <memset+0xa>
 80069a4:	4770      	bx	lr
 80069a6:	f803 1b01 	strb.w	r1, [r3], #1
 80069aa:	e7f9      	b.n	80069a0 <memset+0x4>

080069ac <_puts_r>:
 80069ac:	b570      	push	{r4, r5, r6, lr}
 80069ae:	460e      	mov	r6, r1
 80069b0:	4605      	mov	r5, r0
 80069b2:	b118      	cbz	r0, 80069bc <_puts_r+0x10>
 80069b4:	6983      	ldr	r3, [r0, #24]
 80069b6:	b90b      	cbnz	r3, 80069bc <_puts_r+0x10>
 80069b8:	f000 fa44 	bl	8006e44 <__sinit>
 80069bc:	69ab      	ldr	r3, [r5, #24]
 80069be:	68ac      	ldr	r4, [r5, #8]
 80069c0:	b913      	cbnz	r3, 80069c8 <_puts_r+0x1c>
 80069c2:	4628      	mov	r0, r5
 80069c4:	f000 fa3e 	bl	8006e44 <__sinit>
 80069c8:	4b2c      	ldr	r3, [pc, #176]	; (8006a7c <_puts_r+0xd0>)
 80069ca:	429c      	cmp	r4, r3
 80069cc:	d120      	bne.n	8006a10 <_puts_r+0x64>
 80069ce:	686c      	ldr	r4, [r5, #4]
 80069d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80069d2:	07db      	lsls	r3, r3, #31
 80069d4:	d405      	bmi.n	80069e2 <_puts_r+0x36>
 80069d6:	89a3      	ldrh	r3, [r4, #12]
 80069d8:	0598      	lsls	r0, r3, #22
 80069da:	d402      	bmi.n	80069e2 <_puts_r+0x36>
 80069dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80069de:	f000 facf 	bl	8006f80 <__retarget_lock_acquire_recursive>
 80069e2:	89a3      	ldrh	r3, [r4, #12]
 80069e4:	0719      	lsls	r1, r3, #28
 80069e6:	d51d      	bpl.n	8006a24 <_puts_r+0x78>
 80069e8:	6923      	ldr	r3, [r4, #16]
 80069ea:	b1db      	cbz	r3, 8006a24 <_puts_r+0x78>
 80069ec:	3e01      	subs	r6, #1
 80069ee:	68a3      	ldr	r3, [r4, #8]
 80069f0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80069f4:	3b01      	subs	r3, #1
 80069f6:	60a3      	str	r3, [r4, #8]
 80069f8:	bb39      	cbnz	r1, 8006a4a <_puts_r+0x9e>
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	da38      	bge.n	8006a70 <_puts_r+0xc4>
 80069fe:	4622      	mov	r2, r4
 8006a00:	210a      	movs	r1, #10
 8006a02:	4628      	mov	r0, r5
 8006a04:	f000 f848 	bl	8006a98 <__swbuf_r>
 8006a08:	3001      	adds	r0, #1
 8006a0a:	d011      	beq.n	8006a30 <_puts_r+0x84>
 8006a0c:	250a      	movs	r5, #10
 8006a0e:	e011      	b.n	8006a34 <_puts_r+0x88>
 8006a10:	4b1b      	ldr	r3, [pc, #108]	; (8006a80 <_puts_r+0xd4>)
 8006a12:	429c      	cmp	r4, r3
 8006a14:	d101      	bne.n	8006a1a <_puts_r+0x6e>
 8006a16:	68ac      	ldr	r4, [r5, #8]
 8006a18:	e7da      	b.n	80069d0 <_puts_r+0x24>
 8006a1a:	4b1a      	ldr	r3, [pc, #104]	; (8006a84 <_puts_r+0xd8>)
 8006a1c:	429c      	cmp	r4, r3
 8006a1e:	bf08      	it	eq
 8006a20:	68ec      	ldreq	r4, [r5, #12]
 8006a22:	e7d5      	b.n	80069d0 <_puts_r+0x24>
 8006a24:	4621      	mov	r1, r4
 8006a26:	4628      	mov	r0, r5
 8006a28:	f000 f888 	bl	8006b3c <__swsetup_r>
 8006a2c:	2800      	cmp	r0, #0
 8006a2e:	d0dd      	beq.n	80069ec <_puts_r+0x40>
 8006a30:	f04f 35ff 	mov.w	r5, #4294967295
 8006a34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a36:	07da      	lsls	r2, r3, #31
 8006a38:	d405      	bmi.n	8006a46 <_puts_r+0x9a>
 8006a3a:	89a3      	ldrh	r3, [r4, #12]
 8006a3c:	059b      	lsls	r3, r3, #22
 8006a3e:	d402      	bmi.n	8006a46 <_puts_r+0x9a>
 8006a40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a42:	f000 fa9e 	bl	8006f82 <__retarget_lock_release_recursive>
 8006a46:	4628      	mov	r0, r5
 8006a48:	bd70      	pop	{r4, r5, r6, pc}
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	da04      	bge.n	8006a58 <_puts_r+0xac>
 8006a4e:	69a2      	ldr	r2, [r4, #24]
 8006a50:	429a      	cmp	r2, r3
 8006a52:	dc06      	bgt.n	8006a62 <_puts_r+0xb6>
 8006a54:	290a      	cmp	r1, #10
 8006a56:	d004      	beq.n	8006a62 <_puts_r+0xb6>
 8006a58:	6823      	ldr	r3, [r4, #0]
 8006a5a:	1c5a      	adds	r2, r3, #1
 8006a5c:	6022      	str	r2, [r4, #0]
 8006a5e:	7019      	strb	r1, [r3, #0]
 8006a60:	e7c5      	b.n	80069ee <_puts_r+0x42>
 8006a62:	4622      	mov	r2, r4
 8006a64:	4628      	mov	r0, r5
 8006a66:	f000 f817 	bl	8006a98 <__swbuf_r>
 8006a6a:	3001      	adds	r0, #1
 8006a6c:	d1bf      	bne.n	80069ee <_puts_r+0x42>
 8006a6e:	e7df      	b.n	8006a30 <_puts_r+0x84>
 8006a70:	250a      	movs	r5, #10
 8006a72:	6823      	ldr	r3, [r4, #0]
 8006a74:	1c5a      	adds	r2, r3, #1
 8006a76:	6022      	str	r2, [r4, #0]
 8006a78:	701d      	strb	r5, [r3, #0]
 8006a7a:	e7db      	b.n	8006a34 <_puts_r+0x88>
 8006a7c:	0800741c 	.word	0x0800741c
 8006a80:	0800743c 	.word	0x0800743c
 8006a84:	080073fc 	.word	0x080073fc

08006a88 <puts>:
 8006a88:	4b02      	ldr	r3, [pc, #8]	; (8006a94 <puts+0xc>)
 8006a8a:	4601      	mov	r1, r0
 8006a8c:	6818      	ldr	r0, [r3, #0]
 8006a8e:	f7ff bf8d 	b.w	80069ac <_puts_r>
 8006a92:	bf00      	nop
 8006a94:	2000000c 	.word	0x2000000c

08006a98 <__swbuf_r>:
 8006a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a9a:	460e      	mov	r6, r1
 8006a9c:	4614      	mov	r4, r2
 8006a9e:	4605      	mov	r5, r0
 8006aa0:	b118      	cbz	r0, 8006aaa <__swbuf_r+0x12>
 8006aa2:	6983      	ldr	r3, [r0, #24]
 8006aa4:	b90b      	cbnz	r3, 8006aaa <__swbuf_r+0x12>
 8006aa6:	f000 f9cd 	bl	8006e44 <__sinit>
 8006aaa:	4b21      	ldr	r3, [pc, #132]	; (8006b30 <__swbuf_r+0x98>)
 8006aac:	429c      	cmp	r4, r3
 8006aae:	d12b      	bne.n	8006b08 <__swbuf_r+0x70>
 8006ab0:	686c      	ldr	r4, [r5, #4]
 8006ab2:	69a3      	ldr	r3, [r4, #24]
 8006ab4:	60a3      	str	r3, [r4, #8]
 8006ab6:	89a3      	ldrh	r3, [r4, #12]
 8006ab8:	071a      	lsls	r2, r3, #28
 8006aba:	d52f      	bpl.n	8006b1c <__swbuf_r+0x84>
 8006abc:	6923      	ldr	r3, [r4, #16]
 8006abe:	b36b      	cbz	r3, 8006b1c <__swbuf_r+0x84>
 8006ac0:	6923      	ldr	r3, [r4, #16]
 8006ac2:	6820      	ldr	r0, [r4, #0]
 8006ac4:	b2f6      	uxtb	r6, r6
 8006ac6:	1ac0      	subs	r0, r0, r3
 8006ac8:	6963      	ldr	r3, [r4, #20]
 8006aca:	4637      	mov	r7, r6
 8006acc:	4283      	cmp	r3, r0
 8006ace:	dc04      	bgt.n	8006ada <__swbuf_r+0x42>
 8006ad0:	4621      	mov	r1, r4
 8006ad2:	4628      	mov	r0, r5
 8006ad4:	f000 f922 	bl	8006d1c <_fflush_r>
 8006ad8:	bb30      	cbnz	r0, 8006b28 <__swbuf_r+0x90>
 8006ada:	68a3      	ldr	r3, [r4, #8]
 8006adc:	3001      	adds	r0, #1
 8006ade:	3b01      	subs	r3, #1
 8006ae0:	60a3      	str	r3, [r4, #8]
 8006ae2:	6823      	ldr	r3, [r4, #0]
 8006ae4:	1c5a      	adds	r2, r3, #1
 8006ae6:	6022      	str	r2, [r4, #0]
 8006ae8:	701e      	strb	r6, [r3, #0]
 8006aea:	6963      	ldr	r3, [r4, #20]
 8006aec:	4283      	cmp	r3, r0
 8006aee:	d004      	beq.n	8006afa <__swbuf_r+0x62>
 8006af0:	89a3      	ldrh	r3, [r4, #12]
 8006af2:	07db      	lsls	r3, r3, #31
 8006af4:	d506      	bpl.n	8006b04 <__swbuf_r+0x6c>
 8006af6:	2e0a      	cmp	r6, #10
 8006af8:	d104      	bne.n	8006b04 <__swbuf_r+0x6c>
 8006afa:	4621      	mov	r1, r4
 8006afc:	4628      	mov	r0, r5
 8006afe:	f000 f90d 	bl	8006d1c <_fflush_r>
 8006b02:	b988      	cbnz	r0, 8006b28 <__swbuf_r+0x90>
 8006b04:	4638      	mov	r0, r7
 8006b06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b08:	4b0a      	ldr	r3, [pc, #40]	; (8006b34 <__swbuf_r+0x9c>)
 8006b0a:	429c      	cmp	r4, r3
 8006b0c:	d101      	bne.n	8006b12 <__swbuf_r+0x7a>
 8006b0e:	68ac      	ldr	r4, [r5, #8]
 8006b10:	e7cf      	b.n	8006ab2 <__swbuf_r+0x1a>
 8006b12:	4b09      	ldr	r3, [pc, #36]	; (8006b38 <__swbuf_r+0xa0>)
 8006b14:	429c      	cmp	r4, r3
 8006b16:	bf08      	it	eq
 8006b18:	68ec      	ldreq	r4, [r5, #12]
 8006b1a:	e7ca      	b.n	8006ab2 <__swbuf_r+0x1a>
 8006b1c:	4621      	mov	r1, r4
 8006b1e:	4628      	mov	r0, r5
 8006b20:	f000 f80c 	bl	8006b3c <__swsetup_r>
 8006b24:	2800      	cmp	r0, #0
 8006b26:	d0cb      	beq.n	8006ac0 <__swbuf_r+0x28>
 8006b28:	f04f 37ff 	mov.w	r7, #4294967295
 8006b2c:	e7ea      	b.n	8006b04 <__swbuf_r+0x6c>
 8006b2e:	bf00      	nop
 8006b30:	0800741c 	.word	0x0800741c
 8006b34:	0800743c 	.word	0x0800743c
 8006b38:	080073fc 	.word	0x080073fc

08006b3c <__swsetup_r>:
 8006b3c:	4b32      	ldr	r3, [pc, #200]	; (8006c08 <__swsetup_r+0xcc>)
 8006b3e:	b570      	push	{r4, r5, r6, lr}
 8006b40:	681d      	ldr	r5, [r3, #0]
 8006b42:	4606      	mov	r6, r0
 8006b44:	460c      	mov	r4, r1
 8006b46:	b125      	cbz	r5, 8006b52 <__swsetup_r+0x16>
 8006b48:	69ab      	ldr	r3, [r5, #24]
 8006b4a:	b913      	cbnz	r3, 8006b52 <__swsetup_r+0x16>
 8006b4c:	4628      	mov	r0, r5
 8006b4e:	f000 f979 	bl	8006e44 <__sinit>
 8006b52:	4b2e      	ldr	r3, [pc, #184]	; (8006c0c <__swsetup_r+0xd0>)
 8006b54:	429c      	cmp	r4, r3
 8006b56:	d10f      	bne.n	8006b78 <__swsetup_r+0x3c>
 8006b58:	686c      	ldr	r4, [r5, #4]
 8006b5a:	89a3      	ldrh	r3, [r4, #12]
 8006b5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006b60:	0719      	lsls	r1, r3, #28
 8006b62:	d42c      	bmi.n	8006bbe <__swsetup_r+0x82>
 8006b64:	06dd      	lsls	r5, r3, #27
 8006b66:	d411      	bmi.n	8006b8c <__swsetup_r+0x50>
 8006b68:	2309      	movs	r3, #9
 8006b6a:	6033      	str	r3, [r6, #0]
 8006b6c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006b70:	f04f 30ff 	mov.w	r0, #4294967295
 8006b74:	81a3      	strh	r3, [r4, #12]
 8006b76:	e03e      	b.n	8006bf6 <__swsetup_r+0xba>
 8006b78:	4b25      	ldr	r3, [pc, #148]	; (8006c10 <__swsetup_r+0xd4>)
 8006b7a:	429c      	cmp	r4, r3
 8006b7c:	d101      	bne.n	8006b82 <__swsetup_r+0x46>
 8006b7e:	68ac      	ldr	r4, [r5, #8]
 8006b80:	e7eb      	b.n	8006b5a <__swsetup_r+0x1e>
 8006b82:	4b24      	ldr	r3, [pc, #144]	; (8006c14 <__swsetup_r+0xd8>)
 8006b84:	429c      	cmp	r4, r3
 8006b86:	bf08      	it	eq
 8006b88:	68ec      	ldreq	r4, [r5, #12]
 8006b8a:	e7e6      	b.n	8006b5a <__swsetup_r+0x1e>
 8006b8c:	0758      	lsls	r0, r3, #29
 8006b8e:	d512      	bpl.n	8006bb6 <__swsetup_r+0x7a>
 8006b90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b92:	b141      	cbz	r1, 8006ba6 <__swsetup_r+0x6a>
 8006b94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b98:	4299      	cmp	r1, r3
 8006b9a:	d002      	beq.n	8006ba2 <__swsetup_r+0x66>
 8006b9c:	4630      	mov	r0, r6
 8006b9e:	f000 fa57 	bl	8007050 <_free_r>
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	6363      	str	r3, [r4, #52]	; 0x34
 8006ba6:	89a3      	ldrh	r3, [r4, #12]
 8006ba8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006bac:	81a3      	strh	r3, [r4, #12]
 8006bae:	2300      	movs	r3, #0
 8006bb0:	6063      	str	r3, [r4, #4]
 8006bb2:	6923      	ldr	r3, [r4, #16]
 8006bb4:	6023      	str	r3, [r4, #0]
 8006bb6:	89a3      	ldrh	r3, [r4, #12]
 8006bb8:	f043 0308 	orr.w	r3, r3, #8
 8006bbc:	81a3      	strh	r3, [r4, #12]
 8006bbe:	6923      	ldr	r3, [r4, #16]
 8006bc0:	b94b      	cbnz	r3, 8006bd6 <__swsetup_r+0x9a>
 8006bc2:	89a3      	ldrh	r3, [r4, #12]
 8006bc4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006bc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bcc:	d003      	beq.n	8006bd6 <__swsetup_r+0x9a>
 8006bce:	4621      	mov	r1, r4
 8006bd0:	4630      	mov	r0, r6
 8006bd2:	f000 f9fd 	bl	8006fd0 <__smakebuf_r>
 8006bd6:	89a0      	ldrh	r0, [r4, #12]
 8006bd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006bdc:	f010 0301 	ands.w	r3, r0, #1
 8006be0:	d00a      	beq.n	8006bf8 <__swsetup_r+0xbc>
 8006be2:	2300      	movs	r3, #0
 8006be4:	60a3      	str	r3, [r4, #8]
 8006be6:	6963      	ldr	r3, [r4, #20]
 8006be8:	425b      	negs	r3, r3
 8006bea:	61a3      	str	r3, [r4, #24]
 8006bec:	6923      	ldr	r3, [r4, #16]
 8006bee:	b943      	cbnz	r3, 8006c02 <__swsetup_r+0xc6>
 8006bf0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006bf4:	d1ba      	bne.n	8006b6c <__swsetup_r+0x30>
 8006bf6:	bd70      	pop	{r4, r5, r6, pc}
 8006bf8:	0781      	lsls	r1, r0, #30
 8006bfa:	bf58      	it	pl
 8006bfc:	6963      	ldrpl	r3, [r4, #20]
 8006bfe:	60a3      	str	r3, [r4, #8]
 8006c00:	e7f4      	b.n	8006bec <__swsetup_r+0xb0>
 8006c02:	2000      	movs	r0, #0
 8006c04:	e7f7      	b.n	8006bf6 <__swsetup_r+0xba>
 8006c06:	bf00      	nop
 8006c08:	2000000c 	.word	0x2000000c
 8006c0c:	0800741c 	.word	0x0800741c
 8006c10:	0800743c 	.word	0x0800743c
 8006c14:	080073fc 	.word	0x080073fc

08006c18 <__sflush_r>:
 8006c18:	898a      	ldrh	r2, [r1, #12]
 8006c1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c1c:	4605      	mov	r5, r0
 8006c1e:	0710      	lsls	r0, r2, #28
 8006c20:	460c      	mov	r4, r1
 8006c22:	d457      	bmi.n	8006cd4 <__sflush_r+0xbc>
 8006c24:	684b      	ldr	r3, [r1, #4]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	dc04      	bgt.n	8006c34 <__sflush_r+0x1c>
 8006c2a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	dc01      	bgt.n	8006c34 <__sflush_r+0x1c>
 8006c30:	2000      	movs	r0, #0
 8006c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c36:	2e00      	cmp	r6, #0
 8006c38:	d0fa      	beq.n	8006c30 <__sflush_r+0x18>
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006c40:	682f      	ldr	r7, [r5, #0]
 8006c42:	602b      	str	r3, [r5, #0]
 8006c44:	d032      	beq.n	8006cac <__sflush_r+0x94>
 8006c46:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006c48:	89a3      	ldrh	r3, [r4, #12]
 8006c4a:	075a      	lsls	r2, r3, #29
 8006c4c:	d505      	bpl.n	8006c5a <__sflush_r+0x42>
 8006c4e:	6863      	ldr	r3, [r4, #4]
 8006c50:	1ac0      	subs	r0, r0, r3
 8006c52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006c54:	b10b      	cbz	r3, 8006c5a <__sflush_r+0x42>
 8006c56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006c58:	1ac0      	subs	r0, r0, r3
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c60:	4628      	mov	r0, r5
 8006c62:	6a21      	ldr	r1, [r4, #32]
 8006c64:	47b0      	blx	r6
 8006c66:	1c43      	adds	r3, r0, #1
 8006c68:	89a3      	ldrh	r3, [r4, #12]
 8006c6a:	d106      	bne.n	8006c7a <__sflush_r+0x62>
 8006c6c:	6829      	ldr	r1, [r5, #0]
 8006c6e:	291d      	cmp	r1, #29
 8006c70:	d82c      	bhi.n	8006ccc <__sflush_r+0xb4>
 8006c72:	4a29      	ldr	r2, [pc, #164]	; (8006d18 <__sflush_r+0x100>)
 8006c74:	40ca      	lsrs	r2, r1
 8006c76:	07d6      	lsls	r6, r2, #31
 8006c78:	d528      	bpl.n	8006ccc <__sflush_r+0xb4>
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	6062      	str	r2, [r4, #4]
 8006c7e:	6922      	ldr	r2, [r4, #16]
 8006c80:	04d9      	lsls	r1, r3, #19
 8006c82:	6022      	str	r2, [r4, #0]
 8006c84:	d504      	bpl.n	8006c90 <__sflush_r+0x78>
 8006c86:	1c42      	adds	r2, r0, #1
 8006c88:	d101      	bne.n	8006c8e <__sflush_r+0x76>
 8006c8a:	682b      	ldr	r3, [r5, #0]
 8006c8c:	b903      	cbnz	r3, 8006c90 <__sflush_r+0x78>
 8006c8e:	6560      	str	r0, [r4, #84]	; 0x54
 8006c90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c92:	602f      	str	r7, [r5, #0]
 8006c94:	2900      	cmp	r1, #0
 8006c96:	d0cb      	beq.n	8006c30 <__sflush_r+0x18>
 8006c98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c9c:	4299      	cmp	r1, r3
 8006c9e:	d002      	beq.n	8006ca6 <__sflush_r+0x8e>
 8006ca0:	4628      	mov	r0, r5
 8006ca2:	f000 f9d5 	bl	8007050 <_free_r>
 8006ca6:	2000      	movs	r0, #0
 8006ca8:	6360      	str	r0, [r4, #52]	; 0x34
 8006caa:	e7c2      	b.n	8006c32 <__sflush_r+0x1a>
 8006cac:	6a21      	ldr	r1, [r4, #32]
 8006cae:	2301      	movs	r3, #1
 8006cb0:	4628      	mov	r0, r5
 8006cb2:	47b0      	blx	r6
 8006cb4:	1c41      	adds	r1, r0, #1
 8006cb6:	d1c7      	bne.n	8006c48 <__sflush_r+0x30>
 8006cb8:	682b      	ldr	r3, [r5, #0]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d0c4      	beq.n	8006c48 <__sflush_r+0x30>
 8006cbe:	2b1d      	cmp	r3, #29
 8006cc0:	d001      	beq.n	8006cc6 <__sflush_r+0xae>
 8006cc2:	2b16      	cmp	r3, #22
 8006cc4:	d101      	bne.n	8006cca <__sflush_r+0xb2>
 8006cc6:	602f      	str	r7, [r5, #0]
 8006cc8:	e7b2      	b.n	8006c30 <__sflush_r+0x18>
 8006cca:	89a3      	ldrh	r3, [r4, #12]
 8006ccc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cd0:	81a3      	strh	r3, [r4, #12]
 8006cd2:	e7ae      	b.n	8006c32 <__sflush_r+0x1a>
 8006cd4:	690f      	ldr	r7, [r1, #16]
 8006cd6:	2f00      	cmp	r7, #0
 8006cd8:	d0aa      	beq.n	8006c30 <__sflush_r+0x18>
 8006cda:	0793      	lsls	r3, r2, #30
 8006cdc:	bf18      	it	ne
 8006cde:	2300      	movne	r3, #0
 8006ce0:	680e      	ldr	r6, [r1, #0]
 8006ce2:	bf08      	it	eq
 8006ce4:	694b      	ldreq	r3, [r1, #20]
 8006ce6:	1bf6      	subs	r6, r6, r7
 8006ce8:	600f      	str	r7, [r1, #0]
 8006cea:	608b      	str	r3, [r1, #8]
 8006cec:	2e00      	cmp	r6, #0
 8006cee:	dd9f      	ble.n	8006c30 <__sflush_r+0x18>
 8006cf0:	4633      	mov	r3, r6
 8006cf2:	463a      	mov	r2, r7
 8006cf4:	4628      	mov	r0, r5
 8006cf6:	6a21      	ldr	r1, [r4, #32]
 8006cf8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006cfc:	47e0      	blx	ip
 8006cfe:	2800      	cmp	r0, #0
 8006d00:	dc06      	bgt.n	8006d10 <__sflush_r+0xf8>
 8006d02:	89a3      	ldrh	r3, [r4, #12]
 8006d04:	f04f 30ff 	mov.w	r0, #4294967295
 8006d08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d0c:	81a3      	strh	r3, [r4, #12]
 8006d0e:	e790      	b.n	8006c32 <__sflush_r+0x1a>
 8006d10:	4407      	add	r7, r0
 8006d12:	1a36      	subs	r6, r6, r0
 8006d14:	e7ea      	b.n	8006cec <__sflush_r+0xd4>
 8006d16:	bf00      	nop
 8006d18:	20400001 	.word	0x20400001

08006d1c <_fflush_r>:
 8006d1c:	b538      	push	{r3, r4, r5, lr}
 8006d1e:	690b      	ldr	r3, [r1, #16]
 8006d20:	4605      	mov	r5, r0
 8006d22:	460c      	mov	r4, r1
 8006d24:	b913      	cbnz	r3, 8006d2c <_fflush_r+0x10>
 8006d26:	2500      	movs	r5, #0
 8006d28:	4628      	mov	r0, r5
 8006d2a:	bd38      	pop	{r3, r4, r5, pc}
 8006d2c:	b118      	cbz	r0, 8006d36 <_fflush_r+0x1a>
 8006d2e:	6983      	ldr	r3, [r0, #24]
 8006d30:	b90b      	cbnz	r3, 8006d36 <_fflush_r+0x1a>
 8006d32:	f000 f887 	bl	8006e44 <__sinit>
 8006d36:	4b14      	ldr	r3, [pc, #80]	; (8006d88 <_fflush_r+0x6c>)
 8006d38:	429c      	cmp	r4, r3
 8006d3a:	d11b      	bne.n	8006d74 <_fflush_r+0x58>
 8006d3c:	686c      	ldr	r4, [r5, #4]
 8006d3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d0ef      	beq.n	8006d26 <_fflush_r+0xa>
 8006d46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006d48:	07d0      	lsls	r0, r2, #31
 8006d4a:	d404      	bmi.n	8006d56 <_fflush_r+0x3a>
 8006d4c:	0599      	lsls	r1, r3, #22
 8006d4e:	d402      	bmi.n	8006d56 <_fflush_r+0x3a>
 8006d50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d52:	f000 f915 	bl	8006f80 <__retarget_lock_acquire_recursive>
 8006d56:	4628      	mov	r0, r5
 8006d58:	4621      	mov	r1, r4
 8006d5a:	f7ff ff5d 	bl	8006c18 <__sflush_r>
 8006d5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d60:	4605      	mov	r5, r0
 8006d62:	07da      	lsls	r2, r3, #31
 8006d64:	d4e0      	bmi.n	8006d28 <_fflush_r+0xc>
 8006d66:	89a3      	ldrh	r3, [r4, #12]
 8006d68:	059b      	lsls	r3, r3, #22
 8006d6a:	d4dd      	bmi.n	8006d28 <_fflush_r+0xc>
 8006d6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d6e:	f000 f908 	bl	8006f82 <__retarget_lock_release_recursive>
 8006d72:	e7d9      	b.n	8006d28 <_fflush_r+0xc>
 8006d74:	4b05      	ldr	r3, [pc, #20]	; (8006d8c <_fflush_r+0x70>)
 8006d76:	429c      	cmp	r4, r3
 8006d78:	d101      	bne.n	8006d7e <_fflush_r+0x62>
 8006d7a:	68ac      	ldr	r4, [r5, #8]
 8006d7c:	e7df      	b.n	8006d3e <_fflush_r+0x22>
 8006d7e:	4b04      	ldr	r3, [pc, #16]	; (8006d90 <_fflush_r+0x74>)
 8006d80:	429c      	cmp	r4, r3
 8006d82:	bf08      	it	eq
 8006d84:	68ec      	ldreq	r4, [r5, #12]
 8006d86:	e7da      	b.n	8006d3e <_fflush_r+0x22>
 8006d88:	0800741c 	.word	0x0800741c
 8006d8c:	0800743c 	.word	0x0800743c
 8006d90:	080073fc 	.word	0x080073fc

08006d94 <std>:
 8006d94:	2300      	movs	r3, #0
 8006d96:	b510      	push	{r4, lr}
 8006d98:	4604      	mov	r4, r0
 8006d9a:	e9c0 3300 	strd	r3, r3, [r0]
 8006d9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006da2:	6083      	str	r3, [r0, #8]
 8006da4:	8181      	strh	r1, [r0, #12]
 8006da6:	6643      	str	r3, [r0, #100]	; 0x64
 8006da8:	81c2      	strh	r2, [r0, #14]
 8006daa:	6183      	str	r3, [r0, #24]
 8006dac:	4619      	mov	r1, r3
 8006dae:	2208      	movs	r2, #8
 8006db0:	305c      	adds	r0, #92	; 0x5c
 8006db2:	f7ff fdf3 	bl	800699c <memset>
 8006db6:	4b05      	ldr	r3, [pc, #20]	; (8006dcc <std+0x38>)
 8006db8:	6224      	str	r4, [r4, #32]
 8006dba:	6263      	str	r3, [r4, #36]	; 0x24
 8006dbc:	4b04      	ldr	r3, [pc, #16]	; (8006dd0 <std+0x3c>)
 8006dbe:	62a3      	str	r3, [r4, #40]	; 0x28
 8006dc0:	4b04      	ldr	r3, [pc, #16]	; (8006dd4 <std+0x40>)
 8006dc2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006dc4:	4b04      	ldr	r3, [pc, #16]	; (8006dd8 <std+0x44>)
 8006dc6:	6323      	str	r3, [r4, #48]	; 0x30
 8006dc8:	bd10      	pop	{r4, pc}
 8006dca:	bf00      	nop
 8006dcc:	08007229 	.word	0x08007229
 8006dd0:	0800724b 	.word	0x0800724b
 8006dd4:	08007283 	.word	0x08007283
 8006dd8:	080072a7 	.word	0x080072a7

08006ddc <_cleanup_r>:
 8006ddc:	4901      	ldr	r1, [pc, #4]	; (8006de4 <_cleanup_r+0x8>)
 8006dde:	f000 b8af 	b.w	8006f40 <_fwalk_reent>
 8006de2:	bf00      	nop
 8006de4:	08006d1d 	.word	0x08006d1d

08006de8 <__sfmoreglue>:
 8006de8:	2268      	movs	r2, #104	; 0x68
 8006dea:	b570      	push	{r4, r5, r6, lr}
 8006dec:	1e4d      	subs	r5, r1, #1
 8006dee:	4355      	muls	r5, r2
 8006df0:	460e      	mov	r6, r1
 8006df2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006df6:	f000 f993 	bl	8007120 <_malloc_r>
 8006dfa:	4604      	mov	r4, r0
 8006dfc:	b140      	cbz	r0, 8006e10 <__sfmoreglue+0x28>
 8006dfe:	2100      	movs	r1, #0
 8006e00:	e9c0 1600 	strd	r1, r6, [r0]
 8006e04:	300c      	adds	r0, #12
 8006e06:	60a0      	str	r0, [r4, #8]
 8006e08:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006e0c:	f7ff fdc6 	bl	800699c <memset>
 8006e10:	4620      	mov	r0, r4
 8006e12:	bd70      	pop	{r4, r5, r6, pc}

08006e14 <__sfp_lock_acquire>:
 8006e14:	4801      	ldr	r0, [pc, #4]	; (8006e1c <__sfp_lock_acquire+0x8>)
 8006e16:	f000 b8b3 	b.w	8006f80 <__retarget_lock_acquire_recursive>
 8006e1a:	bf00      	nop
 8006e1c:	20000239 	.word	0x20000239

08006e20 <__sfp_lock_release>:
 8006e20:	4801      	ldr	r0, [pc, #4]	; (8006e28 <__sfp_lock_release+0x8>)
 8006e22:	f000 b8ae 	b.w	8006f82 <__retarget_lock_release_recursive>
 8006e26:	bf00      	nop
 8006e28:	20000239 	.word	0x20000239

08006e2c <__sinit_lock_acquire>:
 8006e2c:	4801      	ldr	r0, [pc, #4]	; (8006e34 <__sinit_lock_acquire+0x8>)
 8006e2e:	f000 b8a7 	b.w	8006f80 <__retarget_lock_acquire_recursive>
 8006e32:	bf00      	nop
 8006e34:	2000023a 	.word	0x2000023a

08006e38 <__sinit_lock_release>:
 8006e38:	4801      	ldr	r0, [pc, #4]	; (8006e40 <__sinit_lock_release+0x8>)
 8006e3a:	f000 b8a2 	b.w	8006f82 <__retarget_lock_release_recursive>
 8006e3e:	bf00      	nop
 8006e40:	2000023a 	.word	0x2000023a

08006e44 <__sinit>:
 8006e44:	b510      	push	{r4, lr}
 8006e46:	4604      	mov	r4, r0
 8006e48:	f7ff fff0 	bl	8006e2c <__sinit_lock_acquire>
 8006e4c:	69a3      	ldr	r3, [r4, #24]
 8006e4e:	b11b      	cbz	r3, 8006e58 <__sinit+0x14>
 8006e50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e54:	f7ff bff0 	b.w	8006e38 <__sinit_lock_release>
 8006e58:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006e5c:	6523      	str	r3, [r4, #80]	; 0x50
 8006e5e:	4b13      	ldr	r3, [pc, #76]	; (8006eac <__sinit+0x68>)
 8006e60:	4a13      	ldr	r2, [pc, #76]	; (8006eb0 <__sinit+0x6c>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	62a2      	str	r2, [r4, #40]	; 0x28
 8006e66:	42a3      	cmp	r3, r4
 8006e68:	bf08      	it	eq
 8006e6a:	2301      	moveq	r3, #1
 8006e6c:	4620      	mov	r0, r4
 8006e6e:	bf08      	it	eq
 8006e70:	61a3      	streq	r3, [r4, #24]
 8006e72:	f000 f81f 	bl	8006eb4 <__sfp>
 8006e76:	6060      	str	r0, [r4, #4]
 8006e78:	4620      	mov	r0, r4
 8006e7a:	f000 f81b 	bl	8006eb4 <__sfp>
 8006e7e:	60a0      	str	r0, [r4, #8]
 8006e80:	4620      	mov	r0, r4
 8006e82:	f000 f817 	bl	8006eb4 <__sfp>
 8006e86:	2200      	movs	r2, #0
 8006e88:	2104      	movs	r1, #4
 8006e8a:	60e0      	str	r0, [r4, #12]
 8006e8c:	6860      	ldr	r0, [r4, #4]
 8006e8e:	f7ff ff81 	bl	8006d94 <std>
 8006e92:	2201      	movs	r2, #1
 8006e94:	2109      	movs	r1, #9
 8006e96:	68a0      	ldr	r0, [r4, #8]
 8006e98:	f7ff ff7c 	bl	8006d94 <std>
 8006e9c:	2202      	movs	r2, #2
 8006e9e:	2112      	movs	r1, #18
 8006ea0:	68e0      	ldr	r0, [r4, #12]
 8006ea2:	f7ff ff77 	bl	8006d94 <std>
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	61a3      	str	r3, [r4, #24]
 8006eaa:	e7d1      	b.n	8006e50 <__sinit+0xc>
 8006eac:	080073f8 	.word	0x080073f8
 8006eb0:	08006ddd 	.word	0x08006ddd

08006eb4 <__sfp>:
 8006eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eb6:	4607      	mov	r7, r0
 8006eb8:	f7ff ffac 	bl	8006e14 <__sfp_lock_acquire>
 8006ebc:	4b1e      	ldr	r3, [pc, #120]	; (8006f38 <__sfp+0x84>)
 8006ebe:	681e      	ldr	r6, [r3, #0]
 8006ec0:	69b3      	ldr	r3, [r6, #24]
 8006ec2:	b913      	cbnz	r3, 8006eca <__sfp+0x16>
 8006ec4:	4630      	mov	r0, r6
 8006ec6:	f7ff ffbd 	bl	8006e44 <__sinit>
 8006eca:	3648      	adds	r6, #72	; 0x48
 8006ecc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006ed0:	3b01      	subs	r3, #1
 8006ed2:	d503      	bpl.n	8006edc <__sfp+0x28>
 8006ed4:	6833      	ldr	r3, [r6, #0]
 8006ed6:	b30b      	cbz	r3, 8006f1c <__sfp+0x68>
 8006ed8:	6836      	ldr	r6, [r6, #0]
 8006eda:	e7f7      	b.n	8006ecc <__sfp+0x18>
 8006edc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006ee0:	b9d5      	cbnz	r5, 8006f18 <__sfp+0x64>
 8006ee2:	4b16      	ldr	r3, [pc, #88]	; (8006f3c <__sfp+0x88>)
 8006ee4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006ee8:	60e3      	str	r3, [r4, #12]
 8006eea:	6665      	str	r5, [r4, #100]	; 0x64
 8006eec:	f000 f847 	bl	8006f7e <__retarget_lock_init_recursive>
 8006ef0:	f7ff ff96 	bl	8006e20 <__sfp_lock_release>
 8006ef4:	2208      	movs	r2, #8
 8006ef6:	4629      	mov	r1, r5
 8006ef8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006efc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006f00:	6025      	str	r5, [r4, #0]
 8006f02:	61a5      	str	r5, [r4, #24]
 8006f04:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006f08:	f7ff fd48 	bl	800699c <memset>
 8006f0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006f10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006f14:	4620      	mov	r0, r4
 8006f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f18:	3468      	adds	r4, #104	; 0x68
 8006f1a:	e7d9      	b.n	8006ed0 <__sfp+0x1c>
 8006f1c:	2104      	movs	r1, #4
 8006f1e:	4638      	mov	r0, r7
 8006f20:	f7ff ff62 	bl	8006de8 <__sfmoreglue>
 8006f24:	4604      	mov	r4, r0
 8006f26:	6030      	str	r0, [r6, #0]
 8006f28:	2800      	cmp	r0, #0
 8006f2a:	d1d5      	bne.n	8006ed8 <__sfp+0x24>
 8006f2c:	f7ff ff78 	bl	8006e20 <__sfp_lock_release>
 8006f30:	230c      	movs	r3, #12
 8006f32:	603b      	str	r3, [r7, #0]
 8006f34:	e7ee      	b.n	8006f14 <__sfp+0x60>
 8006f36:	bf00      	nop
 8006f38:	080073f8 	.word	0x080073f8
 8006f3c:	ffff0001 	.word	0xffff0001

08006f40 <_fwalk_reent>:
 8006f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f44:	4606      	mov	r6, r0
 8006f46:	4688      	mov	r8, r1
 8006f48:	2700      	movs	r7, #0
 8006f4a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006f4e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f52:	f1b9 0901 	subs.w	r9, r9, #1
 8006f56:	d505      	bpl.n	8006f64 <_fwalk_reent+0x24>
 8006f58:	6824      	ldr	r4, [r4, #0]
 8006f5a:	2c00      	cmp	r4, #0
 8006f5c:	d1f7      	bne.n	8006f4e <_fwalk_reent+0xe>
 8006f5e:	4638      	mov	r0, r7
 8006f60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f64:	89ab      	ldrh	r3, [r5, #12]
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d907      	bls.n	8006f7a <_fwalk_reent+0x3a>
 8006f6a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f6e:	3301      	adds	r3, #1
 8006f70:	d003      	beq.n	8006f7a <_fwalk_reent+0x3a>
 8006f72:	4629      	mov	r1, r5
 8006f74:	4630      	mov	r0, r6
 8006f76:	47c0      	blx	r8
 8006f78:	4307      	orrs	r7, r0
 8006f7a:	3568      	adds	r5, #104	; 0x68
 8006f7c:	e7e9      	b.n	8006f52 <_fwalk_reent+0x12>

08006f7e <__retarget_lock_init_recursive>:
 8006f7e:	4770      	bx	lr

08006f80 <__retarget_lock_acquire_recursive>:
 8006f80:	4770      	bx	lr

08006f82 <__retarget_lock_release_recursive>:
 8006f82:	4770      	bx	lr

08006f84 <__swhatbuf_r>:
 8006f84:	b570      	push	{r4, r5, r6, lr}
 8006f86:	460e      	mov	r6, r1
 8006f88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f8c:	4614      	mov	r4, r2
 8006f8e:	2900      	cmp	r1, #0
 8006f90:	461d      	mov	r5, r3
 8006f92:	b096      	sub	sp, #88	; 0x58
 8006f94:	da08      	bge.n	8006fa8 <__swhatbuf_r+0x24>
 8006f96:	2200      	movs	r2, #0
 8006f98:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006f9c:	602a      	str	r2, [r5, #0]
 8006f9e:	061a      	lsls	r2, r3, #24
 8006fa0:	d410      	bmi.n	8006fc4 <__swhatbuf_r+0x40>
 8006fa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006fa6:	e00e      	b.n	8006fc6 <__swhatbuf_r+0x42>
 8006fa8:	466a      	mov	r2, sp
 8006faa:	f000 f9a3 	bl	80072f4 <_fstat_r>
 8006fae:	2800      	cmp	r0, #0
 8006fb0:	dbf1      	blt.n	8006f96 <__swhatbuf_r+0x12>
 8006fb2:	9a01      	ldr	r2, [sp, #4]
 8006fb4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006fb8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006fbc:	425a      	negs	r2, r3
 8006fbe:	415a      	adcs	r2, r3
 8006fc0:	602a      	str	r2, [r5, #0]
 8006fc2:	e7ee      	b.n	8006fa2 <__swhatbuf_r+0x1e>
 8006fc4:	2340      	movs	r3, #64	; 0x40
 8006fc6:	2000      	movs	r0, #0
 8006fc8:	6023      	str	r3, [r4, #0]
 8006fca:	b016      	add	sp, #88	; 0x58
 8006fcc:	bd70      	pop	{r4, r5, r6, pc}
	...

08006fd0 <__smakebuf_r>:
 8006fd0:	898b      	ldrh	r3, [r1, #12]
 8006fd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006fd4:	079d      	lsls	r5, r3, #30
 8006fd6:	4606      	mov	r6, r0
 8006fd8:	460c      	mov	r4, r1
 8006fda:	d507      	bpl.n	8006fec <__smakebuf_r+0x1c>
 8006fdc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006fe0:	6023      	str	r3, [r4, #0]
 8006fe2:	6123      	str	r3, [r4, #16]
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	6163      	str	r3, [r4, #20]
 8006fe8:	b002      	add	sp, #8
 8006fea:	bd70      	pop	{r4, r5, r6, pc}
 8006fec:	466a      	mov	r2, sp
 8006fee:	ab01      	add	r3, sp, #4
 8006ff0:	f7ff ffc8 	bl	8006f84 <__swhatbuf_r>
 8006ff4:	9900      	ldr	r1, [sp, #0]
 8006ff6:	4605      	mov	r5, r0
 8006ff8:	4630      	mov	r0, r6
 8006ffa:	f000 f891 	bl	8007120 <_malloc_r>
 8006ffe:	b948      	cbnz	r0, 8007014 <__smakebuf_r+0x44>
 8007000:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007004:	059a      	lsls	r2, r3, #22
 8007006:	d4ef      	bmi.n	8006fe8 <__smakebuf_r+0x18>
 8007008:	f023 0303 	bic.w	r3, r3, #3
 800700c:	f043 0302 	orr.w	r3, r3, #2
 8007010:	81a3      	strh	r3, [r4, #12]
 8007012:	e7e3      	b.n	8006fdc <__smakebuf_r+0xc>
 8007014:	4b0d      	ldr	r3, [pc, #52]	; (800704c <__smakebuf_r+0x7c>)
 8007016:	62b3      	str	r3, [r6, #40]	; 0x28
 8007018:	89a3      	ldrh	r3, [r4, #12]
 800701a:	6020      	str	r0, [r4, #0]
 800701c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007020:	81a3      	strh	r3, [r4, #12]
 8007022:	9b00      	ldr	r3, [sp, #0]
 8007024:	6120      	str	r0, [r4, #16]
 8007026:	6163      	str	r3, [r4, #20]
 8007028:	9b01      	ldr	r3, [sp, #4]
 800702a:	b15b      	cbz	r3, 8007044 <__smakebuf_r+0x74>
 800702c:	4630      	mov	r0, r6
 800702e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007032:	f000 f971 	bl	8007318 <_isatty_r>
 8007036:	b128      	cbz	r0, 8007044 <__smakebuf_r+0x74>
 8007038:	89a3      	ldrh	r3, [r4, #12]
 800703a:	f023 0303 	bic.w	r3, r3, #3
 800703e:	f043 0301 	orr.w	r3, r3, #1
 8007042:	81a3      	strh	r3, [r4, #12]
 8007044:	89a0      	ldrh	r0, [r4, #12]
 8007046:	4305      	orrs	r5, r0
 8007048:	81a5      	strh	r5, [r4, #12]
 800704a:	e7cd      	b.n	8006fe8 <__smakebuf_r+0x18>
 800704c:	08006ddd 	.word	0x08006ddd

08007050 <_free_r>:
 8007050:	b538      	push	{r3, r4, r5, lr}
 8007052:	4605      	mov	r5, r0
 8007054:	2900      	cmp	r1, #0
 8007056:	d040      	beq.n	80070da <_free_r+0x8a>
 8007058:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800705c:	1f0c      	subs	r4, r1, #4
 800705e:	2b00      	cmp	r3, #0
 8007060:	bfb8      	it	lt
 8007062:	18e4      	addlt	r4, r4, r3
 8007064:	f000 f97a 	bl	800735c <__malloc_lock>
 8007068:	4a1c      	ldr	r2, [pc, #112]	; (80070dc <_free_r+0x8c>)
 800706a:	6813      	ldr	r3, [r2, #0]
 800706c:	b933      	cbnz	r3, 800707c <_free_r+0x2c>
 800706e:	6063      	str	r3, [r4, #4]
 8007070:	6014      	str	r4, [r2, #0]
 8007072:	4628      	mov	r0, r5
 8007074:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007078:	f000 b976 	b.w	8007368 <__malloc_unlock>
 800707c:	42a3      	cmp	r3, r4
 800707e:	d908      	bls.n	8007092 <_free_r+0x42>
 8007080:	6820      	ldr	r0, [r4, #0]
 8007082:	1821      	adds	r1, r4, r0
 8007084:	428b      	cmp	r3, r1
 8007086:	bf01      	itttt	eq
 8007088:	6819      	ldreq	r1, [r3, #0]
 800708a:	685b      	ldreq	r3, [r3, #4]
 800708c:	1809      	addeq	r1, r1, r0
 800708e:	6021      	streq	r1, [r4, #0]
 8007090:	e7ed      	b.n	800706e <_free_r+0x1e>
 8007092:	461a      	mov	r2, r3
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	b10b      	cbz	r3, 800709c <_free_r+0x4c>
 8007098:	42a3      	cmp	r3, r4
 800709a:	d9fa      	bls.n	8007092 <_free_r+0x42>
 800709c:	6811      	ldr	r1, [r2, #0]
 800709e:	1850      	adds	r0, r2, r1
 80070a0:	42a0      	cmp	r0, r4
 80070a2:	d10b      	bne.n	80070bc <_free_r+0x6c>
 80070a4:	6820      	ldr	r0, [r4, #0]
 80070a6:	4401      	add	r1, r0
 80070a8:	1850      	adds	r0, r2, r1
 80070aa:	4283      	cmp	r3, r0
 80070ac:	6011      	str	r1, [r2, #0]
 80070ae:	d1e0      	bne.n	8007072 <_free_r+0x22>
 80070b0:	6818      	ldr	r0, [r3, #0]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	4401      	add	r1, r0
 80070b6:	6011      	str	r1, [r2, #0]
 80070b8:	6053      	str	r3, [r2, #4]
 80070ba:	e7da      	b.n	8007072 <_free_r+0x22>
 80070bc:	d902      	bls.n	80070c4 <_free_r+0x74>
 80070be:	230c      	movs	r3, #12
 80070c0:	602b      	str	r3, [r5, #0]
 80070c2:	e7d6      	b.n	8007072 <_free_r+0x22>
 80070c4:	6820      	ldr	r0, [r4, #0]
 80070c6:	1821      	adds	r1, r4, r0
 80070c8:	428b      	cmp	r3, r1
 80070ca:	bf01      	itttt	eq
 80070cc:	6819      	ldreq	r1, [r3, #0]
 80070ce:	685b      	ldreq	r3, [r3, #4]
 80070d0:	1809      	addeq	r1, r1, r0
 80070d2:	6021      	streq	r1, [r4, #0]
 80070d4:	6063      	str	r3, [r4, #4]
 80070d6:	6054      	str	r4, [r2, #4]
 80070d8:	e7cb      	b.n	8007072 <_free_r+0x22>
 80070da:	bd38      	pop	{r3, r4, r5, pc}
 80070dc:	2000023c 	.word	0x2000023c

080070e0 <sbrk_aligned>:
 80070e0:	b570      	push	{r4, r5, r6, lr}
 80070e2:	4e0e      	ldr	r6, [pc, #56]	; (800711c <sbrk_aligned+0x3c>)
 80070e4:	460c      	mov	r4, r1
 80070e6:	6831      	ldr	r1, [r6, #0]
 80070e8:	4605      	mov	r5, r0
 80070ea:	b911      	cbnz	r1, 80070f2 <sbrk_aligned+0x12>
 80070ec:	f000 f88c 	bl	8007208 <_sbrk_r>
 80070f0:	6030      	str	r0, [r6, #0]
 80070f2:	4621      	mov	r1, r4
 80070f4:	4628      	mov	r0, r5
 80070f6:	f000 f887 	bl	8007208 <_sbrk_r>
 80070fa:	1c43      	adds	r3, r0, #1
 80070fc:	d00a      	beq.n	8007114 <sbrk_aligned+0x34>
 80070fe:	1cc4      	adds	r4, r0, #3
 8007100:	f024 0403 	bic.w	r4, r4, #3
 8007104:	42a0      	cmp	r0, r4
 8007106:	d007      	beq.n	8007118 <sbrk_aligned+0x38>
 8007108:	1a21      	subs	r1, r4, r0
 800710a:	4628      	mov	r0, r5
 800710c:	f000 f87c 	bl	8007208 <_sbrk_r>
 8007110:	3001      	adds	r0, #1
 8007112:	d101      	bne.n	8007118 <sbrk_aligned+0x38>
 8007114:	f04f 34ff 	mov.w	r4, #4294967295
 8007118:	4620      	mov	r0, r4
 800711a:	bd70      	pop	{r4, r5, r6, pc}
 800711c:	20000240 	.word	0x20000240

08007120 <_malloc_r>:
 8007120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007124:	1ccd      	adds	r5, r1, #3
 8007126:	f025 0503 	bic.w	r5, r5, #3
 800712a:	3508      	adds	r5, #8
 800712c:	2d0c      	cmp	r5, #12
 800712e:	bf38      	it	cc
 8007130:	250c      	movcc	r5, #12
 8007132:	2d00      	cmp	r5, #0
 8007134:	4607      	mov	r7, r0
 8007136:	db01      	blt.n	800713c <_malloc_r+0x1c>
 8007138:	42a9      	cmp	r1, r5
 800713a:	d905      	bls.n	8007148 <_malloc_r+0x28>
 800713c:	230c      	movs	r3, #12
 800713e:	2600      	movs	r6, #0
 8007140:	603b      	str	r3, [r7, #0]
 8007142:	4630      	mov	r0, r6
 8007144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007148:	4e2e      	ldr	r6, [pc, #184]	; (8007204 <_malloc_r+0xe4>)
 800714a:	f000 f907 	bl	800735c <__malloc_lock>
 800714e:	6833      	ldr	r3, [r6, #0]
 8007150:	461c      	mov	r4, r3
 8007152:	bb34      	cbnz	r4, 80071a2 <_malloc_r+0x82>
 8007154:	4629      	mov	r1, r5
 8007156:	4638      	mov	r0, r7
 8007158:	f7ff ffc2 	bl	80070e0 <sbrk_aligned>
 800715c:	1c43      	adds	r3, r0, #1
 800715e:	4604      	mov	r4, r0
 8007160:	d14d      	bne.n	80071fe <_malloc_r+0xde>
 8007162:	6834      	ldr	r4, [r6, #0]
 8007164:	4626      	mov	r6, r4
 8007166:	2e00      	cmp	r6, #0
 8007168:	d140      	bne.n	80071ec <_malloc_r+0xcc>
 800716a:	6823      	ldr	r3, [r4, #0]
 800716c:	4631      	mov	r1, r6
 800716e:	4638      	mov	r0, r7
 8007170:	eb04 0803 	add.w	r8, r4, r3
 8007174:	f000 f848 	bl	8007208 <_sbrk_r>
 8007178:	4580      	cmp	r8, r0
 800717a:	d13a      	bne.n	80071f2 <_malloc_r+0xd2>
 800717c:	6821      	ldr	r1, [r4, #0]
 800717e:	3503      	adds	r5, #3
 8007180:	1a6d      	subs	r5, r5, r1
 8007182:	f025 0503 	bic.w	r5, r5, #3
 8007186:	3508      	adds	r5, #8
 8007188:	2d0c      	cmp	r5, #12
 800718a:	bf38      	it	cc
 800718c:	250c      	movcc	r5, #12
 800718e:	4638      	mov	r0, r7
 8007190:	4629      	mov	r1, r5
 8007192:	f7ff ffa5 	bl	80070e0 <sbrk_aligned>
 8007196:	3001      	adds	r0, #1
 8007198:	d02b      	beq.n	80071f2 <_malloc_r+0xd2>
 800719a:	6823      	ldr	r3, [r4, #0]
 800719c:	442b      	add	r3, r5
 800719e:	6023      	str	r3, [r4, #0]
 80071a0:	e00e      	b.n	80071c0 <_malloc_r+0xa0>
 80071a2:	6822      	ldr	r2, [r4, #0]
 80071a4:	1b52      	subs	r2, r2, r5
 80071a6:	d41e      	bmi.n	80071e6 <_malloc_r+0xc6>
 80071a8:	2a0b      	cmp	r2, #11
 80071aa:	d916      	bls.n	80071da <_malloc_r+0xba>
 80071ac:	1961      	adds	r1, r4, r5
 80071ae:	42a3      	cmp	r3, r4
 80071b0:	6025      	str	r5, [r4, #0]
 80071b2:	bf18      	it	ne
 80071b4:	6059      	strne	r1, [r3, #4]
 80071b6:	6863      	ldr	r3, [r4, #4]
 80071b8:	bf08      	it	eq
 80071ba:	6031      	streq	r1, [r6, #0]
 80071bc:	5162      	str	r2, [r4, r5]
 80071be:	604b      	str	r3, [r1, #4]
 80071c0:	4638      	mov	r0, r7
 80071c2:	f104 060b 	add.w	r6, r4, #11
 80071c6:	f000 f8cf 	bl	8007368 <__malloc_unlock>
 80071ca:	f026 0607 	bic.w	r6, r6, #7
 80071ce:	1d23      	adds	r3, r4, #4
 80071d0:	1af2      	subs	r2, r6, r3
 80071d2:	d0b6      	beq.n	8007142 <_malloc_r+0x22>
 80071d4:	1b9b      	subs	r3, r3, r6
 80071d6:	50a3      	str	r3, [r4, r2]
 80071d8:	e7b3      	b.n	8007142 <_malloc_r+0x22>
 80071da:	6862      	ldr	r2, [r4, #4]
 80071dc:	42a3      	cmp	r3, r4
 80071de:	bf0c      	ite	eq
 80071e0:	6032      	streq	r2, [r6, #0]
 80071e2:	605a      	strne	r2, [r3, #4]
 80071e4:	e7ec      	b.n	80071c0 <_malloc_r+0xa0>
 80071e6:	4623      	mov	r3, r4
 80071e8:	6864      	ldr	r4, [r4, #4]
 80071ea:	e7b2      	b.n	8007152 <_malloc_r+0x32>
 80071ec:	4634      	mov	r4, r6
 80071ee:	6876      	ldr	r6, [r6, #4]
 80071f0:	e7b9      	b.n	8007166 <_malloc_r+0x46>
 80071f2:	230c      	movs	r3, #12
 80071f4:	4638      	mov	r0, r7
 80071f6:	603b      	str	r3, [r7, #0]
 80071f8:	f000 f8b6 	bl	8007368 <__malloc_unlock>
 80071fc:	e7a1      	b.n	8007142 <_malloc_r+0x22>
 80071fe:	6025      	str	r5, [r4, #0]
 8007200:	e7de      	b.n	80071c0 <_malloc_r+0xa0>
 8007202:	bf00      	nop
 8007204:	2000023c 	.word	0x2000023c

08007208 <_sbrk_r>:
 8007208:	b538      	push	{r3, r4, r5, lr}
 800720a:	2300      	movs	r3, #0
 800720c:	4d05      	ldr	r5, [pc, #20]	; (8007224 <_sbrk_r+0x1c>)
 800720e:	4604      	mov	r4, r0
 8007210:	4608      	mov	r0, r1
 8007212:	602b      	str	r3, [r5, #0]
 8007214:	f7f9 fb88 	bl	8000928 <_sbrk>
 8007218:	1c43      	adds	r3, r0, #1
 800721a:	d102      	bne.n	8007222 <_sbrk_r+0x1a>
 800721c:	682b      	ldr	r3, [r5, #0]
 800721e:	b103      	cbz	r3, 8007222 <_sbrk_r+0x1a>
 8007220:	6023      	str	r3, [r4, #0]
 8007222:	bd38      	pop	{r3, r4, r5, pc}
 8007224:	20000244 	.word	0x20000244

08007228 <__sread>:
 8007228:	b510      	push	{r4, lr}
 800722a:	460c      	mov	r4, r1
 800722c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007230:	f000 f8a0 	bl	8007374 <_read_r>
 8007234:	2800      	cmp	r0, #0
 8007236:	bfab      	itete	ge
 8007238:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800723a:	89a3      	ldrhlt	r3, [r4, #12]
 800723c:	181b      	addge	r3, r3, r0
 800723e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007242:	bfac      	ite	ge
 8007244:	6563      	strge	r3, [r4, #84]	; 0x54
 8007246:	81a3      	strhlt	r3, [r4, #12]
 8007248:	bd10      	pop	{r4, pc}

0800724a <__swrite>:
 800724a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800724e:	461f      	mov	r7, r3
 8007250:	898b      	ldrh	r3, [r1, #12]
 8007252:	4605      	mov	r5, r0
 8007254:	05db      	lsls	r3, r3, #23
 8007256:	460c      	mov	r4, r1
 8007258:	4616      	mov	r6, r2
 800725a:	d505      	bpl.n	8007268 <__swrite+0x1e>
 800725c:	2302      	movs	r3, #2
 800725e:	2200      	movs	r2, #0
 8007260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007264:	f000 f868 	bl	8007338 <_lseek_r>
 8007268:	89a3      	ldrh	r3, [r4, #12]
 800726a:	4632      	mov	r2, r6
 800726c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007270:	81a3      	strh	r3, [r4, #12]
 8007272:	4628      	mov	r0, r5
 8007274:	463b      	mov	r3, r7
 8007276:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800727a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800727e:	f000 b817 	b.w	80072b0 <_write_r>

08007282 <__sseek>:
 8007282:	b510      	push	{r4, lr}
 8007284:	460c      	mov	r4, r1
 8007286:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800728a:	f000 f855 	bl	8007338 <_lseek_r>
 800728e:	1c43      	adds	r3, r0, #1
 8007290:	89a3      	ldrh	r3, [r4, #12]
 8007292:	bf15      	itete	ne
 8007294:	6560      	strne	r0, [r4, #84]	; 0x54
 8007296:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800729a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800729e:	81a3      	strheq	r3, [r4, #12]
 80072a0:	bf18      	it	ne
 80072a2:	81a3      	strhne	r3, [r4, #12]
 80072a4:	bd10      	pop	{r4, pc}

080072a6 <__sclose>:
 80072a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072aa:	f000 b813 	b.w	80072d4 <_close_r>
	...

080072b0 <_write_r>:
 80072b0:	b538      	push	{r3, r4, r5, lr}
 80072b2:	4604      	mov	r4, r0
 80072b4:	4608      	mov	r0, r1
 80072b6:	4611      	mov	r1, r2
 80072b8:	2200      	movs	r2, #0
 80072ba:	4d05      	ldr	r5, [pc, #20]	; (80072d0 <_write_r+0x20>)
 80072bc:	602a      	str	r2, [r5, #0]
 80072be:	461a      	mov	r2, r3
 80072c0:	f7f9 f856 	bl	8000370 <_write>
 80072c4:	1c43      	adds	r3, r0, #1
 80072c6:	d102      	bne.n	80072ce <_write_r+0x1e>
 80072c8:	682b      	ldr	r3, [r5, #0]
 80072ca:	b103      	cbz	r3, 80072ce <_write_r+0x1e>
 80072cc:	6023      	str	r3, [r4, #0]
 80072ce:	bd38      	pop	{r3, r4, r5, pc}
 80072d0:	20000244 	.word	0x20000244

080072d4 <_close_r>:
 80072d4:	b538      	push	{r3, r4, r5, lr}
 80072d6:	2300      	movs	r3, #0
 80072d8:	4d05      	ldr	r5, [pc, #20]	; (80072f0 <_close_r+0x1c>)
 80072da:	4604      	mov	r4, r0
 80072dc:	4608      	mov	r0, r1
 80072de:	602b      	str	r3, [r5, #0]
 80072e0:	f7f9 faf1 	bl	80008c6 <_close>
 80072e4:	1c43      	adds	r3, r0, #1
 80072e6:	d102      	bne.n	80072ee <_close_r+0x1a>
 80072e8:	682b      	ldr	r3, [r5, #0]
 80072ea:	b103      	cbz	r3, 80072ee <_close_r+0x1a>
 80072ec:	6023      	str	r3, [r4, #0]
 80072ee:	bd38      	pop	{r3, r4, r5, pc}
 80072f0:	20000244 	.word	0x20000244

080072f4 <_fstat_r>:
 80072f4:	b538      	push	{r3, r4, r5, lr}
 80072f6:	2300      	movs	r3, #0
 80072f8:	4d06      	ldr	r5, [pc, #24]	; (8007314 <_fstat_r+0x20>)
 80072fa:	4604      	mov	r4, r0
 80072fc:	4608      	mov	r0, r1
 80072fe:	4611      	mov	r1, r2
 8007300:	602b      	str	r3, [r5, #0]
 8007302:	f7f9 faeb 	bl	80008dc <_fstat>
 8007306:	1c43      	adds	r3, r0, #1
 8007308:	d102      	bne.n	8007310 <_fstat_r+0x1c>
 800730a:	682b      	ldr	r3, [r5, #0]
 800730c:	b103      	cbz	r3, 8007310 <_fstat_r+0x1c>
 800730e:	6023      	str	r3, [r4, #0]
 8007310:	bd38      	pop	{r3, r4, r5, pc}
 8007312:	bf00      	nop
 8007314:	20000244 	.word	0x20000244

08007318 <_isatty_r>:
 8007318:	b538      	push	{r3, r4, r5, lr}
 800731a:	2300      	movs	r3, #0
 800731c:	4d05      	ldr	r5, [pc, #20]	; (8007334 <_isatty_r+0x1c>)
 800731e:	4604      	mov	r4, r0
 8007320:	4608      	mov	r0, r1
 8007322:	602b      	str	r3, [r5, #0]
 8007324:	f7f9 fae9 	bl	80008fa <_isatty>
 8007328:	1c43      	adds	r3, r0, #1
 800732a:	d102      	bne.n	8007332 <_isatty_r+0x1a>
 800732c:	682b      	ldr	r3, [r5, #0]
 800732e:	b103      	cbz	r3, 8007332 <_isatty_r+0x1a>
 8007330:	6023      	str	r3, [r4, #0]
 8007332:	bd38      	pop	{r3, r4, r5, pc}
 8007334:	20000244 	.word	0x20000244

08007338 <_lseek_r>:
 8007338:	b538      	push	{r3, r4, r5, lr}
 800733a:	4604      	mov	r4, r0
 800733c:	4608      	mov	r0, r1
 800733e:	4611      	mov	r1, r2
 8007340:	2200      	movs	r2, #0
 8007342:	4d05      	ldr	r5, [pc, #20]	; (8007358 <_lseek_r+0x20>)
 8007344:	602a      	str	r2, [r5, #0]
 8007346:	461a      	mov	r2, r3
 8007348:	f7f9 fae1 	bl	800090e <_lseek>
 800734c:	1c43      	adds	r3, r0, #1
 800734e:	d102      	bne.n	8007356 <_lseek_r+0x1e>
 8007350:	682b      	ldr	r3, [r5, #0]
 8007352:	b103      	cbz	r3, 8007356 <_lseek_r+0x1e>
 8007354:	6023      	str	r3, [r4, #0]
 8007356:	bd38      	pop	{r3, r4, r5, pc}
 8007358:	20000244 	.word	0x20000244

0800735c <__malloc_lock>:
 800735c:	4801      	ldr	r0, [pc, #4]	; (8007364 <__malloc_lock+0x8>)
 800735e:	f7ff be0f 	b.w	8006f80 <__retarget_lock_acquire_recursive>
 8007362:	bf00      	nop
 8007364:	20000238 	.word	0x20000238

08007368 <__malloc_unlock>:
 8007368:	4801      	ldr	r0, [pc, #4]	; (8007370 <__malloc_unlock+0x8>)
 800736a:	f7ff be0a 	b.w	8006f82 <__retarget_lock_release_recursive>
 800736e:	bf00      	nop
 8007370:	20000238 	.word	0x20000238

08007374 <_read_r>:
 8007374:	b538      	push	{r3, r4, r5, lr}
 8007376:	4604      	mov	r4, r0
 8007378:	4608      	mov	r0, r1
 800737a:	4611      	mov	r1, r2
 800737c:	2200      	movs	r2, #0
 800737e:	4d05      	ldr	r5, [pc, #20]	; (8007394 <_read_r+0x20>)
 8007380:	602a      	str	r2, [r5, #0]
 8007382:	461a      	mov	r2, r3
 8007384:	f7f9 fa82 	bl	800088c <_read>
 8007388:	1c43      	adds	r3, r0, #1
 800738a:	d102      	bne.n	8007392 <_read_r+0x1e>
 800738c:	682b      	ldr	r3, [r5, #0]
 800738e:	b103      	cbz	r3, 8007392 <_read_r+0x1e>
 8007390:	6023      	str	r3, [r4, #0]
 8007392:	bd38      	pop	{r3, r4, r5, pc}
 8007394:	20000244 	.word	0x20000244

08007398 <_init>:
 8007398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800739a:	bf00      	nop
 800739c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800739e:	bc08      	pop	{r3}
 80073a0:	469e      	mov	lr, r3
 80073a2:	4770      	bx	lr

080073a4 <_fini>:
 80073a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073a6:	bf00      	nop
 80073a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073aa:	bc08      	pop	{r3}
 80073ac:	469e      	mov	lr, r3
 80073ae:	4770      	bx	lr
